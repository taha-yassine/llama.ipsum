#!/usr/bin/env python3
"""
Preprocess OpenAPI spec and generate Pydantic models.
"""

import argparse
from pathlib import Path
import requests
import textwrap
import tempfile
import yaml

from datamodel_code_generator import InputFileType, DataModelType, generate

SPEC_BASE_URL = "https://raw.githubusercontent.com/openai/openai-openapi/"
REV = "acea67a5045a6873c6eb2573a6be0e0a7b092ec6"

def preprocess_spec(spec_content: str) -> str:
    """Clean up the OpenAPI spec before generation using PyYAML.
    
    This function:
    1. Removes all deprecated elements from the spec
    2. Removes 'refusal' from required fields in ChatCompletionResponseMessage
    3. Preserves null values throughout the processing
    """
    print("Preprocessing OpenAPI spec...")
    
    spec_data = yaml.safe_load(spec_content)
    
    def remove_deprecated(node):
        """Recursively remove deprecated elements while preserving structure."""
        if isinstance(node, dict):
            # Check if current node is deprecated
            if node.get('deprecated') is True:
                return None
                
            # Process children
            for key in list(node.keys()):
                # Skip processing if the value is None (null) to preserve it
                if node[key] is None:
                    continue
                    
                result = remove_deprecated(node[key])
                if result is None:
                    del node[key]
                    
        elif isinstance(node, list):
            # Process list items in reverse to avoid index issues
            for i in reversed(range(len(node))):
                # Skip processing if the value is None (null) to preserve it
                if node[i] is None:
                    continue
                    
                result = remove_deprecated(node[i])
                if result is None:
                    del node[i]
                    
        return node

    # Remove deprecated elements
    cleaned_data = remove_deprecated(spec_data)
    
    # Remove 'refusal' from required list in ChatCompletionResponseMessage schema
    try:
        message_schema = cleaned_data['components']['schemas']['ChatCompletionResponseMessage']
        if 'required' in message_schema:
            message_schema['required'] = [req for req in message_schema['required'] if req != 'refusal']
            if not message_schema['required']:
                del message_schema['required']
    except KeyError as e:
        print(f"Warning: Could not find schema path: {e}")
    
    # Convert back to YAML string
    return yaml.dump(cleaned_data)

def generate_models(spec_content: str, spec_url: str, output_path: Path) -> None:
    """Generate Pydantic models from OpenAPI spec content."""
    print("Generating Pydantic models from processed OpenAPI spec...")
    
    # Create temp file for processing
    with tempfile.NamedTemporaryFile(mode="w", delete=True) as temp_spec:
        temp_spec.write(spec_content)
        temp_spec.flush()
        
        custom_header = textwrap.dedent(f"""\
        # This file was auto-generated by datamodel-codegen.
        # Do not edit this file directly.
        # Source: {spec_url}\
        """)

        generate(
            input_=Path(temp_spec.name),
            input_file_type=InputFileType.OpenAPI,
            output=output_path,
            output_model_type=DataModelType.PydanticV2BaseModel,
            use_standard_collections=True,
            use_schema_description=True,
            use_union_operator=True,
            field_constraints=True,
            reuse_model=True,
            strict_nullable=True,
            disable_timestamp=True,
            custom_file_header=custom_header,
        )

def get_spec_content(spec_url: str) -> str:
    """Fetch OpenAPI spec content from URL."""
    print(f"Fetching OpenAPI spec from {spec_url}...")
    response = requests.get(spec_url)
    response.raise_for_status()
    print("Fetched OpenAPI spec")
    return response.text

def main():
    parser = argparse.ArgumentParser(description="Generate Pydantic models from OpenAPI spec")
    parser.add_argument("--rev", default=REV, help="Revision of the OpenAPI spec")
    parser.add_argument("--output", default="app/models/schemas.py", help="Output path for generated models")
    
    args = parser.parse_args()
    
    output_path = Path(args.output)

    # Construct the OpenAI spec URL
    spec_url = f"{SPEC_BASE_URL}{args.rev}/openapi.yaml"
    
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    content = get_spec_content(spec_url)
    content = preprocess_spec(content)
    
    generate_models(content, spec_url, output_path)
    
    print("Done! Pydantic models generated.")

if __name__ == "__main__":
    main() 