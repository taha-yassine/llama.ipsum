# This file was auto-generated by datamodel-codegen.
# Do not edit this file directly.
# Source: https://raw.githubusercontent.com/openai/openai-openapi/acea67a5045a6873c6eb2573a6be0e0a7b092ec6/openapi.yaml        

from __future__ import annotations

from enum import Enum
from typing import Any

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, RootModel


class AddUploadPartRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: bytes = Field(..., description='The chunk of bytes for this Part.\n')


class Owner(BaseModel):
    created_at: int | None = Field(None, examples=[1711471533])
    id: str | None = Field(None, examples=['sa_456'])
    name: str | None = Field(None, examples=['My Service Account'])
    role: str | None = Field(None, examples=['member'])
    type: str | None = Field(None, examples=['service_account'])


class AdminApiKey(BaseModel):
    created_at: int | None = Field(None, examples=[1711471533])
    id: str | None = Field(None, examples=['key_abc'])
    name: str | None = Field(None, examples=['Administration Key'])
    object: str | None = Field(None, examples=['organization.admin_api_key'])
    owner: Owner | None = None
    redacted_value: str | None = Field(None, examples=['sk-admin...def'])
    value: str | None = Field(None, examples=['sk-admin-1234abcd'])


class ApiKeyList(BaseModel):
    data: list[AdminApiKey] | None = None
    first_id: str | None = Field(None, examples=['key_abc'])
    has_more: bool | None = Field(None, examples=[False])
    last_id: str | None = Field(None, examples=['key_xyz'])
    object: str | None = Field(None, examples=['list'])


class Object(Enum):
    """
    The object type, which is always `assistant`.
    """

    assistant = 'assistant'


class CodeInterpreter(BaseModel):
    file_ids: list[str] = Field(
        [],
        description='A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.\n',
        max_length=20,
    )


class FileSearch(BaseModel):
    vector_store_ids: list[str] | None = Field(
        None,
        description='The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n',
        max_length=1,
    )


class ToolResources(BaseModel):
    """
    A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """

    code_interpreter: CodeInterpreter | None = None
    file_search: FileSearch | None = None


class AssistantSupportedModels(Enum):
    o3_mini = 'o3-mini'
    o3_mini_2025_01_31 = 'o3-mini-2025-01-31'
    o1 = 'o1'
    o1_2024_12_17 = 'o1-2024-12-17'
    gpt_4o = 'gpt-4o'
    gpt_4o_2024_11_20 = 'gpt-4o-2024-11-20'
    gpt_4o_2024_08_06 = 'gpt-4o-2024-08-06'
    gpt_4o_2024_05_13 = 'gpt-4o-2024-05-13'
    gpt_4o_mini = 'gpt-4o-mini'
    gpt_4o_mini_2024_07_18 = 'gpt-4o-mini-2024-07-18'
    gpt_4_turbo = 'gpt-4-turbo'
    gpt_4_turbo_2024_04_09 = 'gpt-4-turbo-2024-04-09'
    gpt_4_0125_preview = 'gpt-4-0125-preview'
    gpt_4_turbo_preview = 'gpt-4-turbo-preview'
    gpt_4_1106_preview = 'gpt-4-1106-preview'
    gpt_4_vision_preview = 'gpt-4-vision-preview'
    gpt_4 = 'gpt-4'
    gpt_4_0314 = 'gpt-4-0314'
    gpt_4_0613 = 'gpt-4-0613'
    gpt_4_32k = 'gpt-4-32k'
    gpt_4_32k_0314 = 'gpt-4-32k-0314'
    gpt_4_32k_0613 = 'gpt-4-32k-0613'
    gpt_3_5_turbo = 'gpt-3.5-turbo'
    gpt_3_5_turbo_16k = 'gpt-3.5-turbo-16k'
    gpt_3_5_turbo_0613 = 'gpt-3.5-turbo-0613'
    gpt_3_5_turbo_1106 = 'gpt-3.5-turbo-1106'
    gpt_3_5_turbo_0125 = 'gpt-3.5-turbo-0125'
    gpt_3_5_turbo_16k_0613 = 'gpt-3.5-turbo-16k-0613'


class Type(Enum):
    """
    The type of tool being defined: `code_interpreter`
    """

    code_interpreter = 'code_interpreter'


class AssistantToolsCode(BaseModel):
    type: Type = Field(
        ..., description='The type of tool being defined: `code_interpreter`'
    )


class Type1(Enum):
    """
    The type of tool being defined: `file_search`
    """

    file_search = 'file_search'


class AssistantToolsFileSearchTypeOnly(BaseModel):
    type: Type1 = Field(
        ..., description='The type of tool being defined: `file_search`'
    )


class Type3(Enum):
    """
    The type of tool being defined: `function`
    """

    function = 'function'


class AssistantsApiResponseFormatOption1(Enum):
    """
    `auto` is the default value

    """

    auto = 'auto'


class AssistantsApiToolChoiceOption1(Enum):
    """
    `none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.

    """

    none = 'none'
    auto = 'auto'
    required = 'required'


class Function(BaseModel):
    name: str = Field(..., description='The name of the function to call.')


class Type4(Enum):
    """
    The type of the tool. If type is `function`, the function name must be set
    """

    function = 'function'
    code_interpreter = 'code_interpreter'
    file_search = 'file_search'


class AssistantsNamedToolChoice(BaseModel):
    """
    Specifies a tool the model should use. Use to force the model to call a specific tool.
    """

    function: Function | None = None
    type: Type4 = Field(
        ...,
        description='The type of the tool. If type is `function`, the function name must be set',
    )


class AudioResponseFormat(Enum):
    """
    The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.

    """

    json = 'json'
    text = 'text'
    srt = 'srt'
    verbose_json = 'verbose_json'
    vtt = 'vtt'


class Data(BaseModel):
    """
    The payload used to create the API key.
    """

    scopes: list[str] | None = Field(
        None,
        description='A list of scopes allowed for the API key, e.g. `["api.model.request"]`',
    )


class ApiKeyCreated(BaseModel):
    """
    The details for events with this `type`.
    """

    data: Data | None = Field(
        None, description='The payload used to create the API key.'
    )
    id: str | None = Field(None, description='The tracking ID of the API key.')


class ApiKeyDeleted(BaseModel):
    """
    The details for events with this `type`.
    """

    id: str | None = Field(None, description='The tracking ID of the API key.')


class ChangesRequested(BaseModel):
    """
    The payload used to update the API key.
    """

    scopes: list[str] | None = Field(
        None,
        description='A list of scopes allowed for the API key, e.g. `["api.model.request"]`',
    )


class ApiKeyUpdated(BaseModel):
    """
    The details for events with this `type`.
    """

    changes_requested: ChangesRequested | None = Field(
        None, description='The payload used to update the API key.'
    )
    id: str | None = Field(None, description='The tracking ID of the API key.')


class InviteAccepted(BaseModel):
    """
    The details for events with this `type`.
    """

    id: str | None = Field(None, description='The ID of the invite.')


class InviteDeleted(InviteAccepted):
    """
    The details for events with this `type`.
    """


class Data1(BaseModel):
    """
    The payload used to create the invite.
    """

    email: str | None = Field(
        None, description='The email invited to the organization.'
    )
    role: str | None = Field(
        None,
        description='The role the email was invited to be. Is either `owner` or `member`.',
    )


class InviteSent(BaseModel):
    """
    The details for events with this `type`.
    """

    data: Data1 | None = Field(
        None, description='The payload used to create the invite.'
    )
    id: str | None = Field(None, description='The ID of the invite.')


class LoginFailed(BaseModel):
    """
    The details for events with this `type`.
    """

    error_code: str | None = Field(None, description='The error code of the failure.')
    error_message: str | None = Field(
        None, description='The error message of the failure.'
    )


class LogoutFailed(LoginFailed):
    """
    The details for events with this `type`.
    """


class Settings(BaseModel):
    threads_ui_visibility: str | None = Field(
        None,
        description='Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`.',
    )
    usage_dashboard_visibility: str | None = Field(
        None,
        description='Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`.',
    )


class ChangesRequested1(BaseModel):
    """
    The payload used to update the organization settings.
    """

    description: str | None = Field(None, description='The organization description.')
    name: str | None = Field(None, description='The organization name.')
    settings: Settings | None = None
    title: str | None = Field(None, description='The organization title.')


class OrganizationUpdated(BaseModel):
    """
    The details for events with this `type`.
    """

    changes_requested: ChangesRequested1 | None = Field(
        None, description='The payload used to update the organization settings.'
    )
    id: str | None = Field(None, description='The organization ID.')


class Project(BaseModel):
    """
    The project that the action was scoped to. Absent for actions not scoped to projects.
    """

    id: str | None = Field(None, description='The project ID.')
    name: str | None = Field(None, description='The project title.')


class ProjectArchived(BaseModel):
    """
    The details for events with this `type`.
    """

    id: str | None = Field(None, description='The project ID.')


class Data2(BaseModel):
    """
    The payload used to create the project.
    """

    name: str | None = Field(None, description='The project name.')
    title: str | None = Field(
        None, description='The title of the project as seen on the dashboard.'
    )


class ProjectCreated(BaseModel):
    """
    The details for events with this `type`.
    """

    data: Data2 | None = Field(
        None, description='The payload used to create the project.'
    )
    id: str | None = Field(None, description='The project ID.')


class ChangesRequested2(BaseModel):
    """
    The payload used to update the project.
    """

    title: str | None = Field(
        None, description='The title of the project as seen on the dashboard.'
    )


class ProjectUpdated(BaseModel):
    """
    The details for events with this `type`.
    """

    changes_requested: ChangesRequested2 | None = Field(
        None, description='The payload used to update the project.'
    )
    id: str | None = Field(None, description='The project ID.')


class RateLimitDeleted(BaseModel):
    """
    The details for events with this `type`.
    """

    id: str | None = Field(None, description='The rate limit ID')


class ChangesRequested3(BaseModel):
    """
    The payload used to update the rate limits.
    """

    batch_1_day_max_input_tokens: int | None = Field(
        None,
        description='The maximum batch input tokens per day. Only relevant for certain models.',
    )
    max_audio_megabytes_per_1_minute: int | None = Field(
        None,
        description='The maximum audio megabytes per minute. Only relevant for certain models.',
    )
    max_images_per_1_minute: int | None = Field(
        None,
        description='The maximum images per minute. Only relevant for certain models.',
    )
    max_requests_per_1_day: int | None = Field(
        None,
        description='The maximum requests per day. Only relevant for certain models.',
    )
    max_requests_per_1_minute: int | None = Field(
        None, description='The maximum requests per minute.'
    )
    max_tokens_per_1_minute: int | None = Field(
        None, description='The maximum tokens per minute.'
    )


class RateLimitUpdated(BaseModel):
    """
    The details for events with this `type`.
    """

    changes_requested: ChangesRequested3 | None = Field(
        None, description='The payload used to update the rate limits.'
    )
    id: str | None = Field(None, description='The rate limit ID')


class Data3(BaseModel):
    """
    The payload used to create the service account.
    """

    role: str | None = Field(
        None,
        description='The role of the service account. Is either `owner` or `member`.',
    )


class ServiceAccountCreated(BaseModel):
    """
    The details for events with this `type`.
    """

    data: Data3 | None = Field(
        None, description='The payload used to create the service account.'
    )
    id: str | None = Field(None, description='The service account ID.')


class ServiceAccountDeleted(BaseModel):
    """
    The details for events with this `type`.
    """

    id: str | None = Field(None, description='The service account ID.')


class ChangesRequested4(BaseModel):
    """
    The payload used to updated the service account.
    """

    role: str | None = Field(
        None,
        description='The role of the service account. Is either `owner` or `member`.',
    )


class ServiceAccountUpdated(BaseModel):
    """
    The details for events with this `type`.
    """

    changes_requested: ChangesRequested4 | None = Field(
        None, description='The payload used to updated the service account.'
    )
    id: str | None = Field(None, description='The service account ID.')


class Data4(BaseModel):
    """
    The payload used to add the user to the project.
    """

    role: str | None = Field(
        None, description='The role of the user. Is either `owner` or `member`.'
    )


class UserAdded(BaseModel):
    """
    The details for events with this `type`.
    """

    data: Data4 | None = Field(
        None, description='The payload used to add the user to the project.'
    )
    id: str | None = Field(None, description='The user ID.')


class UserDeleted(BaseModel):
    """
    The details for events with this `type`.
    """

    id: str | None = Field(None, description='The user ID.')


class ChangesRequested5(BaseModel):
    """
    The payload used to update the user.
    """

    role: str | None = Field(
        None, description='The role of the user. Is either `owner` or `member`.'
    )


class UserUpdated(BaseModel):
    """
    The details for events with this `type`.
    """

    changes_requested: ChangesRequested5 | None = Field(
        None, description='The payload used to update the user.'
    )
    id: str | None = Field(None, description='The project ID.')


class Type5(Enum):
    """
    The type of actor. Is either `session` or `api_key`.
    """

    session = 'session'
    api_key = 'api_key'


class Type6(Enum):
    """
    The type of API key. Can be either `user` or `service_account`.
    """

    user = 'user'
    service_account = 'service_account'


class AuditLogActorServiceAccount(BaseModel):
    """
    The service account that performed the audit logged action.
    """

    id: str | None = Field(None, description='The service account id.')


class AuditLogActorUser(BaseModel):
    """
    The user who performed the audit logged action.
    """

    email: str | None = Field(None, description='The user email.')
    id: str | None = Field(None, description='The user id.')


class AuditLogEventType(Enum):
    """
    The event type.
    """

    api_key_created = 'api_key.created'
    api_key_updated = 'api_key.updated'
    api_key_deleted = 'api_key.deleted'
    invite_sent = 'invite.sent'
    invite_accepted = 'invite.accepted'
    invite_deleted = 'invite.deleted'
    login_succeeded = 'login.succeeded'
    login_failed = 'login.failed'
    logout_succeeded = 'logout.succeeded'
    logout_failed = 'logout.failed'
    organization_updated = 'organization.updated'
    project_created = 'project.created'
    project_updated = 'project.updated'
    project_archived = 'project.archived'
    service_account_created = 'service_account.created'
    service_account_updated = 'service_account.updated'
    service_account_deleted = 'service_account.deleted'
    rate_limit_updated = 'rate_limit.updated'
    rate_limit_deleted = 'rate_limit.deleted'
    user_added = 'user.added'
    user_updated = 'user.updated'
    user_deleted = 'user.deleted'


class Type7(Enum):
    """
    Always `auto`.
    """

    auto = 'auto'


class AutoChunkingStrategyRequestParam(BaseModel):
    """
    The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type7 = Field(..., description='Always `auto`.')


class Datum(BaseModel):
    code: str | None = Field(
        None, description='An error code identifying the error type.'
    )
    line: int | None = Field(
        None,
        description='The line number of the input file where the error occurred, if applicable.',
    )
    message: str | None = Field(
        None,
        description='A human-readable message providing more details about the error.',
    )
    param: str | None = Field(
        None,
        description='The name of the parameter that caused the error, if applicable.',
    )


class Errors(BaseModel):
    data: list[Datum] | None = None
    object: str | None = Field(
        None, description='The object type, which is always `list`.'
    )


class Object1(Enum):
    """
    The object type, which is always `batch`.
    """

    batch = 'batch'


class RequestCounts(BaseModel):
    """
    The request counts for different statuses within the batch.
    """

    completed: int = Field(
        ..., description='Number of requests that have been completed successfully.'
    )
    failed: int = Field(..., description='Number of requests that have failed.')
    total: int = Field(..., description='Total number of requests in the batch.')


class Status(Enum):
    """
    The current status of the batch.
    """

    validating = 'validating'
    failed = 'failed'
    in_progress = 'in_progress'
    finalizing = 'finalizing'
    completed = 'completed'
    expired = 'expired'
    cancelling = 'cancelling'
    cancelled = 'cancelled'


class Method(Enum):
    """
    The HTTP method to be used for the request. Currently only `POST` is supported.
    """

    POST = 'POST'


class BatchRequestInput(BaseModel):
    """
    The per-line object of the batch input file
    """

    custom_id: str | None = Field(
        None,
        description='A developer-provided per-request id that will be used to match outputs to inputs. Must be unique for each request in a batch.',
    )
    method: Method | None = Field(
        None,
        description='The HTTP method to be used for the request. Currently only `POST` is supported.',
    )
    url: str | None = Field(
        None,
        description='The OpenAI API relative URL to be used for the request. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported.',
    )


class Error(BaseModel):
    """
    For requests that failed with a non-HTTP error, this will contain more information on the cause of the failure.
    """

    code: str | None = Field(None, description='A machine-readable error code.')
    message: str | None = Field(None, description='A human-readable error message.')


class Response(BaseModel):
    body: dict[str, Any] | None = Field(
        None, description='The JSON body of the response'
    )
    request_id: str | None = Field(
        None,
        description='An unique identifier for the OpenAI API request. Please include this request ID when contacting support.',
    )
    status_code: int | None = Field(
        None, description='The HTTP status code of the response'
    )


class BatchRequestOutput(BaseModel):
    """
    The per-line object of the batch output and error files
    """

    custom_id: str | None = Field(
        None,
        description='A developer-provided per-request id that will be used to match outputs to inputs.',
    )
    error: Error | None = Field(
        None,
        description='For requests that failed with a non-HTTP error, this will contain more information on the cause of the failure.',
    )
    id: str | None = None
    response: Response | None = None


class CancelUploadRequest(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class ChatCompletionFunctionCallOption(BaseModel):
    """
    Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.

    """

    name: str = Field(..., description='The name of the function to call.')


class Function1(BaseModel):
    """
    The function that the model called.
    """

    arguments: str = Field(
        ...,
        description='The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.',
    )
    name: str = Field(..., description='The name of the function to call.')


class Type8(Enum):
    """
    The type of the tool. Currently, only `function` is supported.
    """

    function = 'function'


class ChatCompletionMessageToolCall(BaseModel):
    function: Function1 = Field(..., description='The function that the model called.')
    id: str = Field(..., description='The ID of the tool call.')
    type: Type8 = Field(
        ...,
        description='The type of the tool. Currently, only `function` is supported.',
    )


class Function2(BaseModel):
    arguments: str | None = Field(
        None,
        description='The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.',
    )
    name: str | None = Field(None, description='The name of the function to call.')


class ChatCompletionMessageToolCallChunk(BaseModel):
    function: Function2 | None = None
    id: str | None = Field(None, description='The ID of the tool call.')
    index: int
    type: Type8 | None = Field(
        None,
        description='The type of the tool. Currently, only `function` is supported.',
    )


class ChatCompletionMessageToolCalls(RootModel[list[ChatCompletionMessageToolCall]]):
    """
    The tool calls generated by the model, such as function calls.
    """

    root: list[ChatCompletionMessageToolCall] = Field(
        ...,
        description='The tool calls generated by the model, such as function calls.',
    )


class ChatCompletionModality(Enum):
    text = 'text'
    audio = 'audio'


class ChatCompletionModalities(RootModel[list[ChatCompletionModality] | None]):
    """
    Output types that you would like the model to generate for this request.
    Most models are capable of generating text, which is the default:

    `["text"]`

    The `gpt-4o-audio-preview` model can also be used to [generate audio](/docs/guides/audio). To
    request that this model generate both text and audio responses, you can
    use:

    `["text", "audio"]`

    """

    root: list[ChatCompletionModality] | None = Field(
        ...,
        description='Output types that you would like the model to generate for this request.\nMost models are capable of generating text, which is the default:\n\n`["text"]`\n\nThe `gpt-4o-audio-preview` model can also be used to [generate audio](/docs/guides/audio). To\nrequest that this model generate both text and audio responses, you can\nuse:\n\n`["text", "audio"]`\n',
    )


class Function3(Function):
    pass


class ChatCompletionNamedToolChoice(BaseModel):
    """
    Specifies a tool the model should use. Use to force the model to call a specific function.
    """

    function: Function3
    type: Type8 = Field(
        ...,
        description='The type of the tool. Currently, only `function` is supported.',
    )


class Audio(BaseModel):
    """
    Data about a previous audio response from the model.
    [Learn more](/docs/guides/audio).

    """

    id: str = Field(
        ...,
        description='Unique identifier for a previous audio response from the model.\n',
    )


class Role(Enum):
    """
    The role of the messages author, in this case `assistant`.
    """

    assistant = 'assistant'


class Role1(Enum):
    """
    The role of the messages author, in this case `developer`.
    """

    developer = 'developer'


class Format(Enum):
    """
    The format of the encoded audio data. Currently supports "wav" and "mp3".

    """

    wav = 'wav'
    mp3 = 'mp3'


class InputAudio(BaseModel):
    data: str = Field(..., description='Base64 encoded audio data.')
    format: Format = Field(
        ...,
        description='The format of the encoded audio data. Currently supports "wav" and "mp3".\n',
    )


class Type11(Enum):
    """
    The type of the content part. Always `input_audio`.
    """

    input_audio = 'input_audio'


class ChatCompletionRequestMessageContentPartAudio(BaseModel):
    """
    Learn about [audio inputs](/docs/guides/audio).

    """

    input_audio: InputAudio
    type: Type11 = Field(
        ..., description='The type of the content part. Always `input_audio`.'
    )


class Detail(Enum):
    """
    Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
    """

    auto = 'auto'
    low = 'low'
    high = 'high'


class ImageUrl(BaseModel):
    detail: Detail = Field(
        'auto',
        description='Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).',
    )
    url: AnyUrl = Field(
        ..., description='Either a URL of the image or the base64 encoded image data.'
    )


class Type12(Enum):
    """
    The type of the content part.
    """

    image_url = 'image_url'


class ChatCompletionRequestMessageContentPartImage(BaseModel):
    """
    Learn about [image inputs](/docs/guides/vision).

    """

    image_url: ImageUrl
    type: Type12 = Field(..., description='The type of the content part.')


class Type13(Enum):
    """
    The type of the content part.
    """

    refusal = 'refusal'


class ChatCompletionRequestMessageContentPartRefusal(BaseModel):
    refusal: str = Field(..., description='The refusal message generated by the model.')
    type: Type13 = Field(..., description='The type of the content part.')


class Type14(Enum):
    """
    The type of the content part.
    """

    text = 'text'


class ChatCompletionRequestMessageContentPartText(BaseModel):
    """
    Learn about [text inputs](/docs/guides/text-generation).

    """

    text: str = Field(..., description='The text content.')
    type: Type14 = Field(..., description='The type of the content part.')


class Role2(Enum):
    """
    The role of the messages author, in this case `system`.
    """

    system = 'system'


class ChatCompletionRequestSystemMessageContentPart(
    RootModel[ChatCompletionRequestMessageContentPartText]
):
    root: ChatCompletionRequestMessageContentPartText


class Role3(Enum):
    """
    The role of the messages author, in this case `tool`.
    """

    tool = 'tool'


class ChatCompletionRequestToolMessageContentPart(
    ChatCompletionRequestSystemMessageContentPart
):
    pass


class Role4(Enum):
    """
    The role of the messages author, in this case `user`.
    """

    user = 'user'


class ChatCompletionRequestUserMessageContentPart(
    RootModel[
        ChatCompletionRequestMessageContentPartText
        | ChatCompletionRequestMessageContentPartImage
        | ChatCompletionRequestMessageContentPartAudio
    ]
):
    root: (
        ChatCompletionRequestMessageContentPartText
        | ChatCompletionRequestMessageContentPartImage
        | ChatCompletionRequestMessageContentPartAudio
    )


class Audio1(BaseModel):
    """
    If the audio output modality is requested, this object contains data
    about the audio response from the model. [Learn more](/docs/guides/audio).

    """

    data: str = Field(
        ...,
        description='Base64 encoded audio bytes generated by the model, in the format\nspecified in the request.\n',
    )
    expires_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when this audio response will\nno longer be accessible on the server for use in multi-turn\nconversations.\n',
    )
    id: str = Field(..., description='Unique identifier for this audio response.')
    transcript: str = Field(
        ..., description='Transcript of the audio generated by the model.'
    )


class Role5(Enum):
    """
    The role of the author of this message.
    """

    assistant = 'assistant'


class ChatCompletionResponseMessage(BaseModel):
    """
    A chat completion message generated by the model.
    """

    audio: Audio1 | None = Field(
        None,
        description='If the audio output modality is requested, this object contains data\nabout the audio response from the model. [Learn more](/docs/guides/audio).\n',
    )
    content: str | None = Field(..., description='The contents of the message.')
    refusal: str | None = Field(
        None, description='The refusal message generated by the model.'
    )
    role: Role5 = Field(..., description='The role of the author of this message.')
    tool_calls: ChatCompletionMessageToolCalls | None = None


class ChatCompletionRole(Enum):
    """
    The role of the author of a message
    """

    developer = 'developer'
    system = 'system'
    user = 'user'
    assistant = 'assistant'
    tool = 'tool'
    function = 'function'


class ChatCompletionStreamOptions(BaseModel):
    """
    Options for streaming response. Only set this when you set `stream: true`.

    """

    include_usage: bool | None = Field(
        None,
        description='If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.\n',
    )


class Role6(Enum):
    """
    The role of the author of this message.
    """

    developer = 'developer'
    system = 'system'
    user = 'user'
    assistant = 'assistant'
    tool = 'tool'


class ChatCompletionStreamResponseDelta(BaseModel):
    """
    A chat completion delta generated by streamed model responses.
    """

    content: str | None = Field(None, description='The contents of the chunk message.')
    refusal: str | None = Field(
        None, description='The refusal message generated by the model.'
    )
    role: Role6 | None = Field(
        None, description='The role of the author of this message.'
    )
    tool_calls: list[ChatCompletionMessageToolCallChunk] | None = None


class TopLogprob(BaseModel):
    bytes: list[int] | None = Field(
        ...,
        description='A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.',
    )
    logprob: float = Field(
        ...,
        description='The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.',
    )
    token: str = Field(..., description='The token.')


class ChatCompletionTokenLogprob(BaseModel):
    bytes: list[int] | None = Field(
        ...,
        description='A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.',
    )
    logprob: float = Field(
        ...,
        description='The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.',
    )
    token: str = Field(..., description='The token.')
    top_logprobs: list[TopLogprob] = Field(
        ...,
        description='List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.',
    )


class ChatCompletionToolChoiceOption1(Enum):
    """
    `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools.

    """

    none = 'none'
    auto = 'auto'
    required = 'required'


class ChatCompletionToolChoiceOption(
    RootModel[ChatCompletionToolChoiceOption1 | ChatCompletionNamedToolChoice]
):
    root: ChatCompletionToolChoiceOption1 | ChatCompletionNamedToolChoice = Field(
        ...,
        description='Controls which (if any) tool is called by the model.\n`none` means the model will not call any tool and instead generates a message.\n`auto` means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools.\nSpecifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools are present.\n',
    )


class CompleteUploadRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    md5: str | None = Field(
        None,
        description='The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect.\n',
    )
    part_ids: list[str] = Field(..., description='The ordered list of Part IDs.\n')


class CompletionTokensDetails(BaseModel):
    """
    Breakdown of tokens used in a completion.
    """

    accepted_prediction_tokens: int = Field(
        0,
        description='When using Predicted Outputs, the number of tokens in the\nprediction that appeared in the completion.\n',
    )
    audio_tokens: int = Field(
        0, description='Audio input tokens generated by the model.'
    )
    reasoning_tokens: int = Field(
        0, description='Tokens generated by the model for reasoning.'
    )
    rejected_prediction_tokens: int = Field(
        0,
        description='When using Predicted Outputs, the number of tokens in the\nprediction that did not appear in the completion. However, like\nreasoning tokens, these tokens are still counted in the total\ncompletion tokens for purposes of billing, output, and context window\nlimits.\n',
    )


class PromptTokensDetails(BaseModel):
    """
    Breakdown of tokens used in the prompt.
    """

    audio_tokens: int = Field(
        0, description='Audio input tokens present in the prompt.'
    )
    cached_tokens: int = Field(0, description='Cached tokens present in the prompt.')


class CompletionUsage(BaseModel):
    """
    Usage statistics for the completion request.
    """

    completion_tokens: int = Field(
        ..., description='Number of tokens in the generated completion.'
    )
    completion_tokens_details: CompletionTokensDetails | None = Field(
        None, description='Breakdown of tokens used in a completion.'
    )
    prompt_tokens: int = Field(..., description='Number of tokens in the prompt.')
    prompt_tokens_details: PromptTokensDetails | None = Field(
        None, description='Breakdown of tokens used in the prompt.'
    )
    total_tokens: int = Field(
        ...,
        description='Total number of tokens used in the request (prompt + completion).',
    )


class Amount(BaseModel):
    """
    The monetary value in its associated currency.
    """

    currency: str | None = Field(
        None, description='Lowercase ISO-4217 currency e.g. "usd"'
    )
    value: float | None = Field(None, description='The numeric value of the cost.')


class Object2(Enum):
    organization_costs_result = 'organization.costs.result'


class CostsResult(BaseModel):
    """
    The aggregated costs details of the specific time bucket.
    """

    amount: Amount | None = Field(
        None, description='The monetary value in its associated currency.'
    )
    line_item: str | None = Field(
        None,
        description='When `group_by=line_item`, this field provides the line item of the grouped costs result.',
    )
    object: Object2
    project_id: str | None = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped costs result.',
    )


class CodeInterpreter1(BaseModel):
    file_ids: list[str] = Field(
        [],
        description='A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n',
        max_length=20,
    )


class ChunkingStrategy(AutoChunkingStrategyRequestParam):
    """
    The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
    """


class Static(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    chunk_overlap_tokens: int = Field(
        ...,
        description='The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n',
    )
    max_chunk_size_tokens: int = Field(
        ...,
        description='The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.',
        ge=100,
        le=4096,
    )


class Type17(Enum):
    """
    Always `static`.
    """

    static = 'static'


class ChunkingStrategy1(BaseModel):
    """
    The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    static: Static
    type: Type17 = Field(..., description='Always `static`.')


class ChunkingStrategy2(AutoChunkingStrategyRequestParam):
    """
    The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
    """


class ChunkingStrategy3(ChunkingStrategy1):
    """
    The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
    """


class FinishReason(Enum):
    """
    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.

    """

    stop = 'stop'
    length = 'length'
    function_call = 'function_call'
    content_filter = 'content_filter'


class Choice(BaseModel):
    finish_reason: FinishReason = Field(
        ...,
        description='The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.\n',
    )
    index: int = Field(
        ..., description='The index of the choice in the list of choices.'
    )
    message: ChatCompletionResponseMessage


class Object3(Enum):
    """
    The object type, which is always `chat.completion`.
    """

    chat_completion = 'chat.completion'


class CreateChatCompletionFunctionResponse(BaseModel):
    """
    Represents a chat completion response returned by model, based on the provided input.
    """

    choices: list[Choice] = Field(
        ...,
        description='A list of chat completion choices. Can be more than one if `n` is greater than 1.',
    )
    created: int = Field(
        ...,
        description='The Unix timestamp (in seconds) of when the chat completion was created.',
    )
    id: str = Field(..., description='A unique identifier for the chat completion.')
    model: str = Field(..., description='The model used for the chat completion.')
    object: Object3 = Field(
        ..., description='The object type, which is always `chat.completion`.'
    )
    system_fingerprint: str | None = Field(
        None,
        description='This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n',
    )
    usage: CompletionUsage | None = None


class CreateChatCompletionImageResponse(BaseModel):
    """
    Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
    """


class Format1(Enum):
    """
    Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
    `opus`, or `pcm16`.

    """

    wav = 'wav'
    mp3 = 'mp3'
    flac = 'flac'
    opus = 'opus'
    pcm16 = 'pcm16'


class Voice(Enum):
    """
    The voice the model uses to respond. Supported voices are `ash`, `ballad`, `coral`, `sage`, and `verse` (also supported but not recommended are `alloy`, `echo`, and `shimmer`; these voices are less expressive).

    """

    alloy = 'alloy'
    ash = 'ash'
    ballad = 'ballad'
    coral = 'coral'
    echo = 'echo'
    sage = 'sage'
    shimmer = 'shimmer'
    verse = 'verse'


class Audio2(BaseModel):
    """
    Parameters for audio output. Required when audio output is requested with
    `modalities: ["audio"]`. [Learn more](/docs/guides/audio).

    """

    format: Format1 = Field(
        ...,
        description='Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,\n`opus`, or `pcm16`.\n',
    )
    voice: Voice = Field(
        ...,
        description='The voice the model uses to respond. Supported voices are `ash`, `ballad`, `coral`, `sage`, and `verse` (also supported but not recommended are `alloy`, `echo`, and `shimmer`; these voices are less expressive).\n',
    )


class Model(Enum):
    """
    ID of the model to use. See the [model endpoint compatibility](/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API.
    """

    o3_mini = 'o3-mini'
    o3_mini_2025_01_31 = 'o3-mini-2025-01-31'
    o1 = 'o1'
    o1_2024_12_17 = 'o1-2024-12-17'
    o1_preview = 'o1-preview'
    o1_preview_2024_09_12 = 'o1-preview-2024-09-12'
    o1_mini = 'o1-mini'
    o1_mini_2024_09_12 = 'o1-mini-2024-09-12'
    gpt_4o = 'gpt-4o'
    gpt_4o_2024_11_20 = 'gpt-4o-2024-11-20'
    gpt_4o_2024_08_06 = 'gpt-4o-2024-08-06'
    gpt_4o_2024_05_13 = 'gpt-4o-2024-05-13'
    gpt_4o_audio_preview = 'gpt-4o-audio-preview'
    gpt_4o_audio_preview_2024_10_01 = 'gpt-4o-audio-preview-2024-10-01'
    gpt_4o_audio_preview_2024_12_17 = 'gpt-4o-audio-preview-2024-12-17'
    gpt_4o_mini_audio_preview = 'gpt-4o-mini-audio-preview'
    gpt_4o_mini_audio_preview_2024_12_17 = 'gpt-4o-mini-audio-preview-2024-12-17'
    chatgpt_4o_latest = 'chatgpt-4o-latest'
    gpt_4o_mini = 'gpt-4o-mini'
    gpt_4o_mini_2024_07_18 = 'gpt-4o-mini-2024-07-18'
    gpt_4_turbo = 'gpt-4-turbo'
    gpt_4_turbo_2024_04_09 = 'gpt-4-turbo-2024-04-09'
    gpt_4_0125_preview = 'gpt-4-0125-preview'
    gpt_4_turbo_preview = 'gpt-4-turbo-preview'
    gpt_4_1106_preview = 'gpt-4-1106-preview'
    gpt_4_vision_preview = 'gpt-4-vision-preview'
    gpt_4 = 'gpt-4'
    gpt_4_0314 = 'gpt-4-0314'
    gpt_4_0613 = 'gpt-4-0613'
    gpt_4_32k = 'gpt-4-32k'
    gpt_4_32k_0314 = 'gpt-4-32k-0314'
    gpt_4_32k_0613 = 'gpt-4-32k-0613'
    gpt_3_5_turbo = 'gpt-3.5-turbo'
    gpt_3_5_turbo_16k = 'gpt-3.5-turbo-16k'
    gpt_3_5_turbo_0301 = 'gpt-3.5-turbo-0301'
    gpt_3_5_turbo_0613 = 'gpt-3.5-turbo-0613'
    gpt_3_5_turbo_1106 = 'gpt-3.5-turbo-1106'
    gpt_3_5_turbo_0125 = 'gpt-3.5-turbo-0125'
    gpt_3_5_turbo_16k_0613 = 'gpt-3.5-turbo-16k-0613'


class ServiceTier(Enum):
    """
    Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
      - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.
      - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee.
      - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee.
      - When not set, the default behavior is 'auto'.

    """

    auto = 'auto'
    default = 'default'


class Stop(RootModel[list[str]]):
    root: list[str] = Field(
        ...,
        description='Up to 4 sequences where the API will stop generating further tokens.\n',
        max_length=4,
        min_length=1,
    )


class FinishReason1(Enum):
    """
    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
    `length` if the maximum number of tokens specified in the request was reached,
    `content_filter` if content was omitted due to a flag from our content filters,
    `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.

    """

    stop = 'stop'
    length = 'length'
    tool_calls = 'tool_calls'
    content_filter = 'content_filter'
    function_call = 'function_call'


class Logprobs(BaseModel):
    """
    Log probability information for the choice.
    """

    content: list[ChatCompletionTokenLogprob] | None = Field(
        ...,
        description='A list of message content tokens with log probability information.',
    )
    refusal: list[ChatCompletionTokenLogprob] | None = Field(
        ...,
        description='A list of message refusal tokens with log probability information.',
    )


class Choice1(BaseModel):
    finish_reason: FinishReason1 = Field(
        ...,
        description='The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n',
    )
    index: int = Field(
        ..., description='The index of the choice in the list of choices.'
    )
    logprobs: Logprobs | None = Field(
        ..., description='Log probability information for the choice.'
    )
    message: ChatCompletionResponseMessage


class ServiceTier1(Enum):
    """
    The service tier used for processing the request.
    """

    scale = 'scale'
    default = 'default'


class CreateChatCompletionResponse(BaseModel):
    """
    Represents a chat completion response returned by model, based on the provided input.
    """

    choices: list[Choice1] = Field(
        ...,
        description='A list of chat completion choices. Can be more than one if `n` is greater than 1.',
    )
    created: int = Field(
        ...,
        description='The Unix timestamp (in seconds) of when the chat completion was created.',
    )
    id: str = Field(..., description='A unique identifier for the chat completion.')
    model: str = Field(..., description='The model used for the chat completion.')
    object: Object3 = Field(
        ..., description='The object type, which is always `chat.completion`.'
    )
    service_tier: ServiceTier1 | None = Field(
        None,
        description='The service tier used for processing the request.',
        examples=['scale'],
    )
    system_fingerprint: str | None = Field(
        None,
        description='This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n',
    )
    usage: CompletionUsage | None = None


class Choice2(BaseModel):
    delta: ChatCompletionStreamResponseDelta
    finish_reason: FinishReason1 | None = Field(
        ...,
        description='The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n',
    )
    index: int = Field(
        ..., description='The index of the choice in the list of choices.'
    )
    logprobs: Logprobs | None = Field(
        None, description='Log probability information for the choice.'
    )


class Object5(Enum):
    """
    The object type, which is always `chat.completion.chunk`.
    """

    chat_completion_chunk = 'chat.completion.chunk'


class Usage(BaseModel):
    """
    An optional field that will only be present when you set `stream_options: {"include_usage": true}` in your request.
    When present, it contains a null value except for the last chunk which contains the token usage statistics for the entire request.

    """

    completion_tokens: int = Field(
        ..., description='Number of tokens in the generated completion.'
    )
    prompt_tokens: int = Field(..., description='Number of tokens in the prompt.')
    total_tokens: int = Field(
        ...,
        description='Total number of tokens used in the request (prompt + completion).',
    )


class CreateChatCompletionStreamResponse(BaseModel):
    """
    Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
    """

    choices: list[Choice2] = Field(
        ...,
        description='A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the\nlast chunk if you set `stream_options: {"include_usage": true}`.\n',
    )
    created: int = Field(
        ...,
        description='The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.',
    )
    id: str = Field(
        ...,
        description='A unique identifier for the chat completion. Each chunk has the same ID.',
    )
    model: str = Field(..., description='The model to generate the completion.')
    object: Object5 = Field(
        ..., description='The object type, which is always `chat.completion.chunk`.'
    )
    service_tier: ServiceTier1 | None = Field(
        None,
        description='The service tier used for processing the request.',
        examples=['scale'],
    )
    system_fingerprint: str | None = Field(
        None,
        description='This fingerprint represents the backend configuration that the model runs with.\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n',
    )
    usage: Usage | None = Field(
        None,
        description='An optional field that will only be present when you set `stream_options: {"include_usage": true}` in your request.\nWhen present, it contains a null value except for the last chunk which contains the token usage statistics for the entire request.\n',
    )


class Model1(Enum):
    """
    ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.

    """

    gpt_3_5_turbo_instruct = 'gpt-3.5-turbo-instruct'
    davinci_002 = 'davinci-002'
    babbage_002 = 'babbage-002'


class Prompt(RootModel[list[int] | None]):
    root: list[int] | None = Field(
        '<|endoftext|>',
        description='The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.\n\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.\n',
        examples=['[1212, 318, 257, 1332, 13]'],
        min_length=1,
    )


class Prompt1Item(RootModel[list[int]]):
    root: list[int] = Field(..., min_length=1)


class Prompt1(RootModel[list[Prompt1Item] | None]):
    root: list[Prompt1Item] | None = Field(
        '<|endoftext|>',
        description='The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.\n\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.\n',
        examples=['[[1212, 318, 257, 1332, 13]]'],
        min_length=1,
    )


class Stop1(RootModel[list[str] | None]):
    root: list[str] | None = Field(
        None,
        description='Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.\n',
        max_length=4,
        min_length=1,
    )


class CreateCompletionRequest(BaseModel):
    best_of: int | None = Field(
        1,
        description='Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.\n\nWhen used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n',
        ge=0,
        le=20,
    )
    echo: bool | None = Field(
        False, description='Echo back the prompt in addition to the completion\n'
    )
    frequency_penalty: float | None = Field(
        0,
        description="Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n\n[See more information about frequency and presence penalties.](/docs/guides/text-generation)\n",
        ge=-2.0,
        le=2.0,
    )
    logit_bias: dict[str, int] | None = Field(
        None,
        description='Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n\nAs an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.\n',
    )
    logprobs: int | None = Field(
        None,
        description='Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.\n\nThe maximum value for `logprobs` is 5.\n',
        ge=0,
        le=5,
    )
    max_tokens: int | None = Field(
        16,
        description="The maximum number of [tokens](/tokenizer) that can be generated in the completion.\n\nThe token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.\n",
        examples=[16],
        ge=0,
    )
    model: str | Model1 = Field(
        ...,
        description='ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n',
    )
    n: int | None = Field(
        1,
        description='How many completions to generate for each prompt.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n',
        examples=[1],
        ge=1,
        le=128,
    )
    presence_penalty: float | None = Field(
        0,
        description="Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n\n[See more information about frequency and presence penalties.](/docs/guides/text-generation)\n",
        ge=-2.0,
        le=2.0,
    )
    prompt: str | list[str] | Prompt | Prompt1 | None = Field(
        ...,
        description='The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.\n\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.\n',
    )
    seed: int | None = Field(
        None,
        description='If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\n\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n',
    )
    stop: str | Stop1 | None = Field(
        None,
        description='Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.\n',
    )
    stream: bool | None = Field(
        False,
        description='Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n',
    )
    stream_options: ChatCompletionStreamOptions | None = None
    suffix: str | None = Field(
        None,
        description='The suffix that comes after a completion of inserted text.\n\nThis parameter is only supported for `gpt-3.5-turbo-instruct`.\n',
        examples=['test.'],
    )
    temperature: float | None = Field(
        1,
        description='What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n',
        examples=[1],
        ge=0.0,
        le=2.0,
    )
    top_p: float | None = Field(
        1,
        description='An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n',
        examples=[1],
        ge=0.0,
        le=1.0,
    )
    user: str | None = Field(
        None,
        description='A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n',
        examples=['user-1234'],
    )


class FinishReason3(Enum):
    """
    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
    `length` if the maximum number of tokens specified in the request was reached,
    or `content_filter` if content was omitted due to a flag from our content filters.

    """

    stop = 'stop'
    length = 'length'
    content_filter = 'content_filter'


class Logprobs2(BaseModel):
    text_offset: list[int] | None = None
    token_logprobs: list[float] | None = None
    tokens: list[str] | None = None
    top_logprobs: list[dict[str, float]] | None = None


class Choice3(BaseModel):
    finish_reason: FinishReason3 = Field(
        ...,
        description='The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\nor `content_filter` if content was omitted due to a flag from our content filters.\n',
    )
    index: int
    logprobs: Logprobs2 | None = Field(...)
    text: str


class Object6(Enum):
    """
    The object type, which is always "text_completion"
    """

    text_completion = 'text_completion'


class CreateCompletionResponse(BaseModel):
    """
    Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).

    """

    choices: list[Choice3] = Field(
        ...,
        description='The list of completion choices the model generated for the input prompt.',
    )
    created: int = Field(
        ...,
        description='The Unix timestamp (in seconds) of when the completion was created.',
    )
    id: str = Field(..., description='A unique identifier for the completion.')
    model: str = Field(..., description='The model used for completion.')
    object: Object6 = Field(
        ..., description='The object type, which is always "text_completion"'
    )
    system_fingerprint: str | None = Field(
        None,
        description='This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n',
    )
    usage: CompletionUsage | None = None


class EncodingFormat(Enum):
    """
    The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
    """

    float = 'float'
    base64 = 'base64'


class Input(RootModel[list[str]]):
    root: list[str] = Field(
        ...,
        description='The array of strings that will be turned into an embedding.',
        examples=['The quick brown fox jumped over the lazy dog'],
        max_length=2048,
        min_length=1,
        title='array',
    )


class Input1(RootModel[list[int]]):
    root: list[int] = Field(
        ...,
        description='The array of integers that will be turned into an embedding.',
        examples=['[1212, 318, 257, 1332, 13]'],
        max_length=2048,
        min_length=1,
        title='array',
    )


class Input2Item(Prompt1Item):
    pass


class Input2(RootModel[list[Input2Item]]):
    root: list[Input2Item] = Field(
        ...,
        description='The array of arrays containing integers that will be turned into an embedding.',
        examples=['[[1212, 318, 257, 1332, 13]]'],
        max_length=2048,
        min_length=1,
        title='array',
    )


class Model2(Enum):
    """
    ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.

    """

    text_embedding_ada_002 = 'text-embedding-ada-002'
    text_embedding_3_small = 'text-embedding-3-small'
    text_embedding_3_large = 'text-embedding-3-large'


class CreateEmbeddingRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dimensions: int | None = Field(
        None,
        description='The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.\n',
        ge=1,
    )
    encoding_format: EncodingFormat = Field(
        'float',
        description='The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).',
        examples=['float'],
    )
    input: str | Input | Input1 | Input2 = Field(
        ...,
        description='Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. Some models may also impose a limit on total number of tokens summed across inputs.\n',
        examples=['The quick brown fox jumped over the lazy dog'],
    )
    model: str | Model2 = Field(
        ...,
        description='ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n',
        examples=['text-embedding-3-small'],
    )
    user: str | None = Field(
        None,
        description='A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n',
        examples=['user-1234'],
    )


class Object7(Enum):
    """
    The object type, which is always "list".
    """

    list = 'list'


class Usage1(BaseModel):
    """
    The usage information for the request.
    """

    prompt_tokens: int = Field(
        ..., description='The number of tokens used by the prompt.'
    )
    total_tokens: int = Field(
        ..., description='The total number of tokens used by the request.'
    )


class Purpose(Enum):
    """
    The intended purpose of the uploaded file.

    Use "assistants" for [Assistants](/docs/api-reference/assistants) and [Message](/docs/api-reference/messages) files, "vision" for Assistants image file inputs, "batch" for [Batch API](/docs/guides/batch), and "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning).

    """

    assistants = 'assistants'
    batch = 'batch'
    fine_tune = 'fine-tune'
    vision = 'vision'


class CreateFileRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    file: bytes = Field(
        ..., description='The File object (not file name) to be uploaded.\n'
    )
    purpose: Purpose = Field(
        ...,
        description='The intended purpose of the uploaded file.\n\nUse "assistants" for [Assistants](/docs/api-reference/assistants) and [Message](/docs/api-reference/messages) files, "vision" for Assistants image file inputs, "batch" for [Batch API](/docs/guides/batch), and "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning).\n',
    )


class Type20(Enum):
    """
    The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.

    """

    wandb = 'wandb'


class Wandb(BaseModel):
    """
    The settings for your integration with Weights and Biases. This payload specifies the project that
    metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
    to your run, and set a default entity (team, username, etc) to be associated with your run.

    """

    entity: str | None = Field(
        None,
        description='The entity to use for the run. This allows you to set the team or username of the WandB user that you would\nlike associated with the run. If not set, the default entity for the registered WandB API key is used.\n',
    )
    name: str | None = Field(
        None,
        description='A display name to set for the run. If not set, we will use the Job ID as the name.\n',
    )
    project: str = Field(
        ...,
        description='The name of the project that the new run will be created under.\n',
        examples=['my-wandb-project'],
    )
    tags: list[str] | None = Field(
        None,
        description='A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some\ndefault tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".\n',
    )


class Integration(BaseModel):
    type: Type20 = Field(
        ...,
        description='The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.\n',
    )
    wandb: Wandb = Field(
        ...,
        description='The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run.\n',
    )


class Model3(Enum):
    """
    The name of the model to fine-tune. You can select one of the
    [supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).

    """

    babbage_002 = 'babbage-002'
    davinci_002 = 'davinci-002'
    gpt_3_5_turbo = 'gpt-3.5-turbo'
    gpt_4o_mini = 'gpt-4o-mini'


class Model4(Enum):
    """
    The model to use for image generation. Only `dall-e-2` is supported at this time.
    """

    dall_e_2 = 'dall-e-2'


class ResponseFormat(Enum):
    """
    The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
    """

    url = 'url'
    b64_json = 'b64_json'


class Size(Enum):
    """
    The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
    """

    field_256x256 = '256x256'
    field_512x512 = '512x512'
    field_1024x1024 = '1024x1024'


class CreateImageEditRequest(BaseModel):
    image: bytes = Field(
        ...,
        description='The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.',
    )
    mask: bytes | None = Field(
        None,
        description='An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.',
    )
    model: str | Model4 | None = Field(
        'dall-e-2',
        description='The model to use for image generation. Only `dall-e-2` is supported at this time.',
        examples=['dall-e-2'],
    )
    n: int | None = Field(
        1,
        description='The number of images to generate. Must be between 1 and 10.',
        examples=[1],
        ge=1,
        le=10,
    )
    prompt: str = Field(
        ...,
        description='A text description of the desired image(s). The maximum length is 1000 characters.',
        examples=['A cute baby sea otter wearing a beret'],
    )
    response_format: ResponseFormat | None = Field(
        'url',
        description='The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.',
        examples=['url'],
    )
    size: Size | None = Field(
        '1024x1024',
        description='The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.',
        examples=['1024x1024'],
    )
    user: str | None = Field(
        None,
        description='A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n',
        examples=['user-1234'],
    )


class Model5(Enum):
    """
    The model to use for image generation.
    """

    dall_e_2 = 'dall-e-2'
    dall_e_3 = 'dall-e-3'


class Quality(Enum):
    """
    The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
    """

    standard = 'standard'
    hd = 'hd'


class Size1(Enum):
    """
    The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
    """

    field_256x256 = '256x256'
    field_512x512 = '512x512'
    field_1024x1024 = '1024x1024'
    field_1792x1024 = '1792x1024'
    field_1024x1792 = '1024x1792'


class Style(Enum):
    """
    The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
    """

    vivid = 'vivid'
    natural = 'natural'


class CreateImageRequest(BaseModel):
    model: str | Model5 | None = Field(
        'dall-e-2',
        description='The model to use for image generation.',
        examples=['dall-e-3'],
    )
    n: int | None = Field(
        1,
        description='The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.',
        examples=[1],
        ge=1,
        le=10,
    )
    prompt: str = Field(
        ...,
        description='A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.',
        examples=['A cute baby sea otter'],
    )
    quality: Quality = Field(
        'standard',
        description='The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.',
        examples=['standard'],
    )
    response_format: ResponseFormat | None = Field(
        'url',
        description='The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.',
        examples=['url'],
    )
    size: Size1 | None = Field(
        '1024x1024',
        description='The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.',
        examples=['1024x1024'],
    )
    style: Style | None = Field(
        'vivid',
        description='The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.',
        examples=['vivid'],
    )
    user: str | None = Field(
        None,
        description='A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n',
        examples=['user-1234'],
    )


class CreateImageVariationRequest(BaseModel):
    image: bytes = Field(
        ...,
        description='The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.',
    )
    model: str | Model4 | None = Field(
        'dall-e-2',
        description='The model to use for image generation. Only `dall-e-2` is supported at this time.',
        examples=['dall-e-2'],
    )
    n: int | None = Field(
        1,
        description='The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.',
        examples=[1],
        ge=1,
        le=10,
    )
    response_format: ResponseFormat | None = Field(
        'url',
        description='The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.',
        examples=['url'],
    )
    size: Size | None = Field(
        '1024x1024',
        description='The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.',
        examples=['1024x1024'],
    )
    user: str | None = Field(
        None,
        description='A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n',
        examples=['user-1234'],
    )


class Attachment(BaseModel):
    file_id: str | None = Field(
        None, description='The ID of the file to attach to the message.'
    )
    tools: list[AssistantToolsCode | AssistantToolsFileSearchTypeOnly] | None = Field(
        None, description='The tools to add this file to.'
    )


class Role7(Enum):
    """
    The role of the entity that is creating the message. Allowed values include:
    - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
    - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.

    """

    user = 'user'
    assistant = 'assistant'


class ImageUrl1(BaseModel):
    """
    Contains either an image URL or a data URL for a base64 encoded image.
    """

    url: AnyUrl = Field(
        ...,
        description='Either a URL of the image or the base64 encoded image data.',
        examples=['https://example.com/image.jpg'],
    )


class Type21(Enum):
    """
    Always `image_url`.
    """

    image_url = 'image_url'


class Input3(BaseModel):
    """
    An object describing an image to classify.
    """

    image_url: ImageUrl1 = Field(
        ...,
        description='Contains either an image URL or a data URL for a base64 encoded image.',
    )
    type: Type21 = Field(..., description='Always `image_url`.')


class Type22(Enum):
    """
    Always `text`.
    """

    text = 'text'


class Input4(BaseModel):
    """
    An object describing text to classify.
    """

    text: str = Field(
        ...,
        description='A string of text to classify.',
        examples=['I want to kill them'],
    )
    type: Type22 = Field(..., description='Always `text`.')


class Model7(Enum):
    """
    The content moderation model you would like to use. Learn more in
    [the moderation guide](/docs/guides/moderation), and learn about
    available models [here](/docs/models#moderation).

    """

    omni_moderation_latest = 'omni-moderation-latest'
    omni_moderation_2024_09_26 = 'omni-moderation-2024-09-26'
    text_moderation_latest = 'text-moderation-latest'
    text_moderation_stable = 'text-moderation-stable'


class CreateModerationRequest(BaseModel):
    input: str | list[str] | list[Input3 | Input4] = Field(
        ...,
        description='Input (or inputs) to classify. Can be a single string, an array of strings, or\nan array of multi-modal input objects similar to other models.\n',
    )
    model: str | Model7 = Field(
        'omni-moderation-latest',
        description='The content moderation model you would like to use. Learn more in\n[the moderation guide](/docs/guides/moderation), and learn about\navailable models [here](/docs/models#moderation).\n',
        examples=['omni-moderation-2024-09-26'],
    )


class Categories(BaseModel):
    """
    A list of the categories, and whether they are flagged or not.
    """

    harassment: bool = Field(
        ...,
        description='Content that expresses, incites, or promotes harassing language towards any target.',
    )
    harassment_threatening: bool = Field(
        ...,
        alias='harassment/threatening',
        description='Harassment content that also includes violence or serious harm towards any target.',
    )
    hate: bool = Field(
        ...,
        description='Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.',
    )
    hate_threatening: bool = Field(
        ...,
        alias='hate/threatening',
        description='Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.',
    )
    illicit: bool | None = Field(
        ...,
        description='Content that includes instructions or advice that facilitate the planning or execution of wrongdoing, or that gives advice or instruction on how to commit illicit acts. For example, "how to shoplift" would fit this category.',
    )
    illicit_violent: bool | None = Field(
        ...,
        alias='illicit/violent',
        description='Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also includes violence, or that gives advice or instruction on the procurement of any weapon.',
    )
    self_harm: bool = Field(
        ...,
        alias='self-harm',
        description='Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.',
    )
    self_harm_instructions: bool = Field(
        ...,
        alias='self-harm/instructions',
        description='Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.',
    )
    self_harm_intent: bool = Field(
        ...,
        alias='self-harm/intent',
        description='Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.',
    )
    sexual: bool = Field(
        ...,
        description='Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).',
    )
    sexual_minors: bool = Field(
        ...,
        alias='sexual/minors',
        description='Sexual content that includes an individual who is under 18 years old.',
    )
    violence: bool = Field(
        ..., description='Content that depicts death, violence, or physical injury.'
    )
    violence_graphic: bool = Field(
        ...,
        alias='violence/graphic',
        description='Content that depicts death, violence, or physical injury in graphic detail.',
    )


class HarassmentEnum(Enum):
    text = 'text'


class SelfHarmEnum(Enum):
    text = 'text'
    image = 'image'


class CategoryAppliedInputTypes(BaseModel):
    """
    A list of the categories along with the input type(s) that the score applies to.
    """

    harassment: list[HarassmentEnum] = Field(
        ..., description="The applied input type(s) for the category 'harassment'."
    )
    harassment_threatening: list[HarassmentEnum] = Field(
        ...,
        alias='harassment/threatening',
        description="The applied input type(s) for the category 'harassment/threatening'.",
    )
    hate: list[HarassmentEnum] = Field(
        ..., description="The applied input type(s) for the category 'hate'."
    )
    hate_threatening: list[HarassmentEnum] = Field(
        ...,
        alias='hate/threatening',
        description="The applied input type(s) for the category 'hate/threatening'.",
    )
    illicit: list[HarassmentEnum] = Field(
        ..., description="The applied input type(s) for the category 'illicit'."
    )
    illicit_violent: list[HarassmentEnum] = Field(
        ...,
        alias='illicit/violent',
        description="The applied input type(s) for the category 'illicit/violent'.",
    )
    self_harm: list[SelfHarmEnum] = Field(
        ...,
        alias='self-harm',
        description="The applied input type(s) for the category 'self-harm'.",
    )
    self_harm_instructions: list[SelfHarmEnum] = Field(
        ...,
        alias='self-harm/instructions',
        description="The applied input type(s) for the category 'self-harm/instructions'.",
    )
    self_harm_intent: list[SelfHarmEnum] = Field(
        ...,
        alias='self-harm/intent',
        description="The applied input type(s) for the category 'self-harm/intent'.",
    )
    sexual: list[SelfHarmEnum] = Field(
        ..., description="The applied input type(s) for the category 'sexual'."
    )
    sexual_minors: list[HarassmentEnum] = Field(
        ...,
        alias='sexual/minors',
        description="The applied input type(s) for the category 'sexual/minors'.",
    )
    violence: list[SelfHarmEnum] = Field(
        ..., description="The applied input type(s) for the category 'violence'."
    )
    violence_graphic: list[SelfHarmEnum] = Field(
        ...,
        alias='violence/graphic',
        description="The applied input type(s) for the category 'violence/graphic'.",
    )


class CategoryScores(BaseModel):
    """
    A list of the categories along with their scores as predicted by model.
    """

    harassment: float = Field(
        ..., description="The score for the category 'harassment'."
    )
    harassment_threatening: float = Field(
        ...,
        alias='harassment/threatening',
        description="The score for the category 'harassment/threatening'.",
    )
    hate: float = Field(..., description="The score for the category 'hate'.")
    hate_threatening: float = Field(
        ...,
        alias='hate/threatening',
        description="The score for the category 'hate/threatening'.",
    )
    illicit: float = Field(..., description="The score for the category 'illicit'.")
    illicit_violent: float = Field(
        ...,
        alias='illicit/violent',
        description="The score for the category 'illicit/violent'.",
    )
    self_harm: float = Field(
        ..., alias='self-harm', description="The score for the category 'self-harm'."
    )
    self_harm_instructions: float = Field(
        ...,
        alias='self-harm/instructions',
        description="The score for the category 'self-harm/instructions'.",
    )
    self_harm_intent: float = Field(
        ...,
        alias='self-harm/intent',
        description="The score for the category 'self-harm/intent'.",
    )
    sexual: float = Field(..., description="The score for the category 'sexual'.")
    sexual_minors: float = Field(
        ...,
        alias='sexual/minors',
        description="The score for the category 'sexual/minors'.",
    )
    violence: float = Field(..., description="The score for the category 'violence'.")
    violence_graphic: float = Field(
        ...,
        alias='violence/graphic',
        description="The score for the category 'violence/graphic'.",
    )


class Result(BaseModel):
    categories: Categories = Field(
        ...,
        description='A list of the categories, and whether they are flagged or not.',
    )
    category_applied_input_types: CategoryAppliedInputTypes = Field(
        ...,
        description='A list of the categories along with the input type(s) that the score applies to.',
    )
    category_scores: CategoryScores = Field(
        ...,
        description='A list of the categories along with their scores as predicted by model.',
    )
    flagged: bool = Field(
        ..., description='Whether any of the below categories are flagged.'
    )


class CreateModerationResponse(BaseModel):
    """
    Represents if a given text input is potentially harmful.
    """

    id: str = Field(
        ..., description='The unique identifier for the moderation request.'
    )
    model: str = Field(
        ..., description='The model used to generate the moderation results.'
    )
    results: list[Result] = Field(..., description='A list of moderation objects.')


class Model8(Enum):
    """
    One of the available [TTS models](/docs/models#tts): `tts-1` or `tts-1-hd`

    """

    tts_1 = 'tts-1'
    tts_1_hd = 'tts-1-hd'


class ResponseFormat3(Enum):
    """
    The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
    """

    mp3 = 'mp3'
    opus = 'opus'
    aac = 'aac'
    flac = 'flac'
    wav = 'wav'
    pcm = 'pcm'


class Voice1(Enum):
    """
    The voice to use when generating the audio. Supported voices are `alloy`, `ash`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage` and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech#voice-options).
    """

    alloy = 'alloy'
    ash = 'ash'
    coral = 'coral'
    echo = 'echo'
    fable = 'fable'
    onyx = 'onyx'
    nova = 'nova'
    sage = 'sage'
    shimmer = 'shimmer'


class CreateSpeechRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    input: str = Field(
        ...,
        description='The text to generate audio for. The maximum length is 4096 characters.',
        max_length=4096,
    )
    model: str | Model8 = Field(
        ...,
        description='One of the available [TTS models](/docs/models#tts): `tts-1` or `tts-1-hd`\n',
    )
    response_format: ResponseFormat3 = Field(
        'mp3',
        description='The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.',
    )
    speed: float = Field(
        1,
        description='The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.',
        ge=0.25,
        le=4.0,
    )
    voice: Voice1 = Field(
        ...,
        description='The voice to use when generating the audio. Supported voices are `alloy`, `ash`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage` and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech#voice-options).',
    )


class Model9(Enum):
    """
    The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
    """

    gpt_4o = 'gpt-4o'
    gpt_4o_2024_11_20 = 'gpt-4o-2024-11-20'
    gpt_4o_2024_08_06 = 'gpt-4o-2024-08-06'
    gpt_4o_2024_05_13 = 'gpt-4o-2024-05-13'
    gpt_4o_mini = 'gpt-4o-mini'
    gpt_4o_mini_2024_07_18 = 'gpt-4o-mini-2024-07-18'
    gpt_4_turbo = 'gpt-4-turbo'
    gpt_4_turbo_2024_04_09 = 'gpt-4-turbo-2024-04-09'
    gpt_4_0125_preview = 'gpt-4-0125-preview'
    gpt_4_turbo_preview = 'gpt-4-turbo-preview'
    gpt_4_1106_preview = 'gpt-4-1106-preview'
    gpt_4_vision_preview = 'gpt-4-vision-preview'
    gpt_4 = 'gpt-4'
    gpt_4_0314 = 'gpt-4-0314'
    gpt_4_0613 = 'gpt-4-0613'
    gpt_4_32k = 'gpt-4-32k'
    gpt_4_32k_0314 = 'gpt-4-32k-0314'
    gpt_4_32k_0613 = 'gpt-4-32k-0613'
    gpt_3_5_turbo = 'gpt-3.5-turbo'
    gpt_3_5_turbo_16k = 'gpt-3.5-turbo-16k'
    gpt_3_5_turbo_0613 = 'gpt-3.5-turbo-0613'
    gpt_3_5_turbo_1106 = 'gpt-3.5-turbo-1106'
    gpt_3_5_turbo_0125 = 'gpt-3.5-turbo-0125'
    gpt_3_5_turbo_16k_0613 = 'gpt-3.5-turbo-16k-0613'


class ToolResources2(BaseModel):
    """
    A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """

    code_interpreter: CodeInterpreter1 | None = None
    file_search: FileSearch | None = None


class ChunkingStrategy4(AutoChunkingStrategyRequestParam):
    """
    The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
    """


class ChunkingStrategy5(ChunkingStrategy1):
    """
    The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
    """


class ChunkingStrategy6(AutoChunkingStrategyRequestParam):
    """
    The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
    """


class ChunkingStrategy7(ChunkingStrategy1):
    """
    The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
    """


class Model10(Enum):
    """
    ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.

    """

    whisper_1 = 'whisper-1'


class TimestampGranularity(Enum):
    word = 'word'
    segment = 'segment'


class CreateTranscriptionRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    file: bytes = Field(
        ...,
        description='The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n',
    )
    language: str | None = Field(
        None,
        description='The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format will improve accuracy and latency.\n',
    )
    model: str | Model10 = Field(
        ...,
        description='ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.\n',
        examples=['whisper-1'],
    )
    prompt: str | None = Field(
        None,
        description="An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should match the audio language.\n",
    )
    response_format: AudioResponseFormat | None = 'json'
    temperature: float = Field(
        0,
        description='The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n',
    )
    timestamp_granularities__: list[TimestampGranularity] = Field(
        ['segment'],
        alias='timestamp_granularities[]',
        description='The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.\n',
    )


class CreateTranscriptionResponseJson(BaseModel):
    """
    Represents a transcription response returned by model, based on the provided input.
    """

    text: str = Field(..., description='The transcribed text.')


class CreateTranslationRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    file: bytes = Field(
        ...,
        description='The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n',
    )
    model: str | Model10 = Field(
        ...,
        description='ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.\n',
        examples=['whisper-1'],
    )
    prompt: str | None = Field(
        None,
        description="An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should be in English.\n",
    )
    response_format: AudioResponseFormat | None = 'json'
    temperature: float = Field(
        0,
        description='The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n',
    )


class CreateTranslationResponseJson(BaseModel):
    text: str


class Purpose1(Enum):
    """
    The intended purpose of the uploaded file.

    See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).

    """

    assistants = 'assistants'
    batch = 'batch'
    fine_tune = 'fine-tune'
    vision = 'vision'


class CreateUploadRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bytes: int = Field(
        ..., description='The number of bytes in the file you are uploading.\n'
    )
    filename: str = Field(..., description='The name of the file to upload.\n')
    mime_type: str = Field(
        ...,
        description='The MIME type of the file.\n\nThis must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.\n',
    )
    purpose: Purpose1 = Field(
        ...,
        description='The intended purpose of the uploaded file.\n\nSee the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).\n',
    )


class DefaultProjectErrorResponse(BaseModel):
    code: int
    message: str


class Object8(Enum):
    assistant_deleted = 'assistant.deleted'


class DeleteAssistantResponse(BaseModel):
    deleted: bool
    id: str
    object: Object8


class Object9(Enum):
    file = 'file'


class DeleteFileResponse(BaseModel):
    deleted: bool
    id: str
    object: Object9


class Object10(Enum):
    thread_message_deleted = 'thread.message.deleted'


class DeleteMessageResponse(BaseModel):
    deleted: bool
    id: str
    object: Object10


class DeleteModelResponse(BaseModel):
    deleted: bool
    id: str
    object: str


class Object11(Enum):
    thread_deleted = 'thread.deleted'


class DeleteThreadResponse(BaseModel):
    deleted: bool
    id: str
    object: Object11


class Object12(Enum):
    vector_store_file_deleted = 'vector_store.file.deleted'


class DeleteVectorStoreFileResponse(BaseModel):
    deleted: bool
    id: str
    object: Object12


class Object13(Enum):
    vector_store_deleted = 'vector_store.deleted'


class DeleteVectorStoreResponse(BaseModel):
    deleted: bool
    id: str
    object: Object13


class Data5(Enum):
    field_DONE_ = '[DONE]'


class Event(Enum):
    done = 'done'


class DoneEvent(BaseModel):
    """
    Occurs when a stream ends.
    """

    data: Data5
    event: Event


class Object14(Enum):
    """
    The object type, which is always "embedding".
    """

    embedding = 'embedding'


class Embedding(BaseModel):
    """
    Represents an embedding vector returned by embedding endpoint.

    """

    embedding: list[float] = Field(
        ...,
        description='The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).\n',
    )
    index: int = Field(
        ..., description='The index of the embedding in the list of embeddings.'
    )
    object: Object14 = Field(
        ..., description='The object type, which is always "embedding".'
    )


class Error1(BaseModel):
    code: str | None = Field(...)
    message: str
    param: str | None = Field(...)
    type: str


class Event1(Enum):
    error = 'error'


class ErrorEvent(BaseModel):
    """
    Occurs when an [error](/docs/guides/error-codes#api-errors) occurs. This can happen due to an internal server error or a timeout.
    """

    data: Error1
    event: Event1


class ErrorResponse(BaseModel):
    error: Error1


class Ranker(Enum):
    """
    The ranker to use for the file search. If not specified will use the `auto` ranker.
    """

    auto = 'auto'
    default_2024_08_21 = 'default_2024_08_21'


class FileSearchRankingOptions(BaseModel):
    """
    The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.

    See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.

    """

    ranker: Ranker | None = Field(
        None,
        description='The ranker to use for the file search. If not specified will use the `auto` ranker.',
    )
    score_threshold: float = Field(
        ...,
        description='The score threshold for the file search. All values must be a floating point number between 0 and 1.',
        ge=0.0,
        le=1.0,
    )


class Weight(Enum):
    """
    Controls whether the assistant message is trained against (0 or 1)
    """

    integer_0 = 0
    integer_1 = 1


class FineTuneCompletionRequestInput(BaseModel):
    """
    The per-line training example of a fine-tuning input file for completions models
    """

    completion: str | None = Field(
        None, description='The desired completion for this training example.'
    )
    prompt: str | None = Field(
        None, description='The input prompt for this training example.'
    )


class BatchSize(Enum):
    """
    Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.

    """

    auto = 'auto'


class BatchSize1(RootModel[int]):
    root: int = Field(
        ...,
        description='Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n',
        ge=1,
        le=256,
    )


class Beta(Enum):
    """
    The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.

    """

    auto = 'auto'


class Beta1(RootModel[float]):
    root: float = Field(
        ...,
        description='The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.\n',
        gt=0.0,
        le=2.0,
    )


class LearningRateMultiplier(Enum):
    """
    Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.

    """

    auto = 'auto'


class LearningRateMultiplier1(RootModel[float]):
    root: float = Field(
        ...,
        description='Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n',
        gt=0.0,
    )


class NEpochs(Enum):
    """
    The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.

    """

    auto = 'auto'


class NEpochs1(RootModel[int]):
    root: int = Field(
        ...,
        description='The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n',
        ge=1,
        le=50,
    )


class Hyperparameters(BaseModel):
    """
    The hyperparameters used for the fine-tuning job.
    """

    batch_size: BatchSize | BatchSize1 = Field(
        'auto',
        description='Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n',
    )
    beta: Beta | Beta1 = Field(
        'auto',
        description='The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.\n',
    )
    learning_rate_multiplier: LearningRateMultiplier | LearningRateMultiplier1 = Field(
        'auto',
        description='Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n',
    )
    n_epochs: NEpochs | NEpochs1 = Field(
        'auto',
        description='The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n',
    )


class FineTuneDPOMethod(BaseModel):
    """
    Configuration for the DPO fine-tuning method.
    """

    hyperparameters: Hyperparameters | None = Field(
        None, description='The hyperparameters used for the fine-tuning job.'
    )


class Type27(Enum):
    """
    The type of method. Is either `supervised` or `dpo`.
    """

    supervised = 'supervised'
    dpo = 'dpo'


class BatchSize3(BatchSize1):
    pass


class LearningRateMultiplier3(LearningRateMultiplier1):
    pass


class NEpochs3(NEpochs1):
    pass


class Hyperparameters1(BaseModel):
    """
    The hyperparameters used for the fine-tuning job.
    """

    batch_size: BatchSize | BatchSize3 = Field(
        'auto',
        description='Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n',
    )
    learning_rate_multiplier: LearningRateMultiplier | LearningRateMultiplier3 = Field(
        'auto',
        description='Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n',
    )
    n_epochs: NEpochs | NEpochs3 = Field(
        'auto',
        description='The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n',
    )


class FineTuneSupervisedMethod(BaseModel):
    """
    Configuration for the supervised fine-tuning method.
    """

    hyperparameters: Hyperparameters1 | None = Field(
        None, description='The hyperparameters used for the fine-tuning job.'
    )


class Type28(Enum):
    """
    The type of the integration being enabled for the fine-tuning job
    """

    wandb = 'wandb'


class FineTuningIntegration(BaseModel):
    type: Type28 = Field(
        ...,
        description='The type of the integration being enabled for the fine-tuning job',
    )
    wandb: Wandb = Field(
        ...,
        description='The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run.\n',
    )


class Error2(BaseModel):
    """
    For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
    """

    code: str = Field(..., description='A machine-readable error code.')
    message: str = Field(..., description='A human-readable error message.')
    param: str | None = Field(
        ...,
        description='The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.',
    )


class BatchSize4(Enum):
    """
    Number of examples in each batch. A larger batch size means that model parameters
    are updated less frequently, but with lower variance.

    """

    auto = 'auto'


class BatchSize5(RootModel[int]):
    root: int = Field(
        ...,
        description='Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.\n',
        ge=1,
        le=256,
    )


class LearningRateMultiplier4(Enum):
    """
    Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
    overfitting.

    """

    auto = 'auto'


class LearningRateMultiplier5(RootModel[float]):
    root: float = Field(
        ...,
        description='Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.\n',
        gt=0.0,
    )


class NEpochs4(Enum):
    """
    The number of epochs to train the model for. An epoch refers to one full cycle
    through the training dataset.

    """

    auto = 'auto'


class NEpochs5(RootModel[int]):
    root: int = Field(
        ...,
        description='The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.\n',
        ge=1,
        le=50,
    )


class Hyperparameters2(BaseModel):
    """
    The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.
    """

    batch_size: BatchSize4 | BatchSize5 = Field(
        'auto',
        description='Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.\n',
    )
    learning_rate_multiplier: LearningRateMultiplier4 | LearningRateMultiplier5 = Field(
        'auto',
        description='Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.\n',
    )
    n_epochs: NEpochs4 | NEpochs5 = Field(
        'auto',
        description='The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.\n',
    )


class Object15(Enum):
    """
    The object type, which is always "fine_tuning.job".
    """

    fine_tuning_job = 'fine_tuning.job'


class Status1(Enum):
    """
    The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
    """

    validating_files = 'validating_files'
    queued = 'queued'
    running = 'running'
    succeeded = 'succeeded'
    failed = 'failed'
    cancelled = 'cancelled'


class Metrics(BaseModel):
    """
    Metrics at the step number during the fine-tuning job.
    """

    full_valid_loss: float | None = None
    full_valid_mean_token_accuracy: float | None = None
    step: float | None = None
    train_loss: float | None = None
    train_mean_token_accuracy: float | None = None
    valid_loss: float | None = None
    valid_mean_token_accuracy: float | None = None


class Object16(Enum):
    """
    The object type, which is always "fine_tuning.job.checkpoint".
    """

    fine_tuning_job_checkpoint = 'fine_tuning.job.checkpoint'


class FineTuningJobCheckpoint(BaseModel):
    """
    The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use.

    """

    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the checkpoint was created.',
    )
    fine_tuned_model_checkpoint: str = Field(
        ..., description='The name of the fine-tuned checkpoint model that is created.'
    )
    fine_tuning_job_id: str = Field(
        ...,
        description='The name of the fine-tuning job that this checkpoint was created from.',
    )
    id: str = Field(
        ...,
        description='The checkpoint identifier, which can be referenced in the API endpoints.',
    )
    metrics: Metrics = Field(
        ..., description='Metrics at the step number during the fine-tuning job.'
    )
    object: Object16 = Field(
        ...,
        description='The object type, which is always "fine_tuning.job.checkpoint".',
    )
    step_number: int = Field(
        ..., description='The step number that the checkpoint was created at.'
    )


class Level(Enum):
    """
    The log level of the event.
    """

    info = 'info'
    warn = 'warn'
    error = 'error'


class Object17(Enum):
    """
    The object type, which is always "fine_tuning.job.event".
    """

    fine_tuning_job_event = 'fine_tuning.job.event'


class Type29(Enum):
    """
    The type of event.
    """

    message = 'message'
    metrics = 'metrics'


class FineTuningJobEvent(BaseModel):
    """
    Fine-tuning job event object
    """

    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the fine-tuning job was created.',
    )
    data: dict[str, Any] | None = Field(
        None, description='The data associated with the event.'
    )
    id: str = Field(..., description='The object identifier.')
    level: Level = Field(..., description='The log level of the event.')
    message: str = Field(..., description='The message of the event.')
    object: Object17 = Field(
        ..., description='The object type, which is always "fine_tuning.job.event".'
    )
    type: Type29 | None = Field(None, description='The type of event.')


class FunctionParameters(BaseModel):
    """
    The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.

    Omitting `parameters` defines a function with an empty parameter list.
    """

    model_config = ConfigDict(
        extra='allow',
    )


class Image(BaseModel):
    """
    Represents the url or the content of an image generated by the OpenAI API.
    """

    b64_json: str | None = Field(
        None,
        description='The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.',
    )
    revised_prompt: str | None = Field(
        None,
        description='The prompt that was used to generate the image, if there was any revision to the prompt.',
    )
    url: str | None = Field(
        None,
        description='The URL of the generated image, if `response_format` is `url` (default).',
    )


class ImagesResponse(BaseModel):
    created: int
    data: list[Image]


class Object18(Enum):
    """
    The object type, which is always `organization.invite`
    """

    organization_invite = 'organization.invite'


class Role8(Enum):
    """
    Project membership role
    """

    member = 'member'
    owner = 'owner'


class Project1(BaseModel):
    id: str | None = Field(None, description="Project's public ID")
    role: Role8 | None = Field(None, description='Project membership role')


class Role9(Enum):
    """
    `owner` or `reader`
    """

    owner = 'owner'
    reader = 'reader'


class Status2(Enum):
    """
    `accepted`,`expired`, or `pending`
    """

    accepted = 'accepted'
    expired = 'expired'
    pending = 'pending'


class Invite(BaseModel):
    """
    Represents an individual `invite` to the organization.
    """

    accepted_at: int | None = Field(
        None,
        description='The Unix timestamp (in seconds) of when the invite was accepted.',
    )
    email: str = Field(
        ...,
        description='The email address of the individual to whom the invite was sent',
    )
    expires_at: int = Field(
        ..., description='The Unix timestamp (in seconds) of when the invite expires.'
    )
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints'
    )
    invited_at: int = Field(
        ..., description='The Unix timestamp (in seconds) of when the invite was sent.'
    )
    object: Object18 = Field(
        ..., description='The object type, which is always `organization.invite`'
    )
    projects: list[Project1] | None = Field(
        None,
        description='The projects that were granted membership upon acceptance of the invite.',
    )
    role: Role9 = Field(..., description='`owner` or `reader`')
    status: Status2 = Field(..., description='`accepted`,`expired`, or `pending`')


class Object19(Enum):
    """
    The object type, which is always `organization.invite.deleted`
    """

    organization_invite_deleted = 'organization.invite.deleted'


class InviteDeleteResponse(BaseModel):
    deleted: bool
    id: str
    object: Object19 = Field(
        ...,
        description='The object type, which is always `organization.invite.deleted`',
    )


class Object20(Enum):
    """
    The object type, which is always `list`
    """

    list = 'list'


class InviteListResponse(BaseModel):
    data: list[Invite]
    first_id: str | None = Field(
        None, description='The first `invite_id` in the retrieved `list`'
    )
    has_more: bool | None = Field(
        None,
        description='The `has_more` property is used for pagination to indicate there are additional results.',
    )
    last_id: str | None = Field(
        None, description='The last `invite_id` in the retrieved `list`'
    )
    object: Object20 = Field(..., description='The object type, which is always `list`')


class Project2(BaseModel):
    id: str = Field(..., description="Project's public ID")
    role: Role8 = Field(..., description='Project membership role')


class Role11(Enum):
    """
    `owner` or `reader`
    """

    reader = 'reader'
    owner = 'owner'


class InviteRequest(BaseModel):
    email: str = Field(..., description='Send an email to this address')
    projects: list[Project2] | None = Field(
        None,
        description='An array of projects to which membership is granted at the same time the org invite is accepted. If omitted, the user will be invited to the default project for compatibility with legacy behavior.',
    )
    role: Role11 = Field(..., description='`owner` or `reader`')


class Object21(Enum):
    list = 'list'


class ListFineTuningJobCheckpointsResponse(BaseModel):
    data: list[FineTuningJobCheckpoint]
    first_id: str | None = None
    has_more: bool
    last_id: str | None = None
    object: Object21


class ListFineTuningJobEventsResponse(BaseModel):
    data: list[FineTuningJobEvent]
    has_more: bool
    object: Object21


class Detail1(Enum):
    """
    Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
    """

    auto = 'auto'
    low = 'low'
    high = 'high'


class ImageFile(BaseModel):
    detail: Detail1 = Field(
        'auto',
        description='Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.',
    )
    file_id: str = Field(
        ...,
        description='The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.',
    )


class Type30(Enum):
    """
    Always `image_file`.
    """

    image_file = 'image_file'


class MessageContentImageFileObject(BaseModel):
    """
    References an image [File](/docs/api-reference/files) in the content of a message.
    """

    image_file: ImageFile
    type: Type30 = Field(..., description='Always `image_file`.')


class Detail2(Enum):
    """
    Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`
    """

    auto = 'auto'
    low = 'low'
    high = 'high'


class ImageUrl2(BaseModel):
    detail: Detail2 = Field(
        'auto',
        description='Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`',
    )
    url: AnyUrl = Field(
        ...,
        description='The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.',
    )


class MessageContentImageUrlObject(BaseModel):
    """
    References an image URL in the content of a message.
    """

    image_url: ImageUrl2
    type: Type12 = Field(..., description='The type of the content part.')


class Type32(Enum):
    """
    Always `refusal`.
    """

    refusal = 'refusal'


class MessageContentRefusalObject(BaseModel):
    """
    The refusal content generated by the assistant.
    """

    refusal: str
    type: Type32 = Field(..., description='Always `refusal`.')


class FileCitation(BaseModel):
    file_id: str = Field(
        ..., description='The ID of the specific File the citation is from.'
    )


class Type33(Enum):
    """
    Always `file_citation`.
    """

    file_citation = 'file_citation'


class MessageContentTextAnnotationsFileCitationObject(BaseModel):
    """
    A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
    """

    end_index: int = Field(..., ge=0)
    file_citation: FileCitation
    start_index: int = Field(..., ge=0)
    text: str = Field(
        ..., description='The text in the message content that needs to be replaced.'
    )
    type: Type33 = Field(..., description='Always `file_citation`.')


class FilePath(BaseModel):
    file_id: str = Field(..., description='The ID of the file that was generated.')


class Type34(Enum):
    """
    Always `file_path`.
    """

    file_path = 'file_path'


class MessageContentTextAnnotationsFilePathObject(BaseModel):
    """
    A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
    """

    end_index: int = Field(..., ge=0)
    file_path: FilePath
    start_index: int = Field(..., ge=0)
    text: str = Field(
        ..., description='The text in the message content that needs to be replaced.'
    )
    type: Type34 = Field(..., description='Always `file_path`.')


class Text(BaseModel):
    annotations: list[
        MessageContentTextAnnotationsFileCitationObject
        | MessageContentTextAnnotationsFilePathObject
    ]
    value: str = Field(..., description='The data that makes up the text.')


class MessageContentTextObject(BaseModel):
    """
    The text content that is part of a message.
    """

    text: Text
    type: Type22 = Field(..., description='Always `text`.')


class ImageFile1(BaseModel):
    detail: Detail1 = Field(
        'auto',
        description='Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.',
    )
    file_id: str | None = Field(
        None,
        description='The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.',
    )


class MessageDeltaContentImageFileObject(BaseModel):
    """
    References an image [File](/docs/api-reference/files) in the content of a message.
    """

    image_file: ImageFile1 | None = None
    index: int = Field(..., description='The index of the content part in the message.')
    type: Type30 = Field(..., description='Always `image_file`.')


class Detail4(Enum):
    """
    Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`.
    """

    auto = 'auto'
    low = 'low'
    high = 'high'


class ImageUrl3(BaseModel):
    detail: Detail4 = Field(
        'auto',
        description='Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`.',
    )
    url: str | None = Field(
        None,
        description='The URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.',
    )


class MessageDeltaContentImageUrlObject(BaseModel):
    """
    References an image URL in the content of a message.
    """

    image_url: ImageUrl3 | None = None
    index: int = Field(..., description='The index of the content part in the message.')
    type: Type21 = Field(..., description='Always `image_url`.')


class MessageDeltaContentRefusalObject(BaseModel):
    """
    The refusal content that is part of a message.
    """

    index: int = Field(..., description='The index of the refusal part in the message.')
    refusal: str | None = None
    type: Type32 = Field(..., description='Always `refusal`.')


class FileCitation1(BaseModel):
    file_id: str | None = Field(
        None, description='The ID of the specific File the citation is from.'
    )
    quote: str | None = Field(None, description='The specific quote in the file.')


class MessageDeltaContentTextAnnotationsFileCitationObject(BaseModel):
    """
    A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
    """

    end_index: int | None = Field(None, ge=0)
    file_citation: FileCitation1 | None = None
    index: int = Field(
        ..., description='The index of the annotation in the text content part.'
    )
    start_index: int | None = Field(None, ge=0)
    text: str | None = Field(
        None, description='The text in the message content that needs to be replaced.'
    )
    type: Type33 = Field(..., description='Always `file_citation`.')


class FilePath1(BaseModel):
    file_id: str | None = Field(
        None, description='The ID of the file that was generated.'
    )


class MessageDeltaContentTextAnnotationsFilePathObject(BaseModel):
    """
    A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
    """

    end_index: int | None = Field(None, ge=0)
    file_path: FilePath1 | None = None
    index: int = Field(
        ..., description='The index of the annotation in the text content part.'
    )
    start_index: int | None = Field(None, ge=0)
    text: str | None = Field(
        None, description='The text in the message content that needs to be replaced.'
    )
    type: Type34 = Field(..., description='Always `file_path`.')


class Text1(BaseModel):
    annotations: (
        list[
            MessageDeltaContentTextAnnotationsFileCitationObject
            | MessageDeltaContentTextAnnotationsFilePathObject
        ]
        | None
    ) = None
    value: str | None = Field(None, description='The data that makes up the text.')


class MessageDeltaContentTextObject(BaseModel):
    """
    The text content that is part of a message.
    """

    index: int = Field(..., description='The index of the content part in the message.')
    text: Text1 | None = None
    type: Type22 = Field(..., description='Always `text`.')


class Role12(Enum):
    """
    The entity that produced the message. One of `user` or `assistant`.
    """

    user = 'user'
    assistant = 'assistant'


class Delta(BaseModel):
    """
    The delta containing the fields that have changed on the Message.
    """

    content: (
        list[
            MessageDeltaContentImageFileObject
            | MessageDeltaContentTextObject
            | MessageDeltaContentRefusalObject
            | MessageDeltaContentImageUrlObject
        ]
        | None
    ) = Field(
        None, description='The content of the message in array of text and/or images.'
    )
    role: Role12 | None = Field(
        None,
        description='The entity that produced the message. One of `user` or `assistant`.',
    )


class Object27(Enum):
    """
    The object type, which is always `thread.message.delta`.
    """

    thread_message_delta = 'thread.message.delta'


class MessageDeltaObject(BaseModel):
    """
    Represents a message delta i.e. any changed fields on a message during streaming.

    """

    delta: Delta = Field(
        ...,
        description='The delta containing the fields that have changed on the Message.',
    )
    id: str = Field(
        ...,
        description='The identifier of the message, which can be referenced in API endpoints.',
    )
    object: Object27 = Field(
        ..., description='The object type, which is always `thread.message.delta`.'
    )


class Reason(Enum):
    """
    The reason the message is incomplete.
    """

    content_filter = 'content_filter'
    max_tokens = 'max_tokens'
    run_cancelled = 'run_cancelled'
    run_expired = 'run_expired'
    run_failed = 'run_failed'


class IncompleteDetails(BaseModel):
    """
    On an incomplete message, details about why the message is incomplete.
    """

    reason: Reason = Field(..., description='The reason the message is incomplete.')


class Object28(Enum):
    """
    The object type, which is always `thread.message`.
    """

    thread_message = 'thread.message'


class Status3(Enum):
    """
    The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
    """

    in_progress = 'in_progress'
    incomplete = 'incomplete'
    completed = 'completed'


class MessageRequestContentTextObject(BaseModel):
    """
    The text content that is part of a message.
    """

    text: str = Field(..., description='Text content to be sent to the model')
    type: Type22 = Field(..., description='Always `text`.')


class Event2(Enum):
    thread_message_created = 'thread.message.created'


class Event3(Enum):
    thread_message_in_progress = 'thread.message.in_progress'


class Event4(Enum):
    thread_message_delta = 'thread.message.delta'


class MessageStreamEvent3(BaseModel):
    """
    Occurs when parts of a [Message](/docs/api-reference/messages/object) are being streamed.
    """

    data: MessageDeltaObject
    event: Event4


class Event5(Enum):
    thread_message_completed = 'thread.message.completed'


class Event6(Enum):
    thread_message_incomplete = 'thread.message.incomplete'


class Metadata(RootModel[dict[str, str] | None]):
    """
    Set of 16 key-value pairs that can be attached to an object. This can be
    useful for storing additional information about the object in a structured
    format, and querying for objects via API or the dashboard.

    Keys are strings with a maximum length of 64 characters. Values are strings
    with a maximum length of 512 characters.

    """

    root: dict[str, str] | None = None


class Object29(Enum):
    """
    The object type, which is always "model".
    """

    model = 'model'


class ModelModel(BaseModel):
    """
    Describes an OpenAI model offering that can be used with the API.
    """

    created: int = Field(
        ..., description='The Unix timestamp (in seconds) when the model was created.'
    )
    id: str = Field(
        ...,
        description='The model identifier, which can be referenced in the API endpoints.',
    )
    object: Object29 = Field(
        ..., description='The object type, which is always "model".'
    )
    owned_by: str = Field(..., description='The organization that owns the model.')


class CodeInterpreter4(BaseModel):
    file_ids: list[str] = Field(
        [],
        description='Overrides the list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n',
        max_length=20,
    )


class FileSearch7(BaseModel):
    vector_store_ids: list[str] | None = Field(
        None,
        description='Overrides the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n',
        max_length=1,
    )


class ToolResources4(BaseModel):
    """
    A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """

    code_interpreter: CodeInterpreter4 | None = None
    file_search: FileSearch7 | None = None


class ModifyMessageRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metadata: Metadata | None = None


class ModifyRunRequest(ModifyMessageRequest):
    pass


class CodeInterpreter5(CodeInterpreter1):
    pass


class FileSearch8(BaseModel):
    vector_store_ids: list[str] | None = Field(
        None,
        description='The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n',
        max_length=1,
    )


class ToolResources5(BaseModel):
    """
    A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """

    code_interpreter: CodeInterpreter5 | None = None
    file_search: FileSearch8 | None = None


class ModifyThreadRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metadata: Metadata | None = None
    tool_resources: ToolResources5 | None = Field(
        None,
        description="A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
    )


class Object30(Enum):
    """
    The object type, which is always `file`.
    """

    file = 'file'


class Purpose2(Enum):
    """
    The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
    """

    assistants = 'assistants'
    assistants_output = 'assistants_output'
    batch = 'batch'
    batch_output = 'batch_output'
    fine_tune = 'fine-tune'
    fine_tune_results = 'fine-tune-results'
    vision = 'vision'


class OpenAIFile(BaseModel):
    """
    The `File` object represents a document that has been uploaded to OpenAI.
    """

    bytes: int = Field(..., description='The size of the file, in bytes.')
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the file was created.',
    )
    filename: str = Field(..., description='The name of the file.')
    id: str = Field(
        ...,
        description='The file identifier, which can be referenced in the API endpoints.',
    )
    object: Object30 = Field(
        ..., description='The object type, which is always `file`.'
    )
    purpose: Purpose2 = Field(
        ...,
        description='The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.',
    )


class Type43(Enum):
    """
    Always `other`.
    """

    other = 'other'


class OtherChunkingStrategyResponseParam(BaseModel):
    """
    This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the `chunking_strategy` concept was introduced in the API.
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type43 = Field(..., description='Always `other`.')


class ParallelToolCalls(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.',
    )


class Content6(RootModel[list[ChatCompletionRequestMessageContentPartText]]):
    root: list[ChatCompletionRequestMessageContentPartText] = Field(
        ...,
        description='An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text inputs.',
        min_length=1,
        title='Array of content parts',
    )


class Type44(Enum):
    """
    The type of the predicted content you want to provide. This type is
    currently always `content`.

    """

    content = 'content'


class PredictionContent(BaseModel):
    """
    Static predicted output content, such as the content of a text file that is
    being regenerated.

    """

    content: str | Content6 = Field(
        ...,
        description='The content that should be matched when generating a model response.\nIf generated tokens would match this content, the entire model response\ncan be returned much more quickly.\n',
    )
    type: Type44 = Field(
        ...,
        description='The type of the predicted content you want to provide. This type is\ncurrently always `content`.\n',
    )


class Object31(Enum):
    """
    The object type, which is always `organization.project`
    """

    organization_project = 'organization.project'


class Status4(Enum):
    """
    `active` or `archived`
    """

    active = 'active'
    archived = 'archived'


class Project3(BaseModel):
    """
    Represents an individual project.
    """

    archived_at: int | None = Field(
        None,
        description='The Unix timestamp (in seconds) of when the project was archived or `null`.',
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) of when the project was created.',
    )
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints'
    )
    name: str = Field(
        ..., description='The name of the project. This appears in reporting.'
    )
    object: Object31 = Field(
        ..., description='The object type, which is always `organization.project`'
    )
    status: Status4 = Field(..., description='`active` or `archived`')


class Object32(Enum):
    """
    The object type, which is always `organization.project.api_key`
    """

    organization_project_api_key = 'organization.project.api_key'


class Type45(Enum):
    """
    `user` or `service_account`
    """

    user = 'user'
    service_account = 'service_account'


class Object33(Enum):
    organization_project_api_key_deleted = 'organization.project.api_key.deleted'


class ProjectApiKeyDeleteResponse(BaseModel):
    deleted: bool
    id: str
    object: Object33


class ProjectCreateRequest(BaseModel):
    name: str = Field(
        ...,
        description='The friendly name of the project, this name appears in reports.',
    )


class ProjectListResponse(BaseModel):
    data: list[Project3]
    first_id: str
    has_more: bool
    last_id: str
    object: Object21


class Object36(Enum):
    """
    The object type, which is always `project.rate_limit`
    """

    project_rate_limit = 'project.rate_limit'


class ProjectRateLimit(BaseModel):
    """
    Represents a project rate limit config.
    """

    batch_1_day_max_input_tokens: int | None = Field(
        None,
        description='The maximum batch input tokens per day. Only present for relevant models.',
    )
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints.'
    )
    max_audio_megabytes_per_1_minute: int | None = Field(
        None,
        description='The maximum audio megabytes per minute. Only present for relevant models.',
    )
    max_images_per_1_minute: int | None = Field(
        None,
        description='The maximum images per minute. Only present for relevant models.',
    )
    max_requests_per_1_day: int | None = Field(
        None,
        description='The maximum requests per day. Only present for relevant models.',
    )
    max_requests_per_1_minute: int = Field(
        ..., description='The maximum requests per minute.'
    )
    max_tokens_per_1_minute: int = Field(
        ..., description='The maximum tokens per minute.'
    )
    model: str = Field(..., description='The model this rate limit applies to.')
    object: Object36 = Field(
        ..., description='The object type, which is always `project.rate_limit`'
    )


class ProjectRateLimitListResponse(BaseModel):
    data: list[ProjectRateLimit]
    first_id: str
    has_more: bool
    last_id: str
    object: Object21


class ProjectRateLimitUpdateRequest(BaseModel):
    batch_1_day_max_input_tokens: int | None = Field(
        None,
        description='The maximum batch input tokens per day. Only relevant for certain models.',
    )
    max_audio_megabytes_per_1_minute: int | None = Field(
        None,
        description='The maximum audio megabytes per minute. Only relevant for certain models.',
    )
    max_images_per_1_minute: int | None = Field(
        None,
        description='The maximum images per minute. Only relevant for certain models.',
    )
    max_requests_per_1_day: int | None = Field(
        None,
        description='The maximum requests per day. Only relevant for certain models.',
    )
    max_requests_per_1_minute: int | None = Field(
        None, description='The maximum requests per minute.'
    )
    max_tokens_per_1_minute: int | None = Field(
        None, description='The maximum tokens per minute.'
    )


class Object38(Enum):
    """
    The object type, which is always `organization.project.service_account`
    """

    organization_project_service_account = 'organization.project.service_account'


class Role14(Enum):
    """
    `owner` or `member`
    """

    owner = 'owner'
    member = 'member'


class ProjectServiceAccount(BaseModel):
    """
    Represents an individual service account in a project.
    """

    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) of when the service account was created',
    )
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints'
    )
    name: str = Field(..., description='The name of the service account')
    object: Object38 = Field(
        ...,
        description='The object type, which is always `organization.project.service_account`',
    )
    role: Role14 = Field(..., description='`owner` or `member`')


class Object39(Enum):
    """
    The object type, which is always `organization.project.service_account.api_key`
    """

    organization_project_service_account_api_key = (
        'organization.project.service_account.api_key'
    )


class ProjectServiceAccountApiKey(BaseModel):
    created_at: int
    id: str
    name: str
    object: Object39 = Field(
        ...,
        description='The object type, which is always `organization.project.service_account.api_key`',
    )
    value: str


class ProjectServiceAccountCreateRequest(BaseModel):
    name: str = Field(..., description='The name of the service account being created.')


class Object40(Enum):
    organization_project_service_account = 'organization.project.service_account'


class Role15(Enum):
    """
    Service accounts can only have one role of type `member`
    """

    member = 'member'


class ProjectServiceAccountCreateResponse(BaseModel):
    api_key: ProjectServiceAccountApiKey
    created_at: int
    id: str
    name: str
    object: Object40
    role: Role15 = Field(
        ..., description='Service accounts can only have one role of type `member`'
    )


class Object41(Enum):
    organization_project_service_account_deleted = (
        'organization.project.service_account.deleted'
    )


class ProjectServiceAccountDeleteResponse(BaseModel):
    deleted: bool
    id: str
    object: Object41


class ProjectServiceAccountListResponse(BaseModel):
    data: list[ProjectServiceAccount]
    first_id: str
    has_more: bool
    last_id: str
    object: Object21


class ProjectUpdateRequest(BaseModel):
    name: str = Field(
        ...,
        description='The updated name of the project, this name appears in reports.',
    )


class Object43(Enum):
    """
    The object type, which is always `organization.project.user`
    """

    organization_project_user = 'organization.project.user'


class ProjectUser(BaseModel):
    """
    Represents an individual user in a project.
    """

    added_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) of when the project was added.',
    )
    email: str = Field(..., description='The email address of the user')
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints'
    )
    name: str = Field(..., description='The name of the user')
    object: Object43 = Field(
        ..., description='The object type, which is always `organization.project.user`'
    )
    role: Role14 = Field(..., description='`owner` or `member`')


class ProjectUserCreateRequest(BaseModel):
    role: Role14 = Field(..., description='`owner` or `member`')
    user_id: str = Field(..., description='The ID of the user.')


class Object44(Enum):
    organization_project_user_deleted = 'organization.project.user.deleted'


class ProjectUserDeleteResponse(BaseModel):
    deleted: bool
    id: str
    object: Object44


class ProjectUserListResponse(BaseModel):
    data: list[ProjectUser]
    first_id: str
    has_more: bool
    last_id: str
    object: str


class ProjectUserUpdateRequest(BaseModel):
    role: Role14 = Field(..., description='`owner` or `member`')


class Type46(Enum):
    """
    The event type, must be `conversation.item.create`.
    """

    conversation_item_create = 'conversation.item.create'


class Type47(Enum):
    """
    The event type, must be `conversation.item.delete`.
    """

    conversation_item_delete = 'conversation.item.delete'


class RealtimeClientEventConversationItemDelete(BaseModel):
    """
    Send this event when you want to remove any item from the conversation
    history. The server will respond with a `conversation.item.deleted` event,
    unless the item does not exist in the conversation history, in which case the
    server will respond with an error.

    """

    event_id: str | None = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    item_id: str = Field(..., description='The ID of the item to delete.')
    type: Type47 = Field(
        ..., description='The event type, must be `conversation.item.delete`.'
    )


class Type48(Enum):
    """
    The event type, must be `conversation.item.truncate`.
    """

    conversation_item_truncate = 'conversation.item.truncate'


class RealtimeClientEventConversationItemTruncate(BaseModel):
    """
    Send this event to truncate a previous assistant message’s audio. The server
    will produce audio faster than realtime, so this event is useful when the user
    interrupts to truncate audio that has already been sent to the client but not
    yet played. This will synchronize the server's understanding of the audio with
    the client's playback.

    Truncating audio will delete the server-side text transcript to ensure there
    is not text in the context that hasn't been heard by the user.

    If successful, the server will respond with a `conversation.item.truncated`
    event.

    """

    audio_end_ms: int = Field(
        ...,
        description='Inclusive duration up to which audio is truncated, in milliseconds. If \nthe audio_end_ms is greater than the actual audio duration, the server \nwill respond with an error.\n',
    )
    content_index: int = Field(
        ..., description='The index of the content part to truncate. Set this to 0.'
    )
    event_id: str | None = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    item_id: str = Field(
        ...,
        description='The ID of the assistant message item to truncate. Only assistant message \nitems can be truncated.\n',
    )
    type: Type48 = Field(
        ..., description='The event type, must be `conversation.item.truncate`.'
    )


class Type49(Enum):
    """
    The event type, must be `input_audio_buffer.append`.
    """

    input_audio_buffer_append = 'input_audio_buffer.append'


class RealtimeClientEventInputAudioBufferAppend(BaseModel):
    """
    Send this event to append audio bytes to the input audio buffer. The audio
    buffer is temporary storage you can write to and later commit. In Server VAD
    mode, the audio buffer is used to detect speech and the server will decide
    when to commit. When Server VAD is disabled, you must commit the audio buffer
    manually.

    The client may choose how much audio to place in each event up to a maximum
    of 15 MiB, for example streaming smaller chunks from the client may allow the
    VAD to be more responsive. Unlike made other client events, the server will
    not send a confirmation response to this event.

    """

    audio: str = Field(
        ...,
        description='Base64-encoded audio bytes. This must be in the format specified by the \n`input_audio_format` field in the session configuration.\n',
    )
    event_id: str | None = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    type: Type49 = Field(
        ..., description='The event type, must be `input_audio_buffer.append`.'
    )


class Type50(Enum):
    """
    The event type, must be `input_audio_buffer.clear`.
    """

    input_audio_buffer_clear = 'input_audio_buffer.clear'


class RealtimeClientEventInputAudioBufferClear(BaseModel):
    """
    Send this event to clear the audio bytes in the buffer. The server will
    respond with an `input_audio_buffer.cleared` event.

    """

    event_id: str | None = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    type: Type50 = Field(
        ..., description='The event type, must be `input_audio_buffer.clear`.'
    )


class Type51(Enum):
    """
    The event type, must be `input_audio_buffer.commit`.
    """

    input_audio_buffer_commit = 'input_audio_buffer.commit'


class RealtimeClientEventInputAudioBufferCommit(BaseModel):
    """
    Send this event to commit the user input audio buffer, which will create a
    new user message item in the conversation. This event will produce an error
    if the input audio buffer is empty. When in Server VAD mode, the client does
    not need to send this event, the server will commit the audio buffer
    automatically.

    Committing the input audio buffer will trigger input audio transcription
    (if enabled in session configuration), but it will not create a response
    from the model. The server will respond with an `input_audio_buffer.committed`
    event.

    """

    event_id: str | None = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    type: Type51 = Field(
        ..., description='The event type, must be `input_audio_buffer.commit`.'
    )


class Type52(Enum):
    """
    The event type, must be `response.cancel`.
    """

    response_cancel = 'response.cancel'


class RealtimeClientEventResponseCancel(BaseModel):
    """
    Send this event to cancel an in-progress response. The server will respond
    with a `response.cancelled` event or an error if there is no response to
    cancel.

    """

    event_id: str | None = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    response_id: str | None = Field(
        None,
        description='A specific response ID to cancel - if not provided, will cancel an \nin-progress response in the default conversation.\n',
    )
    type: Type52 = Field(..., description='The event type, must be `response.cancel`.')


class Type53(Enum):
    """
    The event type, must be `response.create`.
    """

    response_create = 'response.create'


class Type54(Enum):
    """
    The event type, must be `session.update`.
    """

    session_update = 'session.update'


class Type55(Enum):
    """
    The content type (`input_text`, `input_audio`, `item_reference`, `text`).

    """

    input_audio = 'input_audio'
    input_text = 'input_text'
    item_reference = 'item_reference'
    text = 'text'


class ContentItem(BaseModel):
    audio: str | None = Field(
        None,
        description='Base64-encoded audio bytes, used for `input_audio` content type.\n',
    )
    id: str | None = Field(
        None,
        description='ID of a previous conversation item to reference (for `item_reference`\ncontent types in `response.create` events). These can reference both\nclient and server created items.\n',
    )
    text: str | None = Field(
        None,
        description='The text content, used for `input_text` and `text` content types.\n',
    )
    transcript: str | None = Field(
        None,
        description='The transcript of the audio, used for `input_audio` content type.\n',
    )
    type: Type55 | None = Field(
        None,
        description='The content type (`input_text`, `input_audio`, `item_reference`, `text`).\n',
    )


class Object45(Enum):
    """
    Identifier for the API object being returned - always `realtime.item`.

    """

    realtime_item = 'realtime.item'


class Role19(Enum):
    """
    The role of the message sender (`user`, `assistant`, `system`), only
    applicable for `message` items.

    """

    user = 'user'
    assistant = 'assistant'
    system = 'system'


class Status5(Enum):
    """
    The status of the item (`completed`, `incomplete`). These have no effect
    on the conversation, but are accepted for consistency with the
    `conversation.item.created` event.

    """

    completed = 'completed'
    incomplete = 'incomplete'


class Type56(Enum):
    """
    The type of the item (`message`, `function_call`, `function_call_output`).

    """

    message = 'message'
    function_call = 'function_call'
    function_call_output = 'function_call_output'


class RealtimeConversationItem(BaseModel):
    """
    The item to add to the conversation.
    """

    arguments: str | None = Field(
        None,
        description='The arguments of the function call (for `function_call` items).\n',
    )
    call_id: str | None = Field(
        None,
        description='The ID of the function call (for `function_call` and \n`function_call_output` items). If passed on a `function_call_output` \nitem, the server will check that a `function_call` item with the same \nID exists in the conversation history.\n',
    )
    content: list[ContentItem] | None = Field(
        None,
        description='The content of the message, applicable for `message` items. \n- Message items of role `system` support only `input_text` content\n- Message items of role `user` support `input_text` and `input_audio` \n  content\n- Message items of role `assistant` support `text` content.\n',
    )
    id: str | None = Field(
        None,
        description='The unique ID of the item, this can be generated by the client to help \nmanage server-side context, but is not required because the server will \ngenerate one if not provided.\n',
    )
    name: str | None = Field(
        None,
        description='The name of the function being called (for `function_call` items).\n',
    )
    object: Object45 | None = Field(
        None,
        description='Identifier for the API object being returned - always `realtime.item`.\n',
    )
    output: str | None = Field(
        None,
        description='The output of the function call (for `function_call_output` items).\n',
    )
    role: Role19 | None = Field(
        None,
        description='The role of the message sender (`user`, `assistant`, `system`), only \napplicable for `message` items.\n',
    )
    status: Status5 | None = Field(
        None,
        description='The status of the item (`completed`, `incomplete`). These have no effect \non the conversation, but are accepted for consistency with the \n`conversation.item.created` event.\n',
    )
    type: Type56 | None = Field(
        None,
        description='The type of the item (`message`, `function_call`, `function_call_output`).\n',
    )


class ContentItem1(ContentItem):
    pass


class Type58(Enum):
    """
    The type of the item (`message`, `function_call`, `function_call_output`, `item_reference`).

    """

    message = 'message'
    function_call = 'function_call'
    function_call_output = 'function_call_output'


class RealtimeConversationItemWithReference(BaseModel):
    """
    The item to add to the conversation.
    """

    arguments: str | None = Field(
        None,
        description='The arguments of the function call (for `function_call` items).\n',
    )
    call_id: str | None = Field(
        None,
        description='The ID of the function call (for `function_call` and \n`function_call_output` items). If passed on a `function_call_output` \nitem, the server will check that a `function_call` item with the same \nID exists in the conversation history.\n',
    )
    content: list[ContentItem1] | None = Field(
        None,
        description='The content of the message, applicable for `message` items. \n- Message items of role `system` support only `input_text` content\n- Message items of role `user` support `input_text` and `input_audio` \n  content\n- Message items of role `assistant` support `text` content.\n',
    )
    id: str | None = Field(
        None,
        description='For an item of type (`message` | `function_call` | `function_call_output`)\nthis field allows the client to assign the unique ID of the item. It is\nnot required because the server will generate one if not provided.\n\nFor an item of type `item_reference`, this field is required and is a\nreference to any item that has previously existed in the conversation.\n',
    )
    name: str | None = Field(
        None,
        description='The name of the function being called (for `function_call` items).\n',
    )
    object: Object45 | None = Field(
        None,
        description='Identifier for the API object being returned - always `realtime.item`.\n',
    )
    output: str | None = Field(
        None,
        description='The output of the function call (for `function_call_output` items).\n',
    )
    role: Role19 | None = Field(
        None,
        description='The role of the message sender (`user`, `assistant`, `system`), only \napplicable for `message` items.\n',
    )
    status: Status5 | None = Field(
        None,
        description='The status of the item (`completed`, `incomplete`). These have no effect \non the conversation, but are accepted for consistency with the \n`conversation.item.created` event.\n',
    )
    type: Type58 | None = Field(
        None,
        description='The type of the item (`message`, `function_call`, `function_call_output`, `item_reference`).\n',
    )


class MaxOutputTokens(Enum):
    """
    Maximum number of output tokens for a single assistant response,
    inclusive of tool calls, that was used in this response.

    """

    inf = 'inf'


class Object47(Enum):
    """
    The object type, must be `realtime.response`.
    """

    realtime_response = 'realtime.response'


class OutputAudioFormat(Enum):
    """
    The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.

    """

    pcm16 = 'pcm16'
    g711_ulaw = 'g711_ulaw'
    g711_alaw = 'g711_alaw'


class Status7(Enum):
    """
    The final status of the response (`completed`, `cancelled`, `failed`, or
    `incomplete`).

    """

    completed = 'completed'
    cancelled = 'cancelled'
    failed = 'failed'
    incomplete = 'incomplete'


class Error3(BaseModel):
    """
    A description of the error that caused the response to fail,
    populated when the `status` is `failed`.

    """

    code: str | None = Field(None, description='Error code, if any.')
    type: str | None = Field(None, description='The type of error.')


class Reason1(Enum):
    """
    The reason the Response did not complete. For a `cancelled` Response,
    one of `turn_detected` (the server VAD detected a new start of speech)
    or `client_cancelled` (the client sent a cancel event). For an
    `incomplete` Response, one of `max_output_tokens` or `content_filter`
    (the server-side safety filter activated and cut off the response).

    """

    turn_detected = 'turn_detected'
    client_cancelled = 'client_cancelled'
    max_output_tokens = 'max_output_tokens'
    content_filter = 'content_filter'


class Type59(Enum):
    """
    The type of error that caused the response to fail, corresponding
    with the `status` field (`completed`, `cancelled`, `incomplete`,
    `failed`).

    """

    completed = 'completed'
    cancelled = 'cancelled'
    failed = 'failed'
    incomplete = 'incomplete'


class StatusDetails(BaseModel):
    """
    Additional details about the status.
    """

    error: Error3 | None = Field(
        None,
        description='A description of the error that caused the response to fail, \npopulated when the `status` is `failed`.\n',
    )
    reason: Reason1 | None = Field(
        None,
        description='The reason the Response did not complete. For a `cancelled` Response, \none of `turn_detected` (the server VAD detected a new start of speech) \nor `client_cancelled` (the client sent a cancel event). For an \n`incomplete` Response, one of `max_output_tokens` or `content_filter` \n(the server-side safety filter activated and cut off the response).\n',
    )
    type: Type59 | None = Field(
        None,
        description='The type of error that caused the response to fail, corresponding \nwith the `status` field (`completed`, `cancelled`, `incomplete`, \n`failed`).\n',
    )


class InputTokenDetails(BaseModel):
    """
    Details about the input tokens used in the Response.
    """

    audio_tokens: int | None = Field(
        None, description='The number of audio tokens used in the Response.'
    )
    cached_tokens: int | None = Field(
        None, description='The number of cached tokens used in the Response.'
    )
    text_tokens: int | None = Field(
        None, description='The number of text tokens used in the Response.'
    )


class OutputTokenDetails(BaseModel):
    """
    Details about the output tokens used in the Response.
    """

    audio_tokens: int | None = Field(
        None, description='The number of audio tokens used in the Response.'
    )
    text_tokens: int | None = Field(
        None, description='The number of text tokens used in the Response.'
    )


class Usage2(BaseModel):
    """
    Usage statistics for the Response, this will correspond to billing. A
    Realtime API session will maintain a conversation context and append new
    Items to the Conversation, thus output from previous turns (text and
    audio tokens) will become the input for later turns.

    """

    input_token_details: InputTokenDetails | None = Field(
        None, description='Details about the input tokens used in the Response.'
    )
    input_tokens: int | None = Field(
        None,
        description='The number of input tokens used in the Response, including text and \naudio tokens.\n',
    )
    output_token_details: OutputTokenDetails | None = Field(
        None, description='Details about the output tokens used in the Response.'
    )
    output_tokens: int | None = Field(
        None,
        description='The number of output tokens sent in the Response, including text and \naudio tokens.\n',
    )
    total_tokens: int | None = Field(
        None,
        description='The total number of tokens in the Response including input and output \ntext and audio tokens.\n',
    )


class Voice2(Enum):
    """
    The voice the model used to respond.
    Current voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`,
    `shimmer` and `verse`.

    """

    alloy = 'alloy'
    ash = 'ash'
    ballad = 'ballad'
    coral = 'coral'
    echo = 'echo'
    sage = 'sage'
    shimmer = 'shimmer'
    verse = 'verse'


class RealtimeResponse(BaseModel):
    """
    The response resource.
    """

    conversation_id: str | None = Field(
        None,
        description='Which conversation the response is added to, determined by the `conversation`\nfield in the `response.create` event. If `auto`, the response will be added to\nthe default conversation and the value of `conversation_id` will be an id like\n`conv_1234`. If `none`, the response will not be added to any conversation and\nthe value of `conversation_id` will be `null`. If responses are being triggered\nby server VAD, the response will be added to the default conversation, thus\nthe `conversation_id` will be an id like `conv_1234`.\n',
    )
    id: str | None = Field(None, description='The unique ID of the response.')
    max_output_tokens: int | MaxOutputTokens | None = Field(
        None,
        description='Maximum number of output tokens for a single assistant response,\ninclusive of tool calls, that was used in this response.\n',
    )
    metadata: Metadata | None = None
    modalities: list[ChatCompletionModality] | None = Field(
        None,
        description='The set of modalities the model used to respond. If there are multiple modalities,\nthe model will pick one, for example if `modalities` is `["text", "audio"]`, the model\ncould be responding in either text or audio.\n',
    )
    object: Object47 | None = Field(
        None, description='The object type, must be `realtime.response`.'
    )
    output: list[RealtimeConversationItem] | None = Field(
        None, description='The list of output items generated by the response.'
    )
    output_audio_format: OutputAudioFormat | None = Field(
        None,
        description='The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n',
    )
    status: Status7 | None = Field(
        None,
        description='The final status of the response (`completed`, `cancelled`, `failed`, or \n`incomplete`).\n',
    )
    status_details: StatusDetails | None = Field(
        None, description='Additional details about the status.'
    )
    temperature: float | None = Field(
        None,
        description='Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n',
    )
    usage: Usage2 | None = Field(
        None,
        description='Usage statistics for the Response, this will correspond to billing. A \nRealtime API session will maintain a conversation context and append new \nItems to the Conversation, thus output from previous turns (text and \naudio tokens) will become the input for later turns.\n',
    )
    voice: Voice2 | None = Field(
        None,
        description='The voice the model used to respond.\nCurrent voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, \n`shimmer` and `verse`.\n',
    )


class Conversation(Enum):
    """
    Controls which conversation the response is added to. Currently supports
    `auto` and `none`, with `auto` as the default value. The `auto` value
    means that the contents of the response will be added to the default
    conversation. Set this to `none` to create an out-of-band response which
    will not add items to default conversation.

    """

    auto = 'auto'
    none = 'none'


class MaxResponseOutputTokens(Enum):
    """
    Maximum number of output tokens for a single assistant response,
    inclusive of tool calls. Provide an integer between 1 and 4096 to
    limit output tokens, or `inf` for the maximum available tokens for a
    given model. Defaults to `inf`.

    """

    inf = 'inf'


class Type60(Enum):
    """
    The type of the tool, i.e. `function`.
    """

    function = 'function'


class Tool(BaseModel):
    description: str | None = Field(
        None,
        description='The description of the function, including guidance on when and how \nto call it, and guidance about what to tell the user when calling \n(if anything).\n',
    )
    name: str | None = Field(None, description='The name of the function.')
    parameters: dict[str, Any] | None = Field(
        None, description='Parameters of the function in JSON Schema.'
    )
    type: Type60 | None = Field(
        None, description='The type of the tool, i.e. `function`.'
    )


class Voice3(Enum):
    """
    The voice the model uses to respond. Voice cannot be changed during the
    session once the model has responded with audio at least once. Current
    voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`,
    `shimmer` and `verse`.

    """

    alloy = 'alloy'
    ash = 'ash'
    ballad = 'ballad'
    coral = 'coral'
    echo = 'echo'
    sage = 'sage'
    shimmer = 'shimmer'
    verse = 'verse'


class RealtimeResponseCreateParams(BaseModel):
    """
    Create a new Realtime response with these parameters
    """

    conversation: str | Conversation | None = Field(
        None,
        description='Controls which conversation the response is added to. Currently supports\n`auto` and `none`, with `auto` as the default value. The `auto` value\nmeans that the contents of the response will be added to the default\nconversation. Set this to `none` to create an out-of-band response which \nwill not add items to default conversation.\n',
    )
    input: list[RealtimeConversationItemWithReference] | None = Field(
        None,
        description='Input items to include in the prompt for the model. Using this field\ncreates a new context for this Response instead of using the default\nconversation. An empty array `[]` will clear the context for this Response.\nNote that this can include references to items from the default conversation.\n',
    )
    instructions: str | None = Field(
        None,
        description='The default system instructions (i.e. system message) prepended to model \ncalls. This field allows the client to guide the model on desired \nresponses. The model can be instructed on response content and format, \n(e.g. "be extremely succinct", "act friendly", "here are examples of good \nresponses") and on audio behavior (e.g. "talk quickly", "inject emotion \ninto your voice", "laugh frequently"). The instructions are not guaranteed \nto be followed by the model, but they provide guidance to the model on the \ndesired behavior.\n\nNote that the server sets default instructions which will be used if this \nfield is not set and are visible in the `session.created` event at the \nstart of the session.\n',
    )
    max_response_output_tokens: int | MaxResponseOutputTokens | None = Field(
        None,
        description='Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n',
    )
    metadata: Metadata | None = None
    modalities: list[ChatCompletionModality] | None = Field(
        None,
        description='The set of modalities the model can respond with. To disable audio,\nset this to ["text"].\n',
    )
    output_audio_format: OutputAudioFormat | None = Field(
        None,
        description='The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n',
    )
    temperature: float | None = Field(
        None,
        description='Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n',
    )
    tool_choice: str | None = Field(
        None,
        description='How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function, like `{"type": "function", "function": {"name": "my_function"}}`.\n',
    )
    tools: list[Tool] | None = Field(
        None, description='Tools (functions) available to the model.'
    )
    voice: Voice3 | None = Field(
        None,
        description='The voice the model uses to respond. Voice cannot be changed during the \nsession once the model has responded with audio at least once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, \n`shimmer` and `verse`.\n',
    )


class Conversation1(BaseModel):
    """
    The conversation resource.
    """

    id: str | None = Field(None, description='The unique ID of the conversation.')
    object: str | None = Field(
        None, description='The object type, must be `realtime.conversation`.'
    )


class Type61(Enum):
    """
    The event type, must be `conversation.created`.
    """

    conversation_created = 'conversation.created'


class RealtimeServerEventConversationCreated(BaseModel):
    """
    Returned when a conversation is created. Emitted right after session creation.

    """

    conversation: Conversation1 = Field(..., description='The conversation resource.')
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type61 = Field(
        ..., description='The event type, must be `conversation.created`.'
    )


class Type62(Enum):
    """
    The event type, must be `conversation.item.created`.
    """

    conversation_item_created = 'conversation.item.created'


class RealtimeServerEventConversationItemCreated(BaseModel):
    """
    Returned when a conversation item is created. There are several scenarios that
    produce this event:
      - The server is generating a Response, which if successful will produce
        either one or two Items, which will be of type `message`
        (role `assistant`) or type `function_call`.
      - The input audio buffer has been committed, either by the client or the
        server (in `server_vad` mode). The server will take the content of the
        input audio buffer and add it to a new user message Item.
      - The client has sent a `conversation.item.create` event to add a new Item
        to the Conversation.

    """

    event_id: str = Field(..., description='The unique ID of the server event.')
    item: RealtimeConversationItem
    previous_item_id: str = Field(
        ...,
        description='The ID of the preceding item in the Conversation context, allows the \nclient to understand the order of the conversation.\n',
    )
    type: Type62 = Field(
        ..., description='The event type, must be `conversation.item.created`.'
    )


class Type63(Enum):
    """
    The event type, must be `conversation.item.deleted`.
    """

    conversation_item_deleted = 'conversation.item.deleted'


class RealtimeServerEventConversationItemDeleted(BaseModel):
    """
    Returned when an item in the conversation is deleted by the client with a
    `conversation.item.delete` event. This event is used to synchronize the
    server's understanding of the conversation history with the client's view.

    """

    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(..., description='The ID of the item that was deleted.')
    type: Type63 = Field(
        ..., description='The event type, must be `conversation.item.deleted`.'
    )


class Type64(Enum):
    """
    The event type, must be
    `conversation.item.input_audio_transcription.completed`.

    """

    conversation_item_input_audio_transcription_completed = (
        'conversation.item.input_audio_transcription.completed'
    )


class RealtimeServerEventConversationItemInputAudioTranscriptionCompleted(BaseModel):
    """
    This event is the output of audio transcription for user audio written to the
    user audio buffer. Transcription begins when the input audio buffer is
    committed by the client or server (in `server_vad` mode). Transcription runs
    asynchronously with Response creation, so this event may come before or after
    the Response events.

    Realtime API models accept audio natively, and thus input transcription is a
    separate process run on a separate ASR (Automatic Speech Recognition) model,
    currently always `whisper-1`. Thus the transcript may diverge somewhat from
    the model's interpretation, and should be treated as a rough guide.

    """

    content_index: int = Field(
        ..., description='The index of the content part containing the audio.'
    )
    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(
        ..., description='The ID of the user message item containing the audio.'
    )
    transcript: str = Field(..., description='The transcribed text.')
    type: Type64 = Field(
        ...,
        description='The event type, must be\n`conversation.item.input_audio_transcription.completed`.\n',
    )


class Error4(BaseModel):
    """
    Details of the transcription error.
    """

    code: str | None = Field(None, description='Error code, if any.')
    message: str | None = Field(None, description='A human-readable error message.')
    param: str | None = Field(
        None, description='Parameter related to the error, if any.'
    )
    type: str | None = Field(None, description='The type of error.')


class Type65(Enum):
    """
    The event type, must be
    `conversation.item.input_audio_transcription.failed`.

    """

    conversation_item_input_audio_transcription_failed = (
        'conversation.item.input_audio_transcription.failed'
    )


class RealtimeServerEventConversationItemInputAudioTranscriptionFailed(BaseModel):
    """
    Returned when input audio transcription is configured, and a transcription
    request for a user message failed. These events are separate from other
    `error` events so that the client can identify the related Item.

    """

    content_index: int = Field(
        ..., description='The index of the content part containing the audio.'
    )
    error: Error4 = Field(..., description='Details of the transcription error.')
    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(..., description='The ID of the user message item.')
    type: Type65 = Field(
        ...,
        description='The event type, must be\n`conversation.item.input_audio_transcription.failed`.\n',
    )


class Type66(Enum):
    """
    The event type, must be `conversation.item.truncated`.
    """

    conversation_item_truncated = 'conversation.item.truncated'


class RealtimeServerEventConversationItemTruncated(BaseModel):
    """
    Returned when an earlier assistant audio message item is truncated by the
    client with a `conversation.item.truncate` event. This event is used to
    synchronize the server's understanding of the audio with the client's playback.

    This action will truncate the audio and remove the server-side text transcript
    to ensure there is no text in the context that hasn't been heard by the user.

    """

    audio_end_ms: int = Field(
        ...,
        description='The duration up to which the audio was truncated, in milliseconds.\n',
    )
    content_index: int = Field(
        ..., description='The index of the content part that was truncated.'
    )
    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(
        ..., description='The ID of the assistant message item that was truncated.'
    )
    type: Type66 = Field(
        ..., description='The event type, must be `conversation.item.truncated`.'
    )


class Error5(BaseModel):
    """
    Details of the error.
    """

    code: str | None = Field(None, description='Error code, if any.')
    event_id: str | None = Field(
        None,
        description='The event_id of the client event that caused the error, if applicable.\n',
    )
    message: str = Field(..., description='A human-readable error message.')
    param: str | None = Field(
        None, description='Parameter related to the error, if any.'
    )
    type: str = Field(
        ...,
        description='The type of error (e.g., "invalid_request_error", "server_error").\n',
    )


class Type67(Enum):
    """
    The event type, must be `error`.
    """

    error = 'error'


class RealtimeServerEventError(BaseModel):
    """
    Returned when an error occurs, which could be a client problem or a server
    problem. Most errors are recoverable and the session will stay open, we
    recommend to implementors to monitor and log error messages by default.

    """

    error: Error5 = Field(..., description='Details of the error.')
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type67 = Field(..., description='The event type, must be `error`.')


class Type68(Enum):
    """
    The event type, must be `input_audio_buffer.cleared`.
    """

    input_audio_buffer_cleared = 'input_audio_buffer.cleared'


class RealtimeServerEventInputAudioBufferCleared(BaseModel):
    """
    Returned when the input audio buffer is cleared by the client with a
    `input_audio_buffer.clear` event.

    """

    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type68 = Field(
        ..., description='The event type, must be `input_audio_buffer.cleared`.'
    )


class Type69(Enum):
    """
    The event type, must be `input_audio_buffer.committed`.
    """

    input_audio_buffer_committed = 'input_audio_buffer.committed'


class RealtimeServerEventInputAudioBufferCommitted(BaseModel):
    """
    Returned when an input audio buffer is committed, either by the client or
    automatically in server VAD mode. The `item_id` property is the ID of the user
    message item that will be created, thus a `conversation.item.created` event
    will also be sent to the client.

    """

    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(
        ..., description='The ID of the user message item that will be created.'
    )
    previous_item_id: str = Field(
        ...,
        description='The ID of the preceding item after which the new item will be inserted.\n',
    )
    type: Type69 = Field(
        ..., description='The event type, must be `input_audio_buffer.committed`.'
    )


class Type70(Enum):
    """
    The event type, must be `input_audio_buffer.speech_started`.
    """

    input_audio_buffer_speech_started = 'input_audio_buffer.speech_started'


class RealtimeServerEventInputAudioBufferSpeechStarted(BaseModel):
    """
    Sent by the server when in `server_vad` mode to indicate that speech has been
    detected in the audio buffer. This can happen any time audio is added to the
    buffer (unless speech is already detected). The client may want to use this
    event to interrupt audio playback or provide visual feedback to the user.

    The client should expect to receive a `input_audio_buffer.speech_stopped` event
    when speech stops. The `item_id` property is the ID of the user message item
    that will be created when speech stops and will also be included in the
    `input_audio_buffer.speech_stopped` event (unless the client manually commits
    the audio buffer during VAD activation).

    """

    audio_start_ms: int = Field(
        ...,
        description='Milliseconds from the start of all audio written to the buffer during the \nsession when speech was first detected. This will correspond to the \nbeginning of audio sent to the model, and thus includes the \n`prefix_padding_ms` configured in the Session.\n',
    )
    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(
        ...,
        description='The ID of the user message item that will be created when speech stops.\n',
    )
    type: Type70 = Field(
        ..., description='The event type, must be `input_audio_buffer.speech_started`.'
    )


class Type71(Enum):
    """
    The event type, must be `input_audio_buffer.speech_stopped`.
    """

    input_audio_buffer_speech_stopped = 'input_audio_buffer.speech_stopped'


class RealtimeServerEventInputAudioBufferSpeechStopped(BaseModel):
    """
    Returned in `server_vad` mode when the server detects the end of speech in
    the audio buffer. The server will also send an `conversation.item.created`
    event with the user message item that is created from the audio buffer.

    """

    audio_end_ms: int = Field(
        ...,
        description='Milliseconds since the session started when speech stopped. This will \ncorrespond to the end of audio sent to the model, and thus includes the \n`min_silence_duration_ms` configured in the Session.\n',
    )
    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(
        ..., description='The ID of the user message item that will be created.'
    )
    type: Type71 = Field(
        ..., description='The event type, must be `input_audio_buffer.speech_stopped`.'
    )


class Name(Enum):
    """
    The name of the rate limit (`requests`, `tokens`).

    """

    requests = 'requests'
    tokens = 'tokens'


class RateLimit(BaseModel):
    limit: int | None = Field(
        None, description='The maximum allowed value for the rate limit.'
    )
    name: Name | None = Field(
        None, description='The name of the rate limit (`requests`, `tokens`).\n'
    )
    remaining: int | None = Field(
        None, description='The remaining value before the limit is reached.'
    )
    reset_seconds: float | None = Field(
        None, description='Seconds until the rate limit resets.'
    )


class Type72(Enum):
    """
    The event type, must be `rate_limits.updated`.
    """

    rate_limits_updated = 'rate_limits.updated'


class RealtimeServerEventRateLimitsUpdated(BaseModel):
    """
    Emitted at the beginning of a Response to indicate the updated rate limits.
    When a Response is created some tokens will be "reserved" for the output
    tokens, the rate limits shown here reflect that reservation, which is then
    adjusted accordingly once the Response is completed.

    """

    event_id: str = Field(..., description='The unique ID of the server event.')
    rate_limits: list[RateLimit] = Field(
        ..., description='List of rate limit information.'
    )
    type: Type72 = Field(
        ..., description='The event type, must be `rate_limits.updated`.'
    )


class Type73(Enum):
    """
    The event type, must be `response.audio.delta`.
    """

    response_audio_delta = 'response.audio.delta'


class RealtimeServerEventResponseAudioDelta(BaseModel):
    """
    Returned when the model-generated audio is updated.
    """

    content_index: int = Field(
        ..., description="The index of the content part in the item's content array."
    )
    delta: str = Field(..., description='Base64-encoded audio data delta.')
    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(..., description='The ID of the item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    response_id: str = Field(..., description='The ID of the response.')
    type: Type73 = Field(
        ..., description='The event type, must be `response.audio.delta`.'
    )


class Type74(Enum):
    """
    The event type, must be `response.audio.done`.
    """

    response_audio_done = 'response.audio.done'


class RealtimeServerEventResponseAudioDone(BaseModel):
    """
    Returned when the model-generated audio is done. Also emitted when a Response
    is interrupted, incomplete, or cancelled.

    """

    content_index: int = Field(
        ..., description="The index of the content part in the item's content array."
    )
    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(..., description='The ID of the item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    response_id: str = Field(..., description='The ID of the response.')
    type: Type74 = Field(
        ..., description='The event type, must be `response.audio.done`.'
    )


class Type75(Enum):
    """
    The event type, must be `response.audio_transcript.delta`.
    """

    response_audio_transcript_delta = 'response.audio_transcript.delta'


class RealtimeServerEventResponseAudioTranscriptDelta(BaseModel):
    """
    Returned when the model-generated transcription of audio output is updated.

    """

    content_index: int = Field(
        ..., description="The index of the content part in the item's content array."
    )
    delta: str = Field(..., description='The transcript delta.')
    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(..., description='The ID of the item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    response_id: str = Field(..., description='The ID of the response.')
    type: Type75 = Field(
        ..., description='The event type, must be `response.audio_transcript.delta`.'
    )


class Type76(Enum):
    """
    The event type, must be `response.audio_transcript.done`.
    """

    response_audio_transcript_done = 'response.audio_transcript.done'


class RealtimeServerEventResponseAudioTranscriptDone(BaseModel):
    """
    Returned when the model-generated transcription of audio output is done
    streaming. Also emitted when a Response is interrupted, incomplete, or
    cancelled.

    """

    content_index: int = Field(
        ..., description="The index of the content part in the item's content array."
    )
    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(..., description='The ID of the item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    response_id: str = Field(..., description='The ID of the response.')
    transcript: str = Field(..., description='The final transcript of the audio.')
    type: Type76 = Field(
        ..., description='The event type, must be `response.audio_transcript.done`.'
    )


class Type77(Enum):
    """
    The content type ("text", "audio").
    """

    audio = 'audio'
    text = 'text'


class Part(BaseModel):
    """
    The content part that was added.
    """

    audio: str | None = Field(
        None, description='Base64-encoded audio data (if type is "audio").'
    )
    text: str | None = Field(None, description='The text content (if type is "text").')
    transcript: str | None = Field(
        None, description='The transcript of the audio (if type is "audio").'
    )
    type: Type77 | None = Field(None, description='The content type ("text", "audio").')


class Type78(Enum):
    """
    The event type, must be `response.content_part.added`.
    """

    response_content_part_added = 'response.content_part.added'


class RealtimeServerEventResponseContentPartAdded(BaseModel):
    """
    Returned when a new content part is added to an assistant message item during
    response generation.

    """

    content_index: int = Field(
        ..., description="The index of the content part in the item's content array."
    )
    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(
        ..., description='The ID of the item to which the content part was added.'
    )
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    part: Part = Field(..., description='The content part that was added.')
    response_id: str = Field(..., description='The ID of the response.')
    type: Type78 = Field(
        ..., description='The event type, must be `response.content_part.added`.'
    )


class Part1(BaseModel):
    """
    The content part that is done.
    """

    audio: str | None = Field(
        None, description='Base64-encoded audio data (if type is "audio").'
    )
    text: str | None = Field(None, description='The text content (if type is "text").')
    transcript: str | None = Field(
        None, description='The transcript of the audio (if type is "audio").'
    )
    type: Type77 | None = Field(None, description='The content type ("text", "audio").')


class Type80(Enum):
    """
    The event type, must be `response.content_part.done`.
    """

    response_content_part_done = 'response.content_part.done'


class RealtimeServerEventResponseContentPartDone(BaseModel):
    """
    Returned when a content part is done streaming in an assistant message item.
    Also emitted when a Response is interrupted, incomplete, or cancelled.

    """

    content_index: int = Field(
        ..., description="The index of the content part in the item's content array."
    )
    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(..., description='The ID of the item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    part: Part1 = Field(..., description='The content part that is done.')
    response_id: str = Field(..., description='The ID of the response.')
    type: Type80 = Field(
        ..., description='The event type, must be `response.content_part.done`.'
    )


class Type81(Enum):
    """
    The event type, must be `response.created`.
    """

    response_created = 'response.created'


class RealtimeServerEventResponseCreated(BaseModel):
    """
    Returned when a new Response is created. The first event of response creation,
    where the response is in an initial state of `in_progress`.

    """

    event_id: str = Field(..., description='The unique ID of the server event.')
    response: RealtimeResponse
    type: Type81 = Field(..., description='The event type, must be `response.created`.')


class Type82(Enum):
    """
    The event type, must be `response.done`.
    """

    response_done = 'response.done'


class RealtimeServerEventResponseDone(BaseModel):
    """
    Returned when a Response is done streaming. Always emitted, no matter the
    final state. The Response object included in the `response.done` event will
    include all output Items in the Response but will omit the raw audio data.

    """

    event_id: str = Field(..., description='The unique ID of the server event.')
    response: RealtimeResponse
    type: Type82 = Field(..., description='The event type, must be `response.done`.')


class Type83(Enum):
    """
    The event type, must be `response.function_call_arguments.delta`.

    """

    response_function_call_arguments_delta = 'response.function_call_arguments.delta'


class RealtimeServerEventResponseFunctionCallArgumentsDelta(BaseModel):
    """
    Returned when the model-generated function call arguments are updated.

    """

    call_id: str = Field(..., description='The ID of the function call.')
    delta: str = Field(..., description='The arguments delta as a JSON string.')
    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(..., description='The ID of the function call item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    response_id: str = Field(..., description='The ID of the response.')
    type: Type83 = Field(
        ...,
        description='The event type, must be `response.function_call_arguments.delta`.\n',
    )


class Type84(Enum):
    """
    The event type, must be `response.function_call_arguments.done`.

    """

    response_function_call_arguments_done = 'response.function_call_arguments.done'


class RealtimeServerEventResponseFunctionCallArgumentsDone(BaseModel):
    """
    Returned when the model-generated function call arguments are done streaming.
    Also emitted when a Response is interrupted, incomplete, or cancelled.

    """

    arguments: str = Field(..., description='The final arguments as a JSON string.')
    call_id: str = Field(..., description='The ID of the function call.')
    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(..., description='The ID of the function call item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    response_id: str = Field(..., description='The ID of the response.')
    type: Type84 = Field(
        ...,
        description='The event type, must be `response.function_call_arguments.done`.\n',
    )


class Type85(Enum):
    """
    The event type, must be `response.output_item.added`.
    """

    response_output_item_added = 'response.output_item.added'


class RealtimeServerEventResponseOutputItemAdded(BaseModel):
    """
    Returned when a new Item is created during Response generation.
    """

    event_id: str = Field(..., description='The unique ID of the server event.')
    item: RealtimeConversationItem
    output_index: int = Field(
        ..., description='The index of the output item in the Response.'
    )
    response_id: str = Field(
        ..., description='The ID of the Response to which the item belongs.'
    )
    type: Type85 = Field(
        ..., description='The event type, must be `response.output_item.added`.'
    )


class Type86(Enum):
    """
    The event type, must be `response.output_item.done`.
    """

    response_output_item_done = 'response.output_item.done'


class RealtimeServerEventResponseOutputItemDone(BaseModel):
    """
    Returned when an Item is done streaming. Also emitted when a Response is
    interrupted, incomplete, or cancelled.

    """

    event_id: str = Field(..., description='The unique ID of the server event.')
    item: RealtimeConversationItem
    output_index: int = Field(
        ..., description='The index of the output item in the Response.'
    )
    response_id: str = Field(
        ..., description='The ID of the Response to which the item belongs.'
    )
    type: Type86 = Field(
        ..., description='The event type, must be `response.output_item.done`.'
    )


class Type87(Enum):
    """
    The event type, must be `response.text.delta`.
    """

    response_text_delta = 'response.text.delta'


class RealtimeServerEventResponseTextDelta(BaseModel):
    """
    Returned when the text value of a "text" content part is updated.
    """

    content_index: int = Field(
        ..., description="The index of the content part in the item's content array."
    )
    delta: str = Field(..., description='The text delta.')
    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(..., description='The ID of the item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    response_id: str = Field(..., description='The ID of the response.')
    type: Type87 = Field(
        ..., description='The event type, must be `response.text.delta`.'
    )


class Type88(Enum):
    """
    The event type, must be `response.text.done`.
    """

    response_text_done = 'response.text.done'


class RealtimeServerEventResponseTextDone(BaseModel):
    """
    Returned when the text value of a "text" content part is done streaming. Also
    emitted when a Response is interrupted, incomplete, or cancelled.

    """

    content_index: int = Field(
        ..., description="The index of the content part in the item's content array."
    )
    event_id: str = Field(..., description='The unique ID of the server event.')
    item_id: str = Field(..., description='The ID of the item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    response_id: str = Field(..., description='The ID of the response.')
    text: str = Field(..., description='The final text content.')
    type: Type88 = Field(
        ..., description='The event type, must be `response.text.done`.'
    )


class Type89(Enum):
    """
    The event type, must be `session.created`.
    """

    session_created = 'session.created'


class Type90(Enum):
    """
    The event type, must be `session.updated`.
    """

    session_updated = 'session.updated'


class InputAudioFormat(Enum):
    """
    The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
    For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,
    single channel (mono), and little-endian byte order.

    """

    pcm16 = 'pcm16'
    g711_ulaw = 'g711_ulaw'
    g711_alaw = 'g711_alaw'


class InputAudioTranscription(BaseModel):
    """
    Configuration for input audio transcription, defaults to off and can be
    set to `null` to turn off once on. Input audio transcription is not native
    to the model, since the model consumes audio directly. Transcription runs
    asynchronously through Whisper and should be treated as rough guidance
    rather than the representation understood by the model.

    """

    model: str | None = Field(
        None,
        description='The model to use for transcription, `whisper-1` is the only currently \nsupported model.\n',
    )


class Model12(Enum):
    """
    The Realtime model used for this session.

    """

    gpt_4o_realtime_preview = 'gpt-4o-realtime-preview'
    gpt_4o_realtime_preview_2024_10_01 = 'gpt-4o-realtime-preview-2024-10-01'
    gpt_4o_realtime_preview_2024_12_17 = 'gpt-4o-realtime-preview-2024-12-17'
    gpt_4o_mini_realtime_preview = 'gpt-4o-mini-realtime-preview'
    gpt_4o_mini_realtime_preview_2024_12_17 = 'gpt-4o-mini-realtime-preview-2024-12-17'


class OutputAudioFormat2(Enum):
    """
    The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
    For `pcm16`, output audio is sampled at a rate of 24kHz.

    """

    pcm16 = 'pcm16'
    g711_ulaw = 'g711_ulaw'
    g711_alaw = 'g711_alaw'


class Tool1(Tool):
    pass


class Type92(Enum):
    """
    Type of turn detection, only `server_vad` is currently supported.

    """

    server_vad = 'server_vad'


class TurnDetection(BaseModel):
    """
    Configuration for turn detection. Can be set to `null` to turn off. Server
    VAD means that the model will detect the start and end of speech based on
    audio volume and respond at the end of user speech.

    """

    prefix_padding_ms: int | None = Field(
        None,
        description='Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n',
    )
    silence_duration_ms: int | None = Field(
        None,
        description='Duration of silence to detect speech stop (in milliseconds). Defaults \nto 500ms. With shorter values the model will respond more quickly, \nbut may jump in on short pauses from the user.\n',
    )
    threshold: float | None = Field(
        None,
        description='Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require louder audio to activate the model, and \nthus might perform better in noisy environments.\n',
    )
    type: Type92 | None = Field(
        None,
        description='Type of turn detection, only `server_vad` is currently supported.\n',
    )


class RealtimeSession(BaseModel):
    """
    Realtime session object configuration.
    """

    id: str | None = Field(
        None, description='Unique identifier for the session object.\n'
    )
    input_audio_format: InputAudioFormat | None = Field(
        None,
        description='The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, \nsingle channel (mono), and little-endian byte order.\n',
    )
    input_audio_transcription: InputAudioTranscription | None = Field(
        None,
        description='Configuration for input audio transcription, defaults to off and can be \nset to `null` to turn off once on. Input audio transcription is not native \nto the model, since the model consumes audio directly. Transcription runs \nasynchronously through Whisper and should be treated as rough guidance \nrather than the representation understood by the model.\n',
    )
    instructions: str | None = Field(
        None,
        description='The default system instructions (i.e. system message) prepended to model \ncalls. This field allows the client to guide the model on desired \nresponses. The model can be instructed on response content and format, \n(e.g. "be extremely succinct", "act friendly", "here are examples of good \nresponses") and on audio behavior (e.g. "talk quickly", "inject emotion \ninto your voice", "laugh frequently"). The instructions are not guaranteed \nto be followed by the model, but they provide guidance to the model on the \ndesired behavior.\n\nNote that the server sets default instructions which will be used if this \nfield is not set and are visible in the `session.created` event at the \nstart of the session.\n',
    )
    max_response_output_tokens: int | MaxResponseOutputTokens | None = Field(
        None,
        description='Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n',
    )
    modalities: list[ChatCompletionModality] | None = Field(
        None,
        description='The set of modalities the model can respond with. To disable audio,\nset this to ["text"].\n',
    )
    model: str | Model12 | None = Field(
        None, description='The Realtime model used for this session.\n'
    )
    output_audio_format: OutputAudioFormat2 | None = Field(
        None,
        description='The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, output audio is sampled at a rate of 24kHz.\n',
    )
    temperature: float | None = Field(
        None,
        description='Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n',
    )
    tool_choice: str | None = Field(
        None,
        description='How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function.\n',
    )
    tools: list[Tool1] | None = Field(
        None, description='Tools (functions) available to the model.'
    )
    turn_detection: TurnDetection | None = Field(
        None,
        description='Configuration for turn detection. Can be set to `null` to turn off. Server \nVAD means that the model will detect the start and end of speech based on \naudio volume and respond at the end of user speech.\n',
    )
    voice: Voice3 | None = Field(
        None,
        description='The voice the model uses to respond. Voice cannot be changed during the \nsession once the model has responded with audio at least once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, \n`shimmer` and `verse`.\n',
    )


class InputAudioTranscription1(BaseModel):
    """
    Configuration for input audio transcription, defaults to off and can be  set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs  asynchronously through [OpenAI Whisper transcription](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as rough guidance rather than the representation understood by the model. The client can optionally set the language and prompt for transcription, these fields will be passed to the Whisper API.

    """

    language: str | None = Field(
        None,
        description='The language of the input audio. Supplying the input language in\n[ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format\nwill improve accuracy and latency.\n',
    )
    model: str | None = Field(
        None,
        description='The model to use for transcription, `whisper-1` is the only currently \nsupported model.\n',
    )
    prompt: str | None = Field(
        None,
        description="An optional text to guide the model's style or continue a previous audio\nsegment. The [prompt](/docs/guides/speech-to-text#prompting) should match\nthe audio language.\n",
    )


class Tool2(Tool):
    pass


class TurnDetection1(BaseModel):
    """
    Configuration for turn detection. Can be set to `null` to turn off. Server
    VAD means that the model will detect the start and end of speech based on
    audio volume and respond at the end of user speech.

    """

    create_response: bool = Field(
        True,
        description='Whether or not to automatically generate a response when VAD is\nenabled. `true` by default.\n',
    )
    prefix_padding_ms: int | None = Field(
        None,
        description='Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n',
    )
    silence_duration_ms: int | None = Field(
        None,
        description='Duration of silence to detect speech stop (in milliseconds). Defaults \nto 500ms. With shorter values the model will respond more quickly, \nbut may jump in on short pauses from the user.\n',
    )
    threshold: float | None = Field(
        None,
        description='Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require louder audio to activate the model, and \nthus might perform better in noisy environments.\n',
    )
    type: str | None = Field(
        None,
        description='Type of turn detection, only `server_vad` is currently supported.\n',
    )


class RealtimeSessionCreateRequest(BaseModel):
    """
    Realtime session object configuration.
    """

    input_audio_format: InputAudioFormat | None = Field(
        None,
        description='The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, \nsingle channel (mono), and little-endian byte order.\n',
    )
    input_audio_transcription: InputAudioTranscription1 | None = Field(
        None,
        description='Configuration for input audio transcription, defaults to off and can be  set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs  asynchronously through [OpenAI Whisper transcription](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as rough guidance rather than the representation understood by the model. The client can optionally set the language and prompt for transcription, these fields will be passed to the Whisper API.\n',
    )
    instructions: str | None = Field(
        None,
        description='The default system instructions (i.e. system message) prepended to model \ncalls. This field allows the client to guide the model on desired \nresponses. The model can be instructed on response content and format, \n(e.g. "be extremely succinct", "act friendly", "here are examples of good \nresponses") and on audio behavior (e.g. "talk quickly", "inject emotion \ninto your voice", "laugh frequently"). The instructions are not guaranteed \nto be followed by the model, but they provide guidance to the model on the \ndesired behavior.\n\nNote that the server sets default instructions which will be used if this \nfield is not set and are visible in the `session.created` event at the \nstart of the session.\n',
    )
    max_response_output_tokens: int | MaxResponseOutputTokens | None = Field(
        None,
        description='Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n',
    )
    modalities: list[ChatCompletionModality] | None = Field(
        None,
        description='The set of modalities the model can respond with. To disable audio,\nset this to ["text"].\n',
    )
    model: Model12 | None = Field(
        None, description='The Realtime model used for this session.\n'
    )
    output_audio_format: OutputAudioFormat2 | None = Field(
        None,
        description='The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, output audio is sampled at a rate of 24kHz.\n',
    )
    temperature: float | None = Field(
        None,
        description='Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n',
    )
    tool_choice: str | None = Field(
        None,
        description='How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function.\n',
    )
    tools: list[Tool2] | None = Field(
        None, description='Tools (functions) available to the model.'
    )
    turn_detection: TurnDetection1 | None = Field(
        None,
        description='Configuration for turn detection. Can be set to `null` to turn off. Server \nVAD means that the model will detect the start and end of speech based on \naudio volume and respond at the end of user speech.\n',
    )
    voice: Voice3 | None = Field(
        None,
        description='The voice the model uses to respond. Voice cannot be changed during the \nsession once the model has responded with audio at least once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, \n`shimmer` and `verse`.\n',
    )


class ClientSecret(BaseModel):
    """
    Ephemeral key returned by the API.
    """

    expires_at: int = Field(
        ...,
        description='Timestamp for when the token expires. Currently, all tokens expire\nafter one minute.\n',
    )
    value: str = Field(
        ...,
        description='Ephemeral key usable in client environments to authenticate connections\nto the Realtime API. Use this in client-side environments rather than\na standard API token, which should only be used server-side.\n',
    )


class InputAudioTranscription2(InputAudioTranscription):
    """
    Configuration for input audio transcription, defaults to off and can be
    set to `null` to turn off once on. Input audio transcription is not native
    to the model, since the model consumes audio directly. Transcription runs
    asynchronously through Whisper and should be treated as rough guidance
    rather than the representation understood by the model.

    """


class Tool3(Tool):
    pass


class TurnDetection2(BaseModel):
    """
    Configuration for turn detection. Can be set to `null` to turn off. Server
    VAD means that the model will detect the start and end of speech based on
    audio volume and respond at the end of user speech.

    """

    prefix_padding_ms: int | None = Field(
        None,
        description='Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n',
    )
    silence_duration_ms: int | None = Field(
        None,
        description='Duration of silence to detect speech stop (in milliseconds). Defaults \nto 500ms. With shorter values the model will respond more quickly, \nbut may jump in on short pauses from the user.\n',
    )
    threshold: float | None = Field(
        None,
        description='Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require louder audio to activate the model, and \nthus might perform better in noisy environments.\n',
    )
    type: str | None = Field(
        None,
        description='Type of turn detection, only `server_vad` is currently supported.\n',
    )


class RealtimeSessionCreateResponse(BaseModel):
    """
    A new Realtime session configuration, with an ephermeral key. Default TTL
    for keys is one minute.

    """

    client_secret: ClientSecret = Field(
        ..., description='Ephemeral key returned by the API.'
    )
    input_audio_format: str | None = Field(
        None,
        description='The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n',
    )
    input_audio_transcription: InputAudioTranscription2 | None = Field(
        None,
        description='Configuration for input audio transcription, defaults to off and can be \nset to `null` to turn off once on. Input audio transcription is not native \nto the model, since the model consumes audio directly. Transcription runs \nasynchronously through Whisper and should be treated as rough guidance \nrather than the representation understood by the model.\n',
    )
    instructions: str | None = Field(
        None,
        description='The default system instructions (i.e. system message) prepended to model \ncalls. This field allows the client to guide the model on desired \nresponses. The model can be instructed on response content and format, \n(e.g. "be extremely succinct", "act friendly", "here are examples of good \nresponses") and on audio behavior (e.g. "talk quickly", "inject emotion \ninto your voice", "laugh frequently"). The instructions are not guaranteed \nto be followed by the model, but they provide guidance to the model on the \ndesired behavior.\n\nNote that the server sets default instructions which will be used if this \nfield is not set and are visible in the `session.created` event at the \nstart of the session.\n',
    )
    max_response_output_tokens: int | MaxResponseOutputTokens | None = Field(
        None,
        description='Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n',
    )
    modalities: list[ChatCompletionModality] | None = Field(
        None,
        description='The set of modalities the model can respond with. To disable audio,\nset this to ["text"].\n',
    )
    output_audio_format: str | None = Field(
        None,
        description='The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n',
    )
    temperature: float | None = Field(
        None,
        description='Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n',
    )
    tool_choice: str | None = Field(
        None,
        description='How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function.\n',
    )
    tools: list[Tool3] | None = Field(
        None, description='Tools (functions) available to the model.'
    )
    turn_detection: TurnDetection2 | None = Field(
        None,
        description='Configuration for turn detection. Can be set to `null` to turn off. Server \nVAD means that the model will detect the start and end of speech based on \naudio volume and respond at the end of user speech.\n',
    )
    voice: Voice3 | None = Field(
        None,
        description='The voice the model uses to respond. Voice cannot be changed during the \nsession once the model has responded with audio at least once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, \n`shimmer` and `verse`.\n',
    )


class ReasoningEffort(Enum):
    """
    **o1 and o3-mini models only**

    Constrains effort on reasoning for
    [reasoning models](https://platform.openai.com/docs/guides/reasoning).
    Currently supported values are `low`, `medium`, and `high`. Reducing
    reasoning effort can result in faster responses and fewer tokens used
    on reasoning in a response.

    """

    low = 'low'
    medium = 'medium'
    high = 'high'


class Type95(Enum):
    """
    The type of response format being defined: `json_object`
    """

    json_object = 'json_object'


class ResponseFormatJsonObject(BaseModel):
    type: Type95 = Field(
        ..., description='The type of response format being defined: `json_object`'
    )


class Type96(Enum):
    """
    The type of response format being defined: `json_schema`
    """

    json_schema = 'json_schema'


class ResponseFormatJsonSchemaSchema(BaseModel):
    """
    The schema for the response format, described as a JSON Schema object.
    """

    model_config = ConfigDict(
        extra='allow',
    )


class Type97(Enum):
    """
    The type of response format being defined: `text`
    """

    text = 'text'


class ResponseFormatText(BaseModel):
    type: Type97 = Field(
        ..., description='The type of response format being defined: `text`'
    )


class RunCompletionUsage(BaseModel):
    """
    Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
    """

    completion_tokens: int = Field(
        ..., description='Number of completion tokens used over the course of the run.'
    )
    prompt_tokens: int = Field(
        ..., description='Number of prompt tokens used over the course of the run.'
    )
    total_tokens: int = Field(
        ..., description='Total number of tokens used (prompt + completion).'
    )


class Reason2(Enum):
    """
    The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
    """

    max_completion_tokens = 'max_completion_tokens'
    max_prompt_tokens = 'max_prompt_tokens'


class IncompleteDetails1(BaseModel):
    """
    Details on why the run is incomplete. Will be `null` if the run is not incomplete.
    """

    reason: Reason2 | None = Field(
        None,
        description='The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.',
    )


class Code(Enum):
    """
    One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
    """

    server_error = 'server_error'
    rate_limit_exceeded = 'rate_limit_exceeded'
    invalid_prompt = 'invalid_prompt'


class LastError(BaseModel):
    """
    The last error associated with this run. Will be `null` if there are no errors.
    """

    code: Code = Field(
        ...,
        description='One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.',
    )
    message: str = Field(..., description='A human-readable description of the error.')


class Object48(Enum):
    """
    The object type, which is always `thread.run`.
    """

    thread_run = 'thread.run'


class Type98(Enum):
    """
    For now, this is always `submit_tool_outputs`.
    """

    submit_tool_outputs = 'submit_tool_outputs'


class Status8(Enum):
    """
    The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
    """

    queued = 'queued'
    in_progress = 'in_progress'
    requires_action = 'requires_action'
    cancelling = 'cancelling'
    cancelled = 'cancelled'
    failed = 'failed'
    completed = 'completed'
    incomplete = 'incomplete'
    expired = 'expired'


class RunStepCompletionUsage(BaseModel):
    """
    Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
    """

    completion_tokens: int = Field(
        ...,
        description='Number of completion tokens used over the course of the run step.',
    )
    prompt_tokens: int = Field(
        ..., description='Number of prompt tokens used over the course of the run step.'
    )
    total_tokens: int = Field(
        ..., description='Total number of tokens used (prompt + completion).'
    )


class Object49(Enum):
    """
    The object type, which is always `thread.run.step.delta`.
    """

    thread_run_step_delta = 'thread.run.step.delta'


class MessageCreation(BaseModel):
    message_id: str | None = Field(
        None, description='The ID of the message that was created by this run step.'
    )


class Type99(Enum):
    """
    Always `message_creation`.
    """

    message_creation = 'message_creation'


class RunStepDeltaStepDetailsMessageCreationObject(BaseModel):
    """
    Details of the message creation by the run step.
    """

    message_creation: MessageCreation | None = None
    type: Type99 = Field(..., description='Always `message_creation`.')


class Type100(Enum):
    """
    The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
    """

    code_interpreter = 'code_interpreter'


class Image1(BaseModel):
    file_id: str | None = Field(
        None, description='The [file](/docs/api-reference/files) ID of the image.'
    )


class Type101(Enum):
    """
    Always `image`.
    """

    image = 'image'


class RunStepDeltaStepDetailsToolCallsCodeOutputImageObject(BaseModel):
    image: Image1 | None = None
    index: int = Field(..., description='The index of the output in the outputs array.')
    type: Type101 = Field(..., description='Always `image`.')


class Type102(Enum):
    """
    Always `logs`.
    """

    logs = 'logs'


class RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject(BaseModel):
    """
    Text output from the Code Interpreter tool call as part of a run step.
    """

    index: int = Field(..., description='The index of the output in the outputs array.')
    logs: str | None = Field(
        None, description='The text output from the Code Interpreter tool call.'
    )
    type: Type102 = Field(..., description='Always `logs`.')


class Type103(Enum):
    """
    The type of tool call. This is always going to be `file_search` for this type of tool call.
    """

    file_search = 'file_search'


class RunStepDeltaStepDetailsToolCallsFileSearchObject(BaseModel):
    file_search: dict[str, Any] = Field(
        ..., description='For now, this is always going to be an empty object.'
    )
    id: str | None = Field(None, description='The ID of the tool call object.')
    index: int = Field(
        ..., description='The index of the tool call in the tool calls array.'
    )
    type: Type103 = Field(
        ...,
        description='The type of tool call. This is always going to be `file_search` for this type of tool call.',
    )


class Function4(BaseModel):
    """
    The definition of the function that was called.
    """

    arguments: str | None = Field(
        None, description='The arguments passed to the function.'
    )
    name: str | None = Field(None, description='The name of the function.')
    output: str | None = Field(
        None,
        description='The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.',
    )


class Type104(Enum):
    """
    The type of tool call. This is always going to be `function` for this type of tool call.
    """

    function = 'function'


class RunStepDeltaStepDetailsToolCallsFunctionObject(BaseModel):
    function: Function4 | None = Field(
        None, description='The definition of the function that was called.'
    )
    id: str | None = Field(None, description='The ID of the tool call object.')
    index: int = Field(
        ..., description='The index of the tool call in the tool calls array.'
    )
    type: Type104 = Field(
        ...,
        description='The type of tool call. This is always going to be `function` for this type of tool call.',
    )


class Type105(Enum):
    """
    Always `tool_calls`.
    """

    tool_calls = 'tool_calls'


class MessageCreation1(BaseModel):
    message_id: str = Field(
        ..., description='The ID of the message that was created by this run step.'
    )


class RunStepDetailsMessageCreationObject(BaseModel):
    """
    Details of the message creation by the run step.
    """

    message_creation: MessageCreation1
    type: Type99 = Field(..., description='Always `message_creation`.')


class Image2(BaseModel):
    file_id: str = Field(
        ..., description='The [file](/docs/api-reference/files) ID of the image.'
    )


class RunStepDetailsToolCallsCodeOutputImageObject(BaseModel):
    image: Image2
    type: Type101 = Field(..., description='Always `image`.')


class RunStepDetailsToolCallsCodeOutputLogsObject(BaseModel):
    """
    Text output from the Code Interpreter tool call as part of a run step.
    """

    logs: str = Field(
        ..., description='The text output from the Code Interpreter tool call.'
    )
    type: Type102 = Field(..., description='Always `logs`.')


class Ranker1(Enum):
    """
    The ranker used for the file search.
    """

    default_2024_08_21 = 'default_2024_08_21'


class RunStepDetailsToolCallsFileSearchRankingOptionsObject(BaseModel):
    """
    The ranking options for the file search.
    """

    ranker: Ranker1 = Field(..., description='The ranker used for the file search.')
    score_threshold: float = Field(
        ...,
        description='The score threshold for the file search. All values must be a floating point number between 0 and 1.',
        ge=0.0,
        le=1.0,
    )


class Type111(Enum):
    """
    The type of the content.
    """

    text = 'text'


class ContentItem2(BaseModel):
    text: str | None = Field(None, description='The text content of the file.')
    type: Type111 | None = Field(None, description='The type of the content.')


class RunStepDetailsToolCallsFileSearchResultObject(BaseModel):
    """
    A result instance of the file search.
    """

    content: list[ContentItem2] | None = Field(
        None,
        description='The content of the result that was found. The content is only included if requested via the include query parameter.',
    )
    file_id: str = Field(
        ..., description='The ID of the file that result was found in.'
    )
    file_name: str = Field(
        ..., description='The name of the file that result was found in.'
    )
    score: float = Field(
        ...,
        description='The score of the result. All values must be a floating point number between 0 and 1.',
        ge=0.0,
        le=1.0,
    )


class Function5(BaseModel):
    """
    The definition of the function that was called.
    """

    arguments: str = Field(..., description='The arguments passed to the function.')
    name: str = Field(..., description='The name of the function.')
    output: str | None = Field(
        ...,
        description='The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.',
    )


class RunStepDetailsToolCallsFunctionObject(BaseModel):
    function: Function5 = Field(
        ..., description='The definition of the function that was called.'
    )
    id: str = Field(..., description='The ID of the tool call object.')
    type: Type104 = Field(
        ...,
        description='The type of tool call. This is always going to be `function` for this type of tool call.',
    )


class Code1(Enum):
    """
    One of `server_error` or `rate_limit_exceeded`.
    """

    server_error = 'server_error'
    rate_limit_exceeded = 'rate_limit_exceeded'


class LastError1(BaseModel):
    """
    The last error associated with this run step. Will be `null` if there are no errors.
    """

    code: Code1 = Field(
        ..., description='One of `server_error` or `rate_limit_exceeded`.'
    )
    message: str = Field(..., description='A human-readable description of the error.')


class Object50(Enum):
    """
    The object type, which is always `thread.run.step`.
    """

    thread_run_step = 'thread.run.step'


class Status9(Enum):
    """
    The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
    """

    in_progress = 'in_progress'
    cancelled = 'cancelled'
    failed = 'failed'
    completed = 'completed'
    expired = 'expired'


class Type114(Enum):
    """
    The type of run step, which can be either `message_creation` or `tool_calls`.
    """

    message_creation = 'message_creation'
    tool_calls = 'tool_calls'


class Event7(Enum):
    thread_run_step_created = 'thread.run.step.created'


class Event8(Enum):
    thread_run_step_in_progress = 'thread.run.step.in_progress'


class Event9(Enum):
    thread_run_step_delta = 'thread.run.step.delta'


class Event10(Enum):
    thread_run_step_completed = 'thread.run.step.completed'


class Event11(Enum):
    thread_run_step_failed = 'thread.run.step.failed'


class Event12(Enum):
    thread_run_step_cancelled = 'thread.run.step.cancelled'


class Event13(Enum):
    thread_run_step_expired = 'thread.run.step.expired'


class Event14(Enum):
    thread_run_created = 'thread.run.created'


class Event15(Enum):
    thread_run_queued = 'thread.run.queued'


class Event16(Enum):
    thread_run_in_progress = 'thread.run.in_progress'


class Event17(Enum):
    thread_run_requires_action = 'thread.run.requires_action'


class Event18(Enum):
    thread_run_completed = 'thread.run.completed'


class Event19(Enum):
    thread_run_incomplete = 'thread.run.incomplete'


class Event20(Enum):
    thread_run_failed = 'thread.run.failed'


class Event21(Enum):
    thread_run_cancelling = 'thread.run.cancelling'


class Event22(Enum):
    thread_run_cancelled = 'thread.run.cancelled'


class Event23(Enum):
    thread_run_expired = 'thread.run.expired'


class Function6(BaseModel):
    """
    The function definition.
    """

    arguments: str = Field(
        ...,
        description='The arguments that the model expects you to pass to the function.',
    )
    name: str = Field(..., description='The name of the function.')


class Type115(Enum):
    """
    The type of tool call the output is required for. For now, this is always `function`.
    """

    function = 'function'


class RunToolCallObject(BaseModel):
    """
    Tool call objects
    """

    function: Function6 = Field(..., description='The function definition.')
    id: str = Field(
        ...,
        description='The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.',
    )
    type: Type115 = Field(
        ...,
        description='The type of tool call the output is required for. For now, this is always `function`.',
    )


class StaticChunkingStrategy(Static):
    pass


class StaticChunkingStrategyRequestParam(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    static: StaticChunkingStrategy
    type: Type17 = Field(..., description='Always `static`.')


class StaticChunkingStrategyResponseParam(StaticChunkingStrategyRequestParam):
    pass


class ToolOutput(BaseModel):
    output: str | None = Field(
        None,
        description='The output of the tool call to be submitted to continue the run.',
    )
    tool_call_id: str | None = Field(
        None,
        description='The ID of the tool call in the `required_action` object within the run object the output is being submitted for.',
    )


class SubmitToolOutputsRunRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    stream: bool | None = Field(
        None,
        description='If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n',
    )
    tool_outputs: list[ToolOutput] = Field(
        ..., description='A list of tools for which the outputs are being submitted.'
    )


class Object51(Enum):
    """
    The object type, which is always `thread`.
    """

    thread = 'thread'


class ToolResources6(ToolResources5):
    """
    A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """


class ThreadObject(BaseModel):
    """
    Represents a thread that contains [messages](/docs/api-reference/messages).
    """

    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the thread was created.',
    )
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints.'
    )
    metadata: Metadata
    object: Object51 = Field(
        ..., description='The object type, which is always `thread`.'
    )
    tool_resources: ToolResources6 | None = Field(
        ...,
        description="A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
    )


class Event24(Enum):
    thread_created = 'thread.created'


class ThreadStreamEvent1(BaseModel):
    """
    Occurs when a new [thread](/docs/api-reference/threads/object) is created.
    """

    data: ThreadObject
    enabled: bool | None = Field(
        None, description='Whether to enable input audio transcription.'
    )
    event: Event24


class ThreadStreamEvent(RootModel[ThreadStreamEvent1]):
    root: ThreadStreamEvent1


class TranscriptionSegment(BaseModel):
    avg_logprob: float = Field(
        ...,
        description='Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.',
    )
    compression_ratio: float = Field(
        ...,
        description='Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.',
    )
    end: float = Field(..., description='End time of the segment in seconds.')
    id: int = Field(..., description='Unique identifier of the segment.')
    no_speech_prob: float = Field(
        ...,
        description='Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.',
    )
    seek: int = Field(..., description='Seek offset of the segment.')
    start: float = Field(..., description='Start time of the segment in seconds.')
    temperature: float = Field(
        ..., description='Temperature parameter used for generating the segment.'
    )
    text: str = Field(..., description='Text content of the segment.')
    tokens: list[int] = Field(
        ..., description='Array of token IDs for the text content.'
    )


class TranscriptionWord(BaseModel):
    end: float = Field(..., description='End time of the word in seconds.')
    start: float = Field(..., description='Start time of the word in seconds.')
    word: str = Field(..., description='The text content of the word.')


class Type118(Enum):
    """
    The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
    """

    auto = 'auto'
    last_messages = 'last_messages'


class TruncationObject(BaseModel):
    """
    Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.
    """

    last_messages: int | None = Field(
        None,
        description='The number of most recent messages from the thread when constructing the context for the run.',
        ge=1,
    )
    type: Type118 = Field(
        ...,
        description='The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.',
    )


class Object52(Enum):
    """
    The object type, which is always "upload".
    """

    upload = 'upload'


class Status10(Enum):
    """
    The status of the Upload.
    """

    pending = 'pending'
    completed = 'completed'
    cancelled = 'cancelled'
    expired = 'expired'


class Upload(BaseModel):
    """
    The Upload object can accept byte chunks in the form of Parts.

    """

    bytes: int = Field(..., description='The intended number of bytes to be uploaded.')
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the Upload was created.',
    )
    expires_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the Upload was created.',
    )
    file: OpenAIFile | None = None
    filename: str = Field(..., description='The name of the file to be uploaded.')
    id: str = Field(
        ...,
        description='The Upload unique identifier, which can be referenced in API endpoints.',
    )
    object: Object52 | None = Field(
        None, description='The object type, which is always "upload".'
    )
    purpose: str = Field(
        ...,
        description='The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values.',
    )
    status: Status10 = Field(..., description='The status of the Upload.')


class Object53(Enum):
    """
    The object type, which is always `upload.part`.
    """

    upload_part = 'upload.part'


class UploadPart(BaseModel):
    """
    The upload Part represents a chunk of bytes we can add to an Upload object.

    """

    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the Part was created.',
    )
    id: str = Field(
        ...,
        description='The upload Part unique identifier, which can be referenced in API endpoints.',
    )
    object: Object53 = Field(
        ..., description='The object type, which is always `upload.part`.'
    )
    upload_id: str = Field(
        ..., description='The ID of the Upload object that this Part was added to.'
    )


class Object54(Enum):
    organization_usage_audio_speeches_result = (
        'organization.usage.audio_speeches.result'
    )


class UsageAudioSpeechesResult(BaseModel):
    """
    The aggregated audio speeches usage details of the specific time bucket.
    """

    api_key_id: str | None = Field(
        None,
        description='When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.',
    )
    characters: int = Field(..., description='The number of characters processed.')
    model: str | None = Field(
        None,
        description='When `group_by=model`, this field provides the model name of the grouped usage result.',
    )
    num_model_requests: int = Field(
        ..., description='The count of requests made to the model.'
    )
    object: Object54
    project_id: str | None = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped usage result.',
    )
    user_id: str | None = Field(
        None,
        description='When `group_by=user_id`, this field provides the user ID of the grouped usage result.',
    )


class Object55(Enum):
    organization_usage_audio_transcriptions_result = (
        'organization.usage.audio_transcriptions.result'
    )


class UsageAudioTranscriptionsResult(BaseModel):
    """
    The aggregated audio transcriptions usage details of the specific time bucket.
    """

    api_key_id: str | None = Field(
        None,
        description='When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.',
    )
    model: str | None = Field(
        None,
        description='When `group_by=model`, this field provides the model name of the grouped usage result.',
    )
    num_model_requests: int = Field(
        ..., description='The count of requests made to the model.'
    )
    object: Object55
    project_id: str | None = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped usage result.',
    )
    seconds: int = Field(..., description='The number of seconds processed.')
    user_id: str | None = Field(
        None,
        description='When `group_by=user_id`, this field provides the user ID of the grouped usage result.',
    )


class Object56(Enum):
    organization_usage_code_interpreter_sessions_result = (
        'organization.usage.code_interpreter_sessions.result'
    )


class UsageCodeInterpreterSessionsResult(BaseModel):
    """
    The aggregated code interpreter sessions usage details of the specific time bucket.
    """

    num_sessions: int | None = Field(
        None, description='The number of code interpreter sessions.'
    )
    object: Object56
    project_id: str | None = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped usage result.',
    )


class Object57(Enum):
    organization_usage_completions_result = 'organization.usage.completions.result'


class UsageCompletionsResult(BaseModel):
    """
    The aggregated completions usage details of the specific time bucket.
    """

    api_key_id: str | None = Field(
        None,
        description='When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.',
    )
    batch: bool | None = Field(
        None,
        description='When `group_by=batch`, this field tells whether the grouped usage result is batch or not.',
    )
    input_audio_tokens: int | None = Field(
        None,
        description='The aggregated number of audio input tokens used, including cached tokens.',
    )
    input_cached_tokens: int | None = Field(
        None,
        description='The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens.',
    )
    input_tokens: int = Field(
        ...,
        description='The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens.',
    )
    model: str | None = Field(
        None,
        description='When `group_by=model`, this field provides the model name of the grouped usage result.',
    )
    num_model_requests: int = Field(
        ..., description='The count of requests made to the model.'
    )
    object: Object57
    output_audio_tokens: int | None = Field(
        None, description='The aggregated number of audio output tokens used.'
    )
    output_tokens: int = Field(
        ...,
        description='The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens.',
    )
    project_id: str | None = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped usage result.',
    )
    user_id: str | None = Field(
        None,
        description='When `group_by=user_id`, this field provides the user ID of the grouped usage result.',
    )


class Object58(Enum):
    organization_usage_embeddings_result = 'organization.usage.embeddings.result'


class UsageEmbeddingsResult(BaseModel):
    """
    The aggregated embeddings usage details of the specific time bucket.
    """

    api_key_id: str | None = Field(
        None,
        description='When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.',
    )
    input_tokens: int = Field(
        ..., description='The aggregated number of input tokens used.'
    )
    model: str | None = Field(
        None,
        description='When `group_by=model`, this field provides the model name of the grouped usage result.',
    )
    num_model_requests: int = Field(
        ..., description='The count of requests made to the model.'
    )
    object: Object58
    project_id: str | None = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped usage result.',
    )
    user_id: str | None = Field(
        None,
        description='When `group_by=user_id`, this field provides the user ID of the grouped usage result.',
    )


class Object59(Enum):
    organization_usage_images_result = 'organization.usage.images.result'


class UsageImagesResult(BaseModel):
    """
    The aggregated images usage details of the specific time bucket.
    """

    api_key_id: str | None = Field(
        None,
        description='When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.',
    )
    images: int = Field(..., description='The number of images processed.')
    model: str | None = Field(
        None,
        description='When `group_by=model`, this field provides the model name of the grouped usage result.',
    )
    num_model_requests: int = Field(
        ..., description='The count of requests made to the model.'
    )
    object: Object59
    project_id: str | None = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped usage result.',
    )
    size: str | None = Field(
        None,
        description='When `group_by=size`, this field provides the image size of the grouped usage result.',
    )
    source: str | None = Field(
        None,
        description='When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`.',
    )
    user_id: str | None = Field(
        None,
        description='When `group_by=user_id`, this field provides the user ID of the grouped usage result.',
    )


class Object60(Enum):
    organization_usage_moderations_result = 'organization.usage.moderations.result'


class UsageModerationsResult(BaseModel):
    """
    The aggregated moderations usage details of the specific time bucket.
    """

    api_key_id: str | None = Field(
        None,
        description='When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.',
    )
    input_tokens: int = Field(
        ..., description='The aggregated number of input tokens used.'
    )
    model: str | None = Field(
        None,
        description='When `group_by=model`, this field provides the model name of the grouped usage result.',
    )
    num_model_requests: int = Field(
        ..., description='The count of requests made to the model.'
    )
    object: Object60
    project_id: str | None = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped usage result.',
    )
    user_id: str | None = Field(
        None,
        description='When `group_by=user_id`, this field provides the user ID of the grouped usage result.',
    )


class Object61(Enum):
    page = 'page'


class Object62(Enum):
    bucket = 'bucket'


class Object63(Enum):
    organization_usage_vector_stores_result = 'organization.usage.vector_stores.result'


class UsageVectorStoresResult(BaseModel):
    """
    The aggregated vector stores usage details of the specific time bucket.
    """

    object: Object63
    project_id: str | None = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped usage result.',
    )
    usage_bytes: int = Field(..., description='The vector stores usage in bytes.')


class Object64(Enum):
    """
    The object type, which is always `organization.user`
    """

    organization_user = 'organization.user'


class User(BaseModel):
    """
    Represents an individual `user` within an organization.
    """

    added_at: int = Field(
        ..., description='The Unix timestamp (in seconds) of when the user was added.'
    )
    email: str = Field(..., description='The email address of the user')
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints'
    )
    name: str = Field(..., description='The name of the user')
    object: Object64 = Field(
        ..., description='The object type, which is always `organization.user`'
    )
    role: Role9 = Field(..., description='`owner` or `reader`')


class Object65(Enum):
    organization_user_deleted = 'organization.user.deleted'


class UserDeleteResponse(BaseModel):
    deleted: bool
    id: str
    object: Object65


class UserListResponse(BaseModel):
    data: list[User]
    first_id: str
    has_more: bool
    last_id: str
    object: Object21


class UserRoleUpdateRequest(BaseModel):
    role: Role9 = Field(..., description='`owner` or `reader`')


class Anchor(Enum):
    """
    Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
    """

    last_active_at = 'last_active_at'


class VectorStoreExpirationAfter(BaseModel):
    """
    The expiration policy for a vector store.
    """

    anchor: Anchor = Field(
        ...,
        description='Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.',
    )
    days: int = Field(
        ...,
        description='The number of days after the anchor time that the vector store will expire.',
        ge=1,
        le=365,
    )


class FileCounts(BaseModel):
    cancelled: int = Field(..., description='The number of files that where cancelled.')
    completed: int = Field(
        ..., description='The number of files that have been processed.'
    )
    failed: int = Field(
        ..., description='The number of files that have failed to process.'
    )
    in_progress: int = Field(
        ..., description='The number of files that are currently being processed.'
    )
    total: int = Field(..., description='The total number of files.')


class Object67(Enum):
    """
    The object type, which is always `vector_store.file_batch`.
    """

    vector_store_files_batch = 'vector_store.files_batch'


class Status11(Enum):
    """
    The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
    """

    in_progress = 'in_progress'
    completed = 'completed'
    cancelled = 'cancelled'
    failed = 'failed'


class VectorStoreFileBatchObject(BaseModel):
    """
    A batch of files attached to a vector store.
    """

    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the vector store files batch was created.',
    )
    file_counts: FileCounts
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints.'
    )
    object: Object67 = Field(
        ..., description='The object type, which is always `vector_store.file_batch`.'
    )
    status: Status11 = Field(
        ...,
        description='The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.',
    )
    vector_store_id: str = Field(
        ...,
        description='The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.',
    )


class Code2(Enum):
    """
    One of `server_error` or `rate_limit_exceeded`.
    """

    server_error = 'server_error'
    unsupported_file = 'unsupported_file'
    invalid_file = 'invalid_file'


class LastError2(BaseModel):
    """
    The last error associated with this vector store file. Will be `null` if there are no errors.
    """

    code: Code2 = Field(
        ..., description='One of `server_error` or `rate_limit_exceeded`.'
    )
    message: str = Field(..., description='A human-readable description of the error.')


class Object68(Enum):
    """
    The object type, which is always `vector_store.file`.
    """

    vector_store_file = 'vector_store.file'


class Status12(Enum):
    """
    The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
    """

    in_progress = 'in_progress'
    completed = 'completed'
    cancelled = 'cancelled'
    failed = 'failed'


class VectorStoreFileObject(BaseModel):
    """
    A list of files attached to a vector store.
    """

    chunking_strategy: (
        StaticChunkingStrategyResponseParam | OtherChunkingStrategyResponseParam | None
    ) = Field(None, description='The strategy used to chunk the file.')
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the vector store file was created.',
    )
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints.'
    )
    last_error: LastError2 | None = Field(
        ...,
        description='The last error associated with this vector store file. Will be `null` if there are no errors.',
    )
    object: Object68 = Field(
        ..., description='The object type, which is always `vector_store.file`.'
    )
    status: Status12 = Field(
        ...,
        description='The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.',
    )
    usage_bytes: int = Field(
        ...,
        description='The total vector store usage in bytes. Note that this may be different from the original file size.',
    )
    vector_store_id: str = Field(
        ...,
        description='The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.',
    )


class FileCounts1(BaseModel):
    cancelled: int = Field(..., description='The number of files that were cancelled.')
    completed: int = Field(
        ..., description='The number of files that have been successfully processed.'
    )
    failed: int = Field(
        ..., description='The number of files that have failed to process.'
    )
    in_progress: int = Field(
        ..., description='The number of files that are currently being processed.'
    )
    total: int = Field(..., description='The total number of files.')


class Object69(Enum):
    """
    The object type, which is always `vector_store`.
    """

    vector_store = 'vector_store'


class Status13(Enum):
    """
    The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
    """

    expired = 'expired'
    in_progress = 'in_progress'
    completed = 'completed'


class VectorStoreObject(BaseModel):
    """
    A vector store is a collection of processed files can be used by the `file_search` tool.
    """

    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the vector store was created.',
    )
    expires_after: VectorStoreExpirationAfter | None = None
    expires_at: int | None = Field(
        None,
        description='The Unix timestamp (in seconds) for when the vector store will expire.',
    )
    file_counts: FileCounts1
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints.'
    )
    last_active_at: int | None = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the vector store was last active.',
    )
    metadata: Metadata
    name: str = Field(..., description='The name of the vector store.')
    object: Object69 = Field(
        ..., description='The object type, which is always `vector_store`.'
    )
    status: Status13 = Field(
        ...,
        description='The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.',
    )
    usage_bytes: int = Field(
        ...,
        description='The total number of bytes used by the files in the vector store.',
    )


class ChatCompletionRequestFunctionMessage(RootModel[Any]):
    root: Any


class FileSearch1(BaseModel):
    """
    Overrides for the file search tool.
    """

    max_num_results: int | None = Field(
        None,
        description='The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n',
        ge=1,
        le=50,
    )
    ranking_options: FileSearchRankingOptions | None = None


class AssistantToolsFileSearch(BaseModel):
    file_search: FileSearch1 | None = Field(
        None, description='Overrides for the file search tool.'
    )
    type: Type1 = Field(
        ..., description='The type of tool being defined: `file_search`'
    )


class AssistantsApiToolChoiceOption(
    RootModel[AssistantsApiToolChoiceOption1 | AssistantsNamedToolChoice]
):
    root: AssistantsApiToolChoiceOption1 | AssistantsNamedToolChoice = Field(
        ...,
        description='Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools before responding to the user.\nSpecifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.\n',
    )


class AuditLogActorApiKey(BaseModel):
    """
    The API Key used to perform the audit logged action.
    """

    id: str | None = Field(None, description='The tracking id of the API key.')
    service_account: AuditLogActorServiceAccount | None = None
    type: Type6 | None = Field(
        None,
        description='The type of API key. Can be either `user` or `service_account`.',
    )
    user: AuditLogActorUser | None = None


class AuditLogActorSession(BaseModel):
    """
    The session in which the audit logged action was performed.
    """

    ip_address: str | None = Field(
        None, description='The IP address from which the action was performed.'
    )
    user: AuditLogActorUser | None = None


class Batch(BaseModel):
    cancelled_at: int | None = Field(
        None,
        description='The Unix timestamp (in seconds) for when the batch was cancelled.',
    )
    cancelling_at: int | None = Field(
        None,
        description='The Unix timestamp (in seconds) for when the batch started cancelling.',
    )
    completed_at: int | None = Field(
        None,
        description='The Unix timestamp (in seconds) for when the batch was completed.',
    )
    completion_window: str = Field(
        ..., description='The time frame within which the batch should be processed.'
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the batch was created.',
    )
    endpoint: str = Field(..., description='The OpenAI API endpoint used by the batch.')
    error_file_id: str | None = Field(
        None,
        description='The ID of the file containing the outputs of requests with errors.',
    )
    errors: Errors | None = None
    expired_at: int | None = Field(
        None, description='The Unix timestamp (in seconds) for when the batch expired.'
    )
    expires_at: int | None = Field(
        None,
        description='The Unix timestamp (in seconds) for when the batch will expire.',
    )
    failed_at: int | None = Field(
        None, description='The Unix timestamp (in seconds) for when the batch failed.'
    )
    finalizing_at: int | None = Field(
        None,
        description='The Unix timestamp (in seconds) for when the batch started finalizing.',
    )
    id: str
    in_progress_at: int | None = Field(
        None,
        description='The Unix timestamp (in seconds) for when the batch started processing.',
    )
    input_file_id: str = Field(
        ..., description='The ID of the input file for the batch.'
    )
    metadata: Metadata | None = None
    object: Object1 = Field(
        ..., description='The object type, which is always `batch`.'
    )
    output_file_id: str | None = Field(
        None,
        description='The ID of the file containing the outputs of successfully executed requests.',
    )
    request_counts: RequestCounts | None = Field(
        None, description='The request counts for different statuses within the batch.'
    )
    status: Status = Field(..., description='The current status of the batch.')


class ChatCompletionRequestAssistantMessageContentPart(
    RootModel[
        ChatCompletionRequestMessageContentPartText
        | ChatCompletionRequestMessageContentPartRefusal
    ]
):
    root: (
        ChatCompletionRequestMessageContentPartText
        | ChatCompletionRequestMessageContentPartRefusal
    )


class Content1(RootModel[list[ChatCompletionRequestMessageContentPartText]]):
    root: list[ChatCompletionRequestMessageContentPartText] = Field(
        ...,
        description='An array of content parts with a defined type. For developer messages, only type `text` is supported.',
        min_length=1,
        title='Array of content parts',
    )


class ChatCompletionRequestDeveloperMessage(BaseModel):
    """
    Developer-provided instructions that the model should follow, regardless of
    messages sent by the user. With o1 models and newer, `developer` messages
    replace the previous `system` messages.

    """

    content: str | Content1 = Field(
        ..., description='The contents of the developer message.'
    )
    name: str | None = Field(
        None,
        description='An optional name for the participant. Provides the model information to differentiate between participants of the same role.',
    )
    role: Role1 = Field(
        ..., description='The role of the messages author, in this case `developer`.'
    )


class Content2(RootModel[list[ChatCompletionRequestSystemMessageContentPart]]):
    root: list[ChatCompletionRequestSystemMessageContentPart] = Field(
        ...,
        description='An array of content parts with a defined type. For system messages, only type `text` is supported.',
        min_length=1,
        title='Array of content parts',
    )


class ChatCompletionRequestSystemMessage(BaseModel):
    """
    Developer-provided instructions that the model should follow, regardless of
    messages sent by the user. With o1 models and newer, use `developer` messages
    for this purpose instead.

    """

    content: str | Content2 = Field(
        ..., description='The contents of the system message.'
    )
    name: str | None = Field(
        None,
        description='An optional name for the participant. Provides the model information to differentiate between participants of the same role.',
    )
    role: Role2 = Field(
        ..., description='The role of the messages author, in this case `system`.'
    )


class Content3(RootModel[list[ChatCompletionRequestToolMessageContentPart]]):
    root: list[ChatCompletionRequestToolMessageContentPart] = Field(
        ...,
        description='An array of content parts with a defined type. For tool messages, only type `text` is supported.',
        min_length=1,
        title='Array of content parts',
    )


class ChatCompletionRequestToolMessage(BaseModel):
    content: str | Content3 = Field(
        ..., description='The contents of the tool message.'
    )
    role: Role3 = Field(
        ..., description='The role of the messages author, in this case `tool`.'
    )
    tool_call_id: str = Field(
        ..., description='Tool call that this message is responding to.'
    )


class Content4(RootModel[list[ChatCompletionRequestUserMessageContentPart]]):
    root: list[ChatCompletionRequestUserMessageContentPart] = Field(
        ...,
        description='An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text, image, or audio inputs.',
        min_length=1,
        title='Array of content parts',
    )


class ChatCompletionRequestUserMessage(BaseModel):
    """
    Messages sent by an end user, containing prompts or additional context
    information.

    """

    content: str | Content4 = Field(
        ..., description='The contents of the user message.\n'
    )
    name: str | None = Field(
        None,
        description='An optional name for the participant. Provides the model information to differentiate between participants of the same role.',
    )
    role: Role4 = Field(
        ..., description='The role of the messages author, in this case `user`.'
    )


class ChunkingStrategyRequestParam(
    RootModel[AutoChunkingStrategyRequestParam | StaticChunkingStrategyRequestParam]
):
    root: AutoChunkingStrategyRequestParam | StaticChunkingStrategyRequestParam = Field(
        ...,
        description='The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.',
    )


class VectorStore(BaseModel):
    chunking_strategy: ChunkingStrategy | ChunkingStrategy1 | None = Field(
        None,
        description='The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.',
    )
    file_ids: list[str] | None = Field(
        None,
        description='A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n',
        max_length=10000,
    )
    metadata: Metadata | None = None


class FileSearch2(BaseModel):
    vector_store_ids: list[str] = Field(
        ...,
        description='The [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n',
        max_length=1,
    )
    vector_stores: list[VectorStore] | None = Field(
        None,
        description='A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n',
        max_length=1,
    )


class VectorStore1(BaseModel):
    chunking_strategy: ChunkingStrategy2 | ChunkingStrategy3 | None = Field(
        None,
        description='The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.',
    )
    file_ids: list[str] | None = Field(
        None,
        description='A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n',
        max_length=10000,
    )
    metadata: Metadata | None = None


class FileSearch3(BaseModel):
    vector_store_ids: list[str] | None = Field(
        None,
        description='The [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n',
        max_length=1,
    )
    vector_stores: list[VectorStore1] = Field(
        ...,
        description='A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n',
        max_length=1,
    )


class ToolResources1(BaseModel):
    """
    A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """

    code_interpreter: CodeInterpreter1 | None = None
    file_search: FileSearch2 | FileSearch3 | None = None


class CreateEmbeddingResponse(BaseModel):
    data: list[Embedding] = Field(
        ..., description='The list of embeddings generated by the model.'
    )
    model: str = Field(
        ..., description='The name of the model used to generate the embedding.'
    )
    object: Object7 = Field(..., description='The object type, which is always "list".')
    usage: Usage1 = Field(..., description='The usage information for the request.')


class Content5(
    RootModel[
        list[
            MessageContentImageFileObject
            | MessageContentImageUrlObject
            | MessageRequestContentTextObject
        ]
    ]
):
    root: list[
        MessageContentImageFileObject
        | MessageContentImageUrlObject
        | MessageRequestContentTextObject
    ] = Field(
        ...,
        description='An array of content parts with a defined type, each can be of type `text` or images can be passed with `image_url` or `image_file`. Image types are only supported on [Vision-compatible models](/docs/models).',
        min_length=1,
        title='Array of content parts',
    )


class CreateMessageRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    attachments: list[Attachment] | None = Field(
        None,
        description='A list of files attached to the message, and the tools they should be added to.',
    )
    content: str | Content5
    metadata: Metadata | None = None
    role: Role7 = Field(
        ...,
        description='The role of the entity that is creating the message. Allowed values include:\n- `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n- `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.\n',
    )


class VectorStore2(BaseModel):
    chunking_strategy: ChunkingStrategy4 | ChunkingStrategy5 | None = Field(
        None,
        description='The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.',
    )
    file_ids: list[str] | None = Field(
        None,
        description='A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n',
        max_length=10000,
    )
    metadata: Metadata | None = None


class FileSearch5(BaseModel):
    vector_store_ids: list[str] = Field(
        ...,
        description='The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n',
        max_length=1,
    )
    vector_stores: list[VectorStore2] | None = Field(
        None,
        description='A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.\n',
        max_length=1,
    )


class VectorStore3(BaseModel):
    chunking_strategy: ChunkingStrategy6 | ChunkingStrategy7 | None = Field(
        None,
        description='The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.',
    )
    file_ids: list[str] | None = Field(
        None,
        description='A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n',
        max_length=10000,
    )
    metadata: Metadata | None = None


class FileSearch6(BaseModel):
    vector_store_ids: list[str] | None = Field(
        None,
        description='The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n',
        max_length=1,
    )
    vector_stores: list[VectorStore3] = Field(
        ...,
        description='A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.\n',
        max_length=1,
    )


class ToolResources3(BaseModel):
    """
    A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """

    code_interpreter: CodeInterpreter1 | None = None
    file_search: FileSearch5 | FileSearch6 | None = None


class CreateThreadRequest(BaseModel):
    """
    Options to create a new thread. If no thread is provided when running a
    request, an empty thread will be created.

    """

    model_config = ConfigDict(
        extra='forbid',
    )
    messages: list[CreateMessageRequest] | None = Field(
        None,
        description='A list of [messages](/docs/api-reference/messages) to start the thread with.',
    )
    metadata: Metadata | None = None
    tool_resources: ToolResources3 | None = Field(
        None,
        description="A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
    )


class CreateTranscriptionResponseVerboseJson(BaseModel):
    """
    Represents a verbose json transcription response returned by model, based on the provided input.
    """

    duration: float = Field(..., description='The duration of the input audio.')
    language: str = Field(..., description='The language of the input audio.')
    segments: list[TranscriptionSegment] | None = Field(
        None,
        description='Segments of the transcribed text and their corresponding details.',
    )
    text: str = Field(..., description='The transcribed text.')
    words: list[TranscriptionWord] | None = Field(
        None, description='Extracted words and their corresponding timestamps.'
    )


class CreateTranslationResponseVerboseJson(BaseModel):
    duration: float = Field(..., description='The duration of the input audio.')
    language: str = Field(
        ..., description='The language of the output translation (always `english`).'
    )
    segments: list[TranscriptionSegment] | None = Field(
        None,
        description='Segments of the translated text and their corresponding details.',
    )
    text: str = Field(..., description='The translated text.')


class CreateVectorStoreFileBatchRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    chunking_strategy: ChunkingStrategyRequestParam | None = None
    file_ids: list[str] = Field(
        ...,
        description='A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.',
        max_length=500,
        min_length=1,
    )


class CreateVectorStoreFileRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    chunking_strategy: ChunkingStrategyRequestParam | None = None
    file_id: str = Field(
        ...,
        description='A [File](/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that can access files.',
    )


class CreateVectorStoreRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    chunking_strategy: (
        AutoChunkingStrategyRequestParam | StaticChunkingStrategyRequestParam | None
    ) = Field(
        None,
        description='The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.',
    )
    expires_after: VectorStoreExpirationAfter | None = None
    file_ids: list[str] | None = Field(
        None,
        description='A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.',
        max_length=500,
    )
    metadata: Metadata | None = None
    name: str | None = Field(None, description='The name of the vector store.')


class FineTuneMethod(BaseModel):
    """
    The method used for fine-tuning.
    """

    dpo: FineTuneDPOMethod | None = None
    supervised: FineTuneSupervisedMethod | None = None
    type: Type27 | None = Field(
        None, description='The type of method. Is either `supervised` or `dpo`.'
    )


class FineTuningJob(BaseModel):
    """
    The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.

    """

    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the fine-tuning job was created.',
    )
    error: Error2 | None = Field(
        ...,
        description='For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.',
    )
    estimated_finish: int | None = Field(
        None,
        description='The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.',
    )
    fine_tuned_model: str | None = Field(
        ...,
        description='The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.',
    )
    finished_at: int | None = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.',
    )
    hyperparameters: Hyperparameters2 = Field(
        ...,
        description='The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.',
    )
    id: str = Field(
        ...,
        description='The object identifier, which can be referenced in the API endpoints.',
    )
    integrations: list[FineTuningIntegration] | None = Field(
        None,
        description='A list of integrations to enable for this fine-tuning job.',
        max_length=5,
    )
    method: FineTuneMethod | None = None
    model: str = Field(..., description='The base model that is being fine-tuned.')
    object: Object15 = Field(
        ..., description='The object type, which is always "fine_tuning.job".'
    )
    organization_id: str = Field(
        ..., description='The organization that owns the fine-tuning job.'
    )
    result_files: list[str] = Field(
        ...,
        description='The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).',
    )
    seed: int = Field(..., description='The seed used for the fine-tuning job.')
    status: Status1 = Field(
        ...,
        description='The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.',
    )
    trained_tokens: int | None = Field(
        ...,
        description='The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.',
    )
    training_file: str = Field(
        ...,
        description='The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).',
    )
    validation_file: str | None = Field(
        ...,
        description='The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).',
    )


class FunctionObject(BaseModel):
    description: str | None = Field(
        None,
        description='A description of what the function does, used by the model to choose when and how to call the function.',
    )
    name: str = Field(
        ...,
        description='The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.',
    )
    parameters: FunctionParameters | None = None
    strict: bool | None = Field(
        False,
        description='Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).',
    )


class ListBatchesResponse(BaseModel):
    data: list[Batch]
    first_id: str | None = Field(None, examples=['batch_abc123'])
    has_more: bool
    last_id: str | None = Field(None, examples=['batch_abc456'])
    object: Object21


class ListFilesResponse(BaseModel):
    data: list[OpenAIFile]
    first_id: str = Field(..., examples=['file-abc123'])
    has_more: bool = Field(..., examples=[False])
    last_id: str = Field(..., examples=['file-abc456'])
    object: str = Field(..., examples=['list'])


class ListModelsResponse(BaseModel):
    data: list[ModelModel]
    object: Object21


class ListPaginatedFineTuningJobsResponse(BaseModel):
    data: list[FineTuningJob]
    has_more: bool
    object: Object21


class ListThreadsResponse(BaseModel):
    data: list[ThreadObject]
    first_id: str = Field(..., examples=['asst_abc123'])
    has_more: bool = Field(..., examples=[False])
    last_id: str = Field(..., examples=['asst_abc456'])
    object: str = Field(..., examples=['list'])


class ListVectorStoreFilesResponse(BaseModel):
    data: list[VectorStoreFileObject]
    first_id: str = Field(..., examples=['file-abc123'])
    has_more: bool = Field(..., examples=[False])
    last_id: str = Field(..., examples=['file-abc456'])
    object: str = Field(..., examples=['list'])


class ListVectorStoresResponse(BaseModel):
    data: list[VectorStoreObject]
    first_id: str = Field(..., examples=['vs_abc123'])
    has_more: bool = Field(..., examples=[False])
    last_id: str = Field(..., examples=['vs_abc456'])
    object: str = Field(..., examples=['list'])


class MessageObject(BaseModel):
    """
    Represents a message within a [thread](/docs/api-reference/threads).
    """

    assistant_id: str | None = Field(
        ...,
        description='If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.',
    )
    attachments: list[Attachment] | None = Field(
        ...,
        description='A list of files attached to the message, and the tools they were added to.',
    )
    completed_at: int | None = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the message was completed.',
    )
    content: list[
        MessageContentImageFileObject
        | MessageContentImageUrlObject
        | MessageContentTextObject
        | MessageContentRefusalObject
    ] = Field(
        ..., description='The content of the message in array of text and/or images.'
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the message was created.',
    )
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints.'
    )
    incomplete_at: int | None = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the message was marked as incomplete.',
    )
    incomplete_details: IncompleteDetails | None = Field(
        ...,
        description='On an incomplete message, details about why the message is incomplete.',
    )
    metadata: Metadata
    object: Object28 = Field(
        ..., description='The object type, which is always `thread.message`.'
    )
    role: Role12 = Field(
        ...,
        description='The entity that produced the message. One of `user` or `assistant`.',
    )
    run_id: str | None = Field(
        ...,
        description='The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.',
    )
    status: Status3 = Field(
        ...,
        description='The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.',
    )
    thread_id: str = Field(
        ...,
        description='The [thread](/docs/api-reference/threads) ID that this message belongs to.',
    )


class MessageStreamEvent1(BaseModel):
    """
    Occurs when a [message](/docs/api-reference/messages/object) is created.
    """

    data: MessageObject
    event: Event2


class MessageStreamEvent2(BaseModel):
    """
    Occurs when a [message](/docs/api-reference/messages/object) moves to an `in_progress` state.
    """

    data: MessageObject
    event: Event3


class MessageStreamEvent4(BaseModel):
    """
    Occurs when a [message](/docs/api-reference/messages/object) is completed.
    """

    data: MessageObject
    event: Event5


class MessageStreamEvent5(BaseModel):
    """
    Occurs when a [message](/docs/api-reference/messages/object) ends before it is completed.
    """

    data: MessageObject
    event: Event6


class MessageStreamEvent(
    RootModel[
        MessageStreamEvent1
        | MessageStreamEvent2
        | MessageStreamEvent3
        | MessageStreamEvent4
        | MessageStreamEvent5
    ]
):
    root: (
        MessageStreamEvent1
        | MessageStreamEvent2
        | MessageStreamEvent3
        | MessageStreamEvent4
        | MessageStreamEvent5
    )


class Owner1(BaseModel):
    service_account: ProjectServiceAccount | None = None
    type: Type45 | None = Field(None, description='`user` or `service_account`')
    user: ProjectUser | None = None


class ProjectApiKey(BaseModel):
    """
    Represents an individual API key in a project.
    """

    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) of when the API key was created',
    )
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints'
    )
    name: str = Field(..., description='The name of the API key')
    object: Object32 = Field(
        ...,
        description='The object type, which is always `organization.project.api_key`',
    )
    owner: Owner1
    redacted_value: str = Field(..., description='The redacted value of the API key')


class ProjectApiKeyListResponse(BaseModel):
    data: list[ProjectApiKey]
    first_id: str
    has_more: bool
    last_id: str
    object: Object21


class RealtimeClientEventConversationItemCreate(BaseModel):
    """
    Add a new Item to the Conversation's context, including messages, function
    calls, and function call responses. This event can be used both to populate a
    "history" of the conversation and to add new items mid-stream, but has the
    current limitation that it cannot populate assistant audio messages.

    If successful, the server will respond with a `conversation.item.created`
    event, otherwise an `error` event will be sent.

    """

    event_id: str | None = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    item: RealtimeConversationItem
    previous_item_id: str | None = Field(
        None,
        description='The ID of the preceding item after which the new item will be inserted. \nIf not set, the new item will be appended to the end of the conversation.\nIf set to `root`, the new item will be added to the beginning of the conversation.\nIf set to an existing ID, it allows an item to be inserted mid-conversation. If the\nID cannot be found, an error will be returned and the item will not be added.\n',
    )
    type: Type46 = Field(
        ..., description='The event type, must be `conversation.item.create`.'
    )


class RealtimeClientEventResponseCreate(BaseModel):
    """
    This event instructs the server to create a Response, which means triggering
    model inference. When in Server VAD mode, the server will create Responses
    automatically.

    A Response will include at least one Item, and may have two, in which case
    the second will be a function call. These Items will be appended to the
    conversation history.

    The server will respond with a `response.created` event, events for Items
    and content created, and finally a `response.done` event to indicate the
    Response is complete.

    The `response.create` event includes inference configuration like
    `instructions`, and `temperature`. These fields will override the Session's
    configuration for this Response only.

    """

    event_id: str | None = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    response: RealtimeResponseCreateParams | None = None
    type: Type53 = Field(..., description='The event type, must be `response.create`.')


class RealtimeClientEventSessionUpdate(BaseModel):
    """
    Send this event to update the session’s default configuration. The client may
    send this event at any time to update the session configuration, and any
    field may be updated at any time, except for "voice". The server will respond
    with a `session.updated` event that shows the full effective configuration.
    Only fields that are present are updated, thus the correct way to clear a
    field like "instructions" is to pass an empty string.

    """

    event_id: str | None = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    session: RealtimeSessionCreateRequest
    type: Type54 = Field(..., description='The event type, must be `session.update`.')


class RealtimeServerEventSessionCreated(BaseModel):
    """
    Returned when a Session is created. Emitted automatically when a new
    connection is established as the first server event. This event will contain
    the default Session configuration.

    """

    event_id: str = Field(..., description='The unique ID of the server event.')
    session: RealtimeSession
    type: Type89 = Field(..., description='The event type, must be `session.created`.')


class RealtimeServerEventSessionUpdated(BaseModel):
    """
    Returned when a session is updated with a `session.update` event, unless
    there is an error.

    """

    event_id: str = Field(..., description='The unique ID of the server event.')
    session: RealtimeSession
    type: Type90 = Field(..., description='The event type, must be `session.updated`.')


class JsonSchema(BaseModel):
    description: str | None = Field(
        None,
        description='A description of what the response format is for, used by the model to determine how to respond in the format.',
    )
    name: str = Field(
        ...,
        description='The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.',
    )
    schema_: ResponseFormatJsonSchemaSchema | None = Field(None, alias='schema')
    strict: bool | None = Field(
        False,
        description='Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs).',
    )


class ResponseFormatJsonSchema(BaseModel):
    json_schema: JsonSchema
    type: Type96 = Field(
        ..., description='The type of response format being defined: `json_schema`'
    )


class SubmitToolOutputs(BaseModel):
    """
    Details on the tool outputs needed for this run to continue.
    """

    tool_calls: list[RunToolCallObject] = Field(
        ..., description='A list of the relevant tool calls.'
    )


class RequiredAction(BaseModel):
    """
    Details on the action required to continue the run. Will be `null` if no action is required.
    """

    submit_tool_outputs: SubmitToolOutputs = Field(
        ..., description='Details on the tool outputs needed for this run to continue.'
    )
    type: Type98 = Field(
        ..., description='For now, this is always `submit_tool_outputs`.'
    )


class CodeInterpreter6(BaseModel):
    """
    The Code Interpreter tool call definition.
    """

    input: str | None = Field(
        None, description='The input to the Code Interpreter tool call.'
    )
    outputs: (
        list[
            RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject
            | RunStepDeltaStepDetailsToolCallsCodeOutputImageObject
        ]
        | None
    ) = Field(
        None,
        description='The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.',
    )


class RunStepDeltaStepDetailsToolCallsCodeObject(BaseModel):
    """
    Details of the Code Interpreter tool call the run step was involved in.
    """

    code_interpreter: CodeInterpreter6 | None = Field(
        None, description='The Code Interpreter tool call definition.'
    )
    id: str | None = Field(None, description='The ID of the tool call.')
    index: int = Field(
        ..., description='The index of the tool call in the tool calls array.'
    )
    type: Type100 = Field(
        ...,
        description='The type of tool call. This is always going to be `code_interpreter` for this type of tool call.',
    )


class RunStepDeltaStepDetailsToolCallsObject(BaseModel):
    """
    Details of the tool call.
    """

    tool_calls: (
        list[
            RunStepDeltaStepDetailsToolCallsCodeObject
            | RunStepDeltaStepDetailsToolCallsFileSearchObject
            | RunStepDeltaStepDetailsToolCallsFunctionObject
        ]
        | None
    ) = Field(
        None,
        description='An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.\n',
    )
    type: Type105 = Field(..., description='Always `tool_calls`.')


class CodeInterpreter7(BaseModel):
    """
    The Code Interpreter tool call definition.
    """

    input: str = Field(..., description='The input to the Code Interpreter tool call.')
    outputs: list[
        RunStepDetailsToolCallsCodeOutputLogsObject
        | RunStepDetailsToolCallsCodeOutputImageObject
    ] = Field(
        ...,
        description='The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.',
    )


class RunStepDetailsToolCallsCodeObject(BaseModel):
    """
    Details of the Code Interpreter tool call the run step was involved in.
    """

    code_interpreter: CodeInterpreter7 = Field(
        ..., description='The Code Interpreter tool call definition.'
    )
    id: str = Field(..., description='The ID of the tool call.')
    type: Type100 = Field(
        ...,
        description='The type of tool call. This is always going to be `code_interpreter` for this type of tool call.',
    )


class FileSearch9(BaseModel):
    """
    For now, this is always going to be an empty object.
    """

    ranking_options: RunStepDetailsToolCallsFileSearchRankingOptionsObject | None = None
    results: list[RunStepDetailsToolCallsFileSearchResultObject] | None = Field(
        None, description='The results of the file search.'
    )


class RunStepDetailsToolCallsFileSearchObject(BaseModel):
    file_search: FileSearch9 = Field(
        ..., description='For now, this is always going to be an empty object.'
    )
    id: str = Field(..., description='The ID of the tool call object.')
    type: Type103 = Field(
        ...,
        description='The type of tool call. This is always going to be `file_search` for this type of tool call.',
    )


class RunStepDetailsToolCallsObject(BaseModel):
    """
    Details of the tool call.
    """

    tool_calls: list[
        RunStepDetailsToolCallsCodeObject
        | RunStepDetailsToolCallsFileSearchObject
        | RunStepDetailsToolCallsFunctionObject
    ] = Field(
        ...,
        description='An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.\n',
    )
    type: Type105 = Field(..., description='Always `tool_calls`.')


class RunStepObject(BaseModel):
    """
    Represents a step in execution of a run.

    """

    assistant_id: str = Field(
        ...,
        description='The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.',
    )
    cancelled_at: int | None = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the run step was cancelled.',
    )
    completed_at: int | None = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the run step completed.',
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the run step was created.',
    )
    expired_at: int | None = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.',
    )
    failed_at: int | None = Field(
        ..., description='The Unix timestamp (in seconds) for when the run step failed.'
    )
    id: str = Field(
        ...,
        description='The identifier of the run step, which can be referenced in API endpoints.',
    )
    last_error: LastError1 | None = Field(
        ...,
        description='The last error associated with this run step. Will be `null` if there are no errors.',
    )
    metadata: Metadata
    object: Object50 = Field(
        ..., description='The object type, which is always `thread.run.step`.'
    )
    run_id: str = Field(
        ...,
        description='The ID of the [run](/docs/api-reference/runs) that this run step is a part of.',
    )
    status: Status9 = Field(
        ...,
        description='The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.',
    )
    step_details: (
        RunStepDetailsMessageCreationObject | RunStepDetailsToolCallsObject
    ) = Field(..., description='The details of the run step.')
    thread_id: str = Field(
        ...,
        description='The ID of the [thread](/docs/api-reference/threads) that was run.',
    )
    type: Type114 = Field(
        ...,
        description='The type of run step, which can be either `message_creation` or `tool_calls`.',
    )
    usage: RunStepCompletionUsage


class RunStepStreamEvent1(BaseModel):
    """
    Occurs when a [run step](/docs/api-reference/run-steps/step-object) is created.
    """

    data: RunStepObject
    event: Event7


class RunStepStreamEvent2(BaseModel):
    """
    Occurs when a [run step](/docs/api-reference/run-steps/step-object) moves to an `in_progress` state.
    """

    data: RunStepObject
    event: Event8


class RunStepStreamEvent4(BaseModel):
    """
    Occurs when a [run step](/docs/api-reference/run-steps/step-object) is completed.
    """

    data: RunStepObject
    event: Event10


class RunStepStreamEvent5(BaseModel):
    """
    Occurs when a [run step](/docs/api-reference/run-steps/step-object) fails.
    """

    data: RunStepObject
    event: Event11


class RunStepStreamEvent6(BaseModel):
    """
    Occurs when a [run step](/docs/api-reference/run-steps/step-object) is cancelled.
    """

    data: RunStepObject
    event: Event12


class RunStepStreamEvent7(BaseModel):
    """
    Occurs when a [run step](/docs/api-reference/run-steps/step-object) expires.
    """

    data: RunStepObject
    event: Event13


class UpdateVectorStoreRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    expires_after: VectorStoreExpirationAfter | None = None
    metadata: Metadata | None = None
    name: str | None = Field(None, description='The name of the vector store.')


class UsageTimeBucket(BaseModel):
    end_time: int
    object: Object62
    result: list[
        UsageCompletionsResult
        | UsageEmbeddingsResult
        | UsageModerationsResult
        | UsageImagesResult
        | UsageAudioSpeechesResult
        | UsageAudioTranscriptionsResult
        | UsageVectorStoresResult
        | UsageCodeInterpreterSessionsResult
        | CostsResult
    ]
    start_time: int


class AssistantToolsFunction(BaseModel):
    function: FunctionObject
    type: Type3 = Field(..., description='The type of tool being defined: `function`')


class AssistantsApiResponseFormatOption(
    RootModel[
        AssistantsApiResponseFormatOption1
        | ResponseFormatText
        | ResponseFormatJsonObject
        | ResponseFormatJsonSchema
    ]
):
    root: (
        AssistantsApiResponseFormatOption1
        | ResponseFormatText
        | ResponseFormatJsonObject
        | ResponseFormatJsonSchema
    ) = Field(
        ...,
        description='Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n',
    )


class AuditLogActor(BaseModel):
    """
    The actor who performed the audit logged action.
    """

    api_key: AuditLogActorApiKey | None = None
    session: AuditLogActorSession | None = None
    type: Type5 | None = Field(
        None, description='The type of actor. Is either `session` or `api_key`.'
    )


class Content(RootModel[list[ChatCompletionRequestAssistantMessageContentPart] | None]):
    root: list[ChatCompletionRequestAssistantMessageContentPart] | None = Field(
        None,
        description='An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`.',
        min_length=1,
        title='Array of content parts',
    )


class ChatCompletionRequestAssistantMessage(BaseModel):
    """
    Messages sent by the model in response to user messages.

    """

    audio: Audio | None = Field(
        None,
        description='Data about a previous audio response from the model. \n[Learn more](/docs/guides/audio).\n',
    )
    content: str | Content | None = Field(
        None,
        description='The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.\n',
    )
    name: str | None = Field(
        None,
        description='An optional name for the participant. Provides the model information to differentiate between participants of the same role.',
    )
    refusal: str | None = Field(
        None, description='The refusal message by the assistant.'
    )
    role: Role = Field(
        ..., description='The role of the messages author, in this case `assistant`.'
    )
    tool_calls: ChatCompletionMessageToolCalls | None = None


class ChatCompletionRequestMessage(
    RootModel[
        ChatCompletionRequestDeveloperMessage
        | ChatCompletionRequestSystemMessage
        | ChatCompletionRequestUserMessage
        | ChatCompletionRequestAssistantMessage
        | ChatCompletionRequestToolMessage
        | ChatCompletionRequestFunctionMessage
    ]
):
    root: (
        ChatCompletionRequestDeveloperMessage
        | ChatCompletionRequestSystemMessage
        | ChatCompletionRequestUserMessage
        | ChatCompletionRequestAssistantMessage
        | ChatCompletionRequestToolMessage
        | ChatCompletionRequestFunctionMessage
    )


class ChatCompletionTool(BaseModel):
    function: FunctionObject
    type: Type8 = Field(
        ...,
        description='The type of the tool. Currently, only `function` is supported.',
    )


class CreateAssistantRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: str | None = Field(
        None,
        description='The description of the assistant. The maximum length is 512 characters.\n',
        max_length=512,
    )
    instructions: str | None = Field(
        None,
        description='The system instructions that the assistant uses. The maximum length is 256,000 characters.\n',
        max_length=256000,
    )
    metadata: Metadata | None = None
    model: str | AssistantSupportedModels = Field(
        ...,
        description='ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n',
        examples=['gpt-4o'],
    )
    name: str | None = Field(
        None,
        description='The name of the assistant. The maximum length is 256 characters.\n',
        max_length=256,
    )
    reasoning_effort: ReasoningEffort | None = 'medium'
    response_format: AssistantsApiResponseFormatOption | None = None
    temperature: float | None = Field(
        1,
        description='What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n',
        examples=[1],
        ge=0.0,
        le=2.0,
    )
    tool_resources: ToolResources1 | None = Field(
        None,
        description="A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
    )
    tools: list[
        AssistantToolsCode | AssistantToolsFileSearch | AssistantToolsFunction
    ] = Field(
        [],
        description='A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n',
        max_length=128,
    )
    top_p: float | None = Field(
        1,
        description='An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n',
        examples=[1],
        ge=0.0,
        le=1.0,
    )


class CreateChatCompletionRequest(BaseModel):
    audio: Audio2 | None = Field(
        None,
        description='Parameters for audio output. Required when audio output is requested with\n`modalities: ["audio"]`. [Learn more](/docs/guides/audio).\n',
    )
    frequency_penalty: float | None = Field(
        0,
        description="Number between -2.0 and 2.0. Positive values penalize new tokens based on\ntheir existing frequency in the text so far, decreasing the model's\nlikelihood to repeat the same line verbatim.\n",
        ge=-2.0,
        le=2.0,
    )
    logit_bias: dict[str, int] | None = Field(
        None,
        description='Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the\ntokenizer) to an associated bias value from -100 to 100. Mathematically,\nthe bias is added to the logits generated by the model prior to sampling.\nThe exact effect will vary per model, but values between -1 and 1 should\ndecrease or increase likelihood of selection; values like -100 or 100\nshould result in a ban or exclusive selection of the relevant token.\n',
    )
    logprobs: bool | None = Field(
        False,
        description='Whether to return log probabilities of the output tokens or not. If true,\nreturns the log probabilities of each output token returned in the\n`content` of `message`.\n',
    )
    max_completion_tokens: int | None = Field(
        None,
        description='An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).\n',
    )
    messages: list[ChatCompletionRequestMessage] = Field(
        ...,
        description='A list of messages comprising the conversation so far. Depending on the\n[model](/docs/models) you use, different message types (modalities) are\nsupported, like [text](/docs/guides/text-generation),\n[images](/docs/guides/vision), and [audio](/docs/guides/audio).\n',
        min_length=1,
    )
    metadata: Metadata | None = None
    modalities: ChatCompletionModalities | None = None
    model: str | Model = Field(
        ...,
        description='ID of the model to use. See the [model endpoint compatibility](/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API.',
        examples=['gpt-4o'],
    )
    n: int | None = Field(
        1,
        description='How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.',
        examples=[1],
        ge=1,
        le=128,
    )
    parallel_tool_calls: ParallelToolCalls | None = None
    prediction: PredictionContent | None = Field(
        None,
        description='Configuration for a [Predicted Output](/docs/guides/predicted-outputs),\nwhich can greatly improve response times when large parts of the model\nresponse are known ahead of time. This is most common when you are\nregenerating a file with only minor changes to most of the content.\n',
    )
    presence_penalty: float | None = Field(
        0,
        description="Number between -2.0 and 2.0. Positive values penalize new tokens based on\nwhether they appear in the text so far, increasing the model's likelihood\nto talk about new topics.\n",
        ge=-2.0,
        le=2.0,
    )
    reasoning_effort: ReasoningEffort | None = 'medium'
    response_format: (
        ResponseFormatText | ResponseFormatJsonObject | ResponseFormatJsonSchema | None
    ) = Field(
        None,
        description='An object specifying the format that the model must output.\n\nSetting to `{ "type": "json_schema", "json_schema": {...} }` enables\nStructured Outputs which ensures the model will match your supplied JSON\nschema. Learn more in the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n\nSetting to `{ "type": "json_object" }` enables JSON mode, which ensures\nthe message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model\nto produce JSON yourself via a system or user message. Without this, the\nmodel may generate an unending stream of whitespace until the generation\nreaches the token limit, resulting in a long-running and seemingly "stuck"\nrequest. Also note that the message content may be partially cut off if\n`finish_reason="length"`, which indicates the generation exceeded\n`max_tokens` or the conversation exceeded the max context length.\n',
    )
    seed: int | None = Field(
        None,
        description='This feature is in Beta.\nIf specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n',
    )
    service_tier: ServiceTier | None = Field(
        'auto',
        description="Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:\n  - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.\n  - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee.\n  - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee.\n  - When not set, the default behavior is 'auto'.\n",
    )
    stop: str | Stop | None = Field(
        None,
        description='Up to 4 sequences where the API will stop generating further tokens.\n',
    )
    store: bool | None = Field(
        False,
        description='Whether or not to store the output of this chat completion request for \nuse in our [model distillation](/docs/guides/distillation) or\n[evals](/docs/guides/evals) products.\n',
    )
    stream: bool | None = Field(
        False,
        description='If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n',
    )
    stream_options: ChatCompletionStreamOptions | None = None
    temperature: float | None = Field(
        1,
        description='What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.\n',
        examples=[1],
        ge=0.0,
        le=2.0,
    )
    tool_choice: ChatCompletionToolChoiceOption | None = None
    tools: list[ChatCompletionTool] | None = Field(
        None,
        description='A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\n',
    )
    top_logprobs: int | None = Field(
        None,
        description='An integer between 0 and 20 specifying the number of most likely tokens to\nreturn at each token position, each with an associated log probability.\n`logprobs` must be set to `true` if this parameter is used.\n',
        ge=0,
        le=20,
    )
    top_p: float | None = Field(
        1,
        description='An alternative to sampling with temperature, called nucleus sampling,\nwhere the model considers the results of the tokens with top_p probability\nmass. So 0.1 means only the tokens comprising the top 10% probability mass\nare considered.\n\nWe generally recommend altering this or `temperature` but not both.\n',
        examples=[1],
        ge=0.0,
        le=1.0,
    )
    user: str | None = Field(
        None,
        description='A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n',
        examples=['user-1234'],
    )


class CreateFineTuningJobRequest(BaseModel):
    integrations: list[Integration] | None = Field(
        None, description='A list of integrations to enable for your fine-tuning job.'
    )
    method: FineTuneMethod | None = None
    model: str | Model3 = Field(
        ...,
        description='The name of the model to fine-tune. You can select one of the\n[supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).\n',
        examples=['gpt-4o-mini'],
    )
    seed: int | None = Field(
        None,
        description='The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.\nIf a seed is not specified, one will be generated for you.\n',
        examples=[42],
        ge=0,
        le=2147483647,
    )
    suffix: str | None = Field(
        None,
        description='A string of up to 64 characters that will be added to your fine-tuned model name.\n\nFor example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.\n',
        max_length=64,
        min_length=1,
    )
    training_file: str = Field(
        ...,
        description='The ID of an uploaded file that contains training data.\n\nSee [upload file](/docs/api-reference/files/create) for how to upload a file.\n\nYour dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.\n\nThe contents of the file should differ depending on if the model uses the [chat](/docs/api-reference/fine-tuning/chat-input), [completions](/docs/api-reference/fine-tuning/completions-input) format, or if the fine-tuning method uses the [preference](/docs/api-reference/fine-tuning/preference-input) format.\n\nSee the [fine-tuning guide](/docs/guides/fine-tuning) for more details.\n',
        examples=['file-abc123'],
    )
    validation_file: str | None = Field(
        None,
        description='The ID of an uploaded file that contains validation data.\n\nIf you provide this file, the data is used to generate validation\nmetrics periodically during fine-tuning. These metrics can be viewed in\nthe fine-tuning results file.\nThe same data should not be present in both train and validation files.\n\nYour dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.\n\nSee the [fine-tuning guide](/docs/guides/fine-tuning) for more details.\n',
        examples=['file-abc123'],
    )


class CreateRunRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    additional_instructions: str | None = Field(
        None,
        description='Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.',
    )
    additional_messages: list[CreateMessageRequest] | None = Field(
        None,
        description='Adds additional messages to the thread before creating the run.',
    )
    assistant_id: str = Field(
        ...,
        description='The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.',
    )
    instructions: str | None = Field(
        None,
        description='Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.',
    )
    max_completion_tokens: int | None = Field(
        None,
        description='The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n',
        ge=256,
    )
    max_prompt_tokens: int | None = Field(
        None,
        description='The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n',
        ge=256,
    )
    metadata: Metadata | None = None
    model: str | AssistantSupportedModels | None = Field(
        None,
        description='The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.',
        examples=['gpt-4o'],
    )
    parallel_tool_calls: ParallelToolCalls | None = None
    reasoning_effort: ReasoningEffort | None = 'medium'
    response_format: AssistantsApiResponseFormatOption | None = None
    stream: bool | None = Field(
        None,
        description='If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n',
    )
    temperature: float | None = Field(
        1,
        description='What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n',
        examples=[1],
        ge=0.0,
        le=2.0,
    )
    tool_choice: AssistantsApiToolChoiceOption | None = None
    tools: (
        list[AssistantToolsCode | AssistantToolsFileSearch | AssistantToolsFunction]
        | None
    ) = Field(
        None,
        description='Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.',
        max_length=20,
    )
    top_p: float | None = Field(
        1,
        description='An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n',
        examples=[1],
        ge=0.0,
        le=1.0,
    )
    truncation_strategy: TruncationObject | None = None


class CreateThreadAndRunRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assistant_id: str = Field(
        ...,
        description='The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.',
    )
    instructions: str | None = Field(
        None,
        description='Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.',
    )
    max_completion_tokens: int | None = Field(
        None,
        description='The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n',
        ge=256,
    )
    max_prompt_tokens: int | None = Field(
        None,
        description='The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n',
        ge=256,
    )
    metadata: Metadata | None = None
    model: str | Model9 | None = Field(
        None,
        description='The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.',
        examples=['gpt-4o'],
    )
    parallel_tool_calls: ParallelToolCalls | None = None
    response_format: AssistantsApiResponseFormatOption | None = None
    stream: bool | None = Field(
        None,
        description='If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n',
    )
    temperature: float | None = Field(
        1,
        description='What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n',
        examples=[1],
        ge=0.0,
        le=2.0,
    )
    thread: CreateThreadRequest | None = None
    tool_choice: AssistantsApiToolChoiceOption | None = None
    tool_resources: ToolResources2 | None = Field(
        None,
        description="A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
    )
    tools: (
        list[AssistantToolsCode | AssistantToolsFileSearch | AssistantToolsFunction]
        | None
    ) = Field(
        None,
        description='Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.',
        max_length=20,
    )
    top_p: float | None = Field(
        1,
        description='An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n',
        examples=[1],
        ge=0.0,
        le=1.0,
    )
    truncation_strategy: TruncationObject | None = None


class FineTuneChatCompletionRequestAssistantMessage(
    ChatCompletionRequestAssistantMessage
):
    weight: Weight | None = Field(
        None,
        description='Controls whether the assistant message is trained against (0 or 1)',
    )
    role: Role = Field(
        ..., description='The role of the messages author, in this case `assistant`.'
    )


class FineTuneChatRequestInput(BaseModel):
    """
    The per-line training example of a fine-tuning input file for chat models using the supervised method.
    """

    messages: (
        list[
            ChatCompletionRequestSystemMessage
            | ChatCompletionRequestUserMessage
            | FineTuneChatCompletionRequestAssistantMessage
            | ChatCompletionRequestToolMessage
            | ChatCompletionRequestFunctionMessage
        ]
        | None
    ) = Field(None, min_length=1)
    parallel_tool_calls: ParallelToolCalls | None = None
    tools: list[ChatCompletionTool] | None = Field(
        None, description='A list of tools the model may generate JSON inputs for.'
    )


class Input5(BaseModel):
    messages: (
        list[
            ChatCompletionRequestSystemMessage
            | ChatCompletionRequestUserMessage
            | FineTuneChatCompletionRequestAssistantMessage
            | ChatCompletionRequestToolMessage
            | ChatCompletionRequestFunctionMessage
        ]
        | None
    ) = Field(None, min_length=1)
    parallel_tool_calls: ParallelToolCalls | None = None
    tools: list[ChatCompletionTool] | None = Field(
        None, description='A list of tools the model may generate JSON inputs for.'
    )


class FineTunePreferenceRequestInput(BaseModel):
    """
    The per-line training example of a fine-tuning input file for chat models using the dpo method.
    """

    input: Input5 | None = None
    non_preferred_completion: list[ChatCompletionRequestAssistantMessage] | None = (
        Field(
            None,
            description='The non-preferred completion message for the output.',
            max_length=1,
        )
    )
    preferred_completion: list[ChatCompletionRequestAssistantMessage] | None = Field(
        None,
        description='The preferred completion message for the output.',
        max_length=1,
    )


class ListMessagesResponse(BaseModel):
    data: list[MessageObject]
    first_id: str = Field(..., examples=['msg_abc123'])
    has_more: bool = Field(..., examples=[False])
    last_id: str = Field(..., examples=['msg_abc123'])
    object: str = Field(..., examples=['list'])


class ListRunStepsResponse(BaseModel):
    data: list[RunStepObject]
    first_id: str = Field(..., examples=['step_abc123'])
    has_more: bool = Field(..., examples=[False])
    last_id: str = Field(..., examples=['step_abc456'])
    object: str = Field(..., examples=['list'])


class ModifyAssistantRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: str | None = Field(
        None,
        description='The description of the assistant. The maximum length is 512 characters.\n',
        max_length=512,
    )
    instructions: str | None = Field(
        None,
        description='The system instructions that the assistant uses. The maximum length is 256,000 characters.\n',
        max_length=256000,
    )
    metadata: Metadata | None = None
    model: str | AssistantSupportedModels | None = Field(
        None,
        description='ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n',
    )
    name: str | None = Field(
        None,
        description='The name of the assistant. The maximum length is 256 characters.\n',
        max_length=256,
    )
    reasoning_effort: ReasoningEffort | None = 'medium'
    response_format: AssistantsApiResponseFormatOption | None = None
    temperature: float | None = Field(
        1,
        description='What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n',
        examples=[1],
        ge=0.0,
        le=2.0,
    )
    tool_resources: ToolResources4 | None = Field(
        None,
        description="A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
    )
    tools: list[
        AssistantToolsCode | AssistantToolsFileSearch | AssistantToolsFunction
    ] = Field(
        [],
        description='A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n',
        max_length=128,
    )
    top_p: float | None = Field(
        1,
        description='An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n',
        examples=[1],
        ge=0.0,
        le=1.0,
    )


class RunObject(BaseModel):
    """
    Represents an execution run on a [thread](/docs/api-reference/threads).
    """

    assistant_id: str = Field(
        ...,
        description='The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.',
    )
    cancelled_at: int | None = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the run was cancelled.',
    )
    completed_at: int | None = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the run was completed.',
    )
    created_at: int = Field(
        ..., description='The Unix timestamp (in seconds) for when the run was created.'
    )
    expires_at: int | None = Field(
        ..., description='The Unix timestamp (in seconds) for when the run will expire.'
    )
    failed_at: int | None = Field(
        ..., description='The Unix timestamp (in seconds) for when the run failed.'
    )
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints.'
    )
    incomplete_details: IncompleteDetails1 | None = Field(
        ...,
        description='Details on why the run is incomplete. Will be `null` if the run is not incomplete.',
    )
    instructions: str = Field(
        ...,
        description='The instructions that the [assistant](/docs/api-reference/assistants) used for this run.',
    )
    last_error: LastError | None = Field(
        ...,
        description='The last error associated with this run. Will be `null` if there are no errors.',
    )
    max_completion_tokens: int | None = Field(
        ...,
        description='The maximum number of completion tokens specified to have been used over the course of the run.\n',
        ge=256,
    )
    max_prompt_tokens: int | None = Field(
        ...,
        description='The maximum number of prompt tokens specified to have been used over the course of the run.\n',
        ge=256,
    )
    metadata: Metadata
    model: str = Field(
        ...,
        description='The model that the [assistant](/docs/api-reference/assistants) used for this run.',
    )
    object: Object48 = Field(
        ..., description='The object type, which is always `thread.run`.'
    )
    parallel_tool_calls: ParallelToolCalls
    required_action: RequiredAction | None = Field(
        ...,
        description='Details on the action required to continue the run. Will be `null` if no action is required.',
    )
    response_format: AssistantsApiResponseFormatOption
    started_at: int | None = Field(
        ..., description='The Unix timestamp (in seconds) for when the run was started.'
    )
    status: Status8 = Field(
        ...,
        description='The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.',
    )
    temperature: float | None = Field(
        None,
        description='The sampling temperature used for this run. If not set, defaults to 1.',
    )
    thread_id: str = Field(
        ...,
        description='The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.',
    )
    tool_choice: AssistantsApiToolChoiceOption
    tools: list[
        AssistantToolsCode | AssistantToolsFileSearch | AssistantToolsFunction
    ] = Field(
        ...,
        description='The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.',
        max_length=20,
    )
    top_p: float | None = Field(
        None,
        description='The nucleus sampling value used for this run. If not set, defaults to 1.',
    )
    truncation_strategy: TruncationObject
    usage: RunCompletionUsage


class Delta1(BaseModel):
    """
    The delta containing the fields that have changed on the run step.
    """

    step_details: (
        RunStepDeltaStepDetailsMessageCreationObject
        | RunStepDeltaStepDetailsToolCallsObject
        | None
    ) = Field(None, description='The details of the run step.')


class RunStepDeltaObject(BaseModel):
    """
    Represents a run step delta i.e. any changed fields on a run step during streaming.

    """

    delta: Delta1 = Field(
        ...,
        description='The delta containing the fields that have changed on the run step.',
    )
    id: str = Field(
        ...,
        description='The identifier of the run step, which can be referenced in API endpoints.',
    )
    object: Object49 = Field(
        ..., description='The object type, which is always `thread.run.step.delta`.'
    )


class RunStepStreamEvent3(BaseModel):
    """
    Occurs when parts of a [run step](/docs/api-reference/run-steps/step-object) are being streamed.
    """

    data: RunStepDeltaObject
    event: Event9


class RunStepStreamEvent(
    RootModel[
        RunStepStreamEvent1
        | RunStepStreamEvent2
        | RunStepStreamEvent3
        | RunStepStreamEvent4
        | RunStepStreamEvent5
        | RunStepStreamEvent6
        | RunStepStreamEvent7
    ]
):
    root: (
        RunStepStreamEvent1
        | RunStepStreamEvent2
        | RunStepStreamEvent3
        | RunStepStreamEvent4
        | RunStepStreamEvent5
        | RunStepStreamEvent6
        | RunStepStreamEvent7
    )


class RunStreamEvent1(BaseModel):
    """
    Occurs when a new [run](/docs/api-reference/runs/object) is created.
    """

    data: RunObject
    event: Event14


class RunStreamEvent2(BaseModel):
    """
    Occurs when a [run](/docs/api-reference/runs/object) moves to a `queued` status.
    """

    data: RunObject
    event: Event15


class RunStreamEvent3(BaseModel):
    """
    Occurs when a [run](/docs/api-reference/runs/object) moves to an `in_progress` status.
    """

    data: RunObject
    event: Event16


class RunStreamEvent4(BaseModel):
    """
    Occurs when a [run](/docs/api-reference/runs/object) moves to a `requires_action` status.
    """

    data: RunObject
    event: Event17


class RunStreamEvent5(BaseModel):
    """
    Occurs when a [run](/docs/api-reference/runs/object) is completed.
    """

    data: RunObject
    event: Event18


class RunStreamEvent6(BaseModel):
    """
    Occurs when a [run](/docs/api-reference/runs/object) ends with status `incomplete`.
    """

    data: RunObject
    event: Event19


class RunStreamEvent7(BaseModel):
    """
    Occurs when a [run](/docs/api-reference/runs/object) fails.
    """

    data: RunObject
    event: Event20


class RunStreamEvent8(BaseModel):
    """
    Occurs when a [run](/docs/api-reference/runs/object) moves to a `cancelling` status.
    """

    data: RunObject
    event: Event21


class RunStreamEvent9(BaseModel):
    """
    Occurs when a [run](/docs/api-reference/runs/object) is cancelled.
    """

    data: RunObject
    event: Event22


class RunStreamEvent10(BaseModel):
    """
    Occurs when a [run](/docs/api-reference/runs/object) expires.
    """

    data: RunObject
    event: Event23


class RunStreamEvent(
    RootModel[
        RunStreamEvent1
        | RunStreamEvent2
        | RunStreamEvent3
        | RunStreamEvent4
        | RunStreamEvent5
        | RunStreamEvent6
        | RunStreamEvent7
        | RunStreamEvent8
        | RunStreamEvent9
        | RunStreamEvent10
    ]
):
    root: (
        RunStreamEvent1
        | RunStreamEvent2
        | RunStreamEvent3
        | RunStreamEvent4
        | RunStreamEvent5
        | RunStreamEvent6
        | RunStreamEvent7
        | RunStreamEvent8
        | RunStreamEvent9
        | RunStreamEvent10
    )


class UsageResponse(BaseModel):
    data: list[UsageTimeBucket]
    has_more: bool
    next_page: str
    object: Object61


class AssistantObject(BaseModel):
    """
    Represents an `assistant` that can call the model and use tools.
    """

    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the assistant was created.',
    )
    description: str | None = Field(
        ...,
        description='The description of the assistant. The maximum length is 512 characters.\n',
        max_length=512,
    )
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints.'
    )
    instructions: str | None = Field(
        ...,
        description='The system instructions that the assistant uses. The maximum length is 256,000 characters.\n',
        max_length=256000,
    )
    metadata: Metadata
    model: str = Field(
        ...,
        description='ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n',
    )
    name: str | None = Field(
        ...,
        description='The name of the assistant. The maximum length is 256 characters.\n',
        max_length=256,
    )
    object: Object = Field(
        ..., description='The object type, which is always `assistant`.'
    )
    response_format: AssistantsApiResponseFormatOption | None = None
    temperature: float | None = Field(
        1,
        description='What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n',
        examples=[1],
        ge=0.0,
        le=2.0,
    )
    tool_resources: ToolResources | None = Field(
        None,
        description="A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
    )
    tools: list[
        AssistantToolsCode | AssistantToolsFileSearch | AssistantToolsFunction
    ] = Field(
        ...,
        description='A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n',
        max_length=128,
    )
    top_p: float | None = Field(
        1,
        description='An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n',
        examples=[1],
        ge=0.0,
        le=1.0,
    )


class AssistantStreamEvent(
    RootModel[
        ThreadStreamEvent
        | RunStreamEvent
        | RunStepStreamEvent
        | MessageStreamEvent
        | ErrorEvent
        | DoneEvent
    ]
):
    root: (
        ThreadStreamEvent
        | RunStreamEvent
        | RunStepStreamEvent
        | MessageStreamEvent
        | ErrorEvent
        | DoneEvent
    ) = Field(
        ...,
        description='Represents an event emitted when streaming a Run.\n\nEach event in a server-sent events stream has an `event` and `data` property:\n\n```\nevent: thread.created\ndata: {"id": "thread_123", "object": "thread", ...}\n```\n\nWe emit events whenever a new object is created, transitions to a new state, or is being\nstreamed in parts (deltas). For example, we emit `thread.run.created` when a new run\nis created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses\nto create a message during a run, we emit a `thread.message.created event`, a\n`thread.message.in_progress` event, many `thread.message.delta` events, and finally a\n`thread.message.completed` event.\n\nWe may add additional events over time, so we recommend handling unknown events gracefully\nin your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to\nintegrate the Assistants API with streaming.\n',
    )


class AuditLog(BaseModel):
    """
    A log of a user action or configuration change within this organization.
    """

    actor: AuditLogActor
    api_key_created: ApiKeyCreated | None = Field(
        None,
        alias='api_key.created',
        description='The details for events with this `type`.',
    )
    api_key_deleted: ApiKeyDeleted | None = Field(
        None,
        alias='api_key.deleted',
        description='The details for events with this `type`.',
    )
    api_key_updated: ApiKeyUpdated | None = Field(
        None,
        alias='api_key.updated',
        description='The details for events with this `type`.',
    )
    effective_at: int = Field(
        ..., description='The Unix timestamp (in seconds) of the event.'
    )
    id: str = Field(..., description='The ID of this log.')
    invite_accepted: InviteAccepted | None = Field(
        None,
        alias='invite.accepted',
        description='The details for events with this `type`.',
    )
    invite_deleted: InviteDeleted | None = Field(
        None,
        alias='invite.deleted',
        description='The details for events with this `type`.',
    )
    invite_sent: InviteSent | None = Field(
        None,
        alias='invite.sent',
        description='The details for events with this `type`.',
    )
    login_failed: LoginFailed | None = Field(
        None,
        alias='login.failed',
        description='The details for events with this `type`.',
    )
    logout_failed: LogoutFailed | None = Field(
        None,
        alias='logout.failed',
        description='The details for events with this `type`.',
    )
    organization_updated: OrganizationUpdated | None = Field(
        None,
        alias='organization.updated',
        description='The details for events with this `type`.',
    )
    project: Project | None = Field(
        None,
        description='The project that the action was scoped to. Absent for actions not scoped to projects.',
    )
    project_archived: ProjectArchived | None = Field(
        None,
        alias='project.archived',
        description='The details for events with this `type`.',
    )
    project_created: ProjectCreated | None = Field(
        None,
        alias='project.created',
        description='The details for events with this `type`.',
    )
    project_updated: ProjectUpdated | None = Field(
        None,
        alias='project.updated',
        description='The details for events with this `type`.',
    )
    rate_limit_deleted: RateLimitDeleted | None = Field(
        None,
        alias='rate_limit.deleted',
        description='The details for events with this `type`.',
    )
    rate_limit_updated: RateLimitUpdated | None = Field(
        None,
        alias='rate_limit.updated',
        description='The details for events with this `type`.',
    )
    service_account_created: ServiceAccountCreated | None = Field(
        None,
        alias='service_account.created',
        description='The details for events with this `type`.',
    )
    service_account_deleted: ServiceAccountDeleted | None = Field(
        None,
        alias='service_account.deleted',
        description='The details for events with this `type`.',
    )
    service_account_updated: ServiceAccountUpdated | None = Field(
        None,
        alias='service_account.updated',
        description='The details for events with this `type`.',
    )
    type: AuditLogEventType
    user_added: UserAdded | None = Field(
        None, alias='user.added', description='The details for events with this `type`.'
    )
    user_deleted: UserDeleted | None = Field(
        None,
        alias='user.deleted',
        description='The details for events with this `type`.',
    )
    user_updated: UserUpdated | None = Field(
        None,
        alias='user.updated',
        description='The details for events with this `type`.',
    )


class ListAssistantsResponse(BaseModel):
    data: list[AssistantObject]
    first_id: str = Field(..., examples=['asst_abc123'])
    has_more: bool = Field(..., examples=[False])
    last_id: str = Field(..., examples=['asst_abc456'])
    object: str = Field(..., examples=['list'])


class ListAuditLogsResponse(BaseModel):
    data: list[AuditLog]
    first_id: str = Field(..., examples=['audit_log-defb456h8dks'])
    has_more: bool
    last_id: str = Field(..., examples=['audit_log-hnbkd8s93s'])
    object: Object21


class ListRunsResponse(BaseModel):
    data: list[RunObject]
    first_id: str = Field(..., examples=['run_abc123'])
    has_more: bool = Field(..., examples=[False])
    last_id: str = Field(..., examples=['run_abc456'])
    object: str = Field(..., examples=['list'])
